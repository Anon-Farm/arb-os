//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import func emptyAvmStack();
import impure func cleanAvmAuxStackAndCall(funcToCall: impure func());
import impure func mainRunLoop();
import impure func evmCallStack_isEmpty() -> bool;
import impure func evmCallStack_callRanOutOfGas();
import impure func evmCallStack_callHitError(gasRemaining: uint);


public impure func errorHandler_init() {
    // set up the default error handler
    // this is a small code stub that calls errorHandler
    let stub = asm() func() { errcodept };
    let jumpErrHandler = asm(0x34, errorHandler, stub) func() { pushinsnimm };
    let pushAndJump = asm(0x3b, 0, jumpErrHandler) func() { pushinsnimm };
    asm(pushAndJump,) { errset };
}

func errorHandler() {
    // If we got here, it's because some AVM instruction raised an Error
    // This could happen for several reasons.
    //   1.  untrusted application code tried to do something erroneous, like dividing by zero
    //   2.  untrusted application code ran out of ArbGas
    //   3.  an error occurred due to an unknown bug in the runtime

    // First, make sure we aren't going to run out of ArbGas in this error handler
    // Note that if the application has left the ArbGas allocation at just barely above zero,
    //      we could run out of ArbGas before we succeed in protecting ourself from ArbGas underflow.
    // If that happens, we'll get thrown back to this error handler again, but with ArbGas set to MaxUint256
    // In other words, it will look like the application ran out of ArbGas just before returning control to us
    //      so that's not a problem: we will conclude correctly that the application used too much ArbGas.
    let arbGasRemainingOnEntry = asm() uint { getgas };
    asm(~0,) { setgas };

    if (evmCallStack_isEmpty()) {
        // Oh no, we must have hit an unexpected error in the runtime.
        // That shouldn't have happened, but we have to make the best of the situation.
        // So we'll clean up our stacks and jump back to the main runloop.
        emptyAvmStack();
        cleanAvmAuxStackAndCall(mainRunLoop);  // this will never return
    } elseif (arbGasRemainingOnEntry >= asm(2, 255) uint { exp }) {
        evmCallStack_callRanOutOfGas();  // this will never return
    } else {
        evmCallStack_callHitError(arbGasRemainingOnEntry);  // this will never return
    }
    //NOTREACHED
    panic;
}