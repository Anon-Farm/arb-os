//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This is a small standalone runtime that loads a module,
//      calls it, and logs the results.

import type MarshalledBytes;
import type ByteArray;
import type ByteStream;

import impure func inbox_init();
import impure func inbox_get() -> any;
import func bytearray_new(size: uint, autoExpand: bool) -> ByteArray;
import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytestream_new(ba: ByteArray) -> ByteStream;
import func unmarshalCodeSegment(bs: ByteStream) -> option<(func() -> any, func())>;

func main() {
    inbox_init();
    let ethMsg = inbox_get();
    let msg = asm(ethMsg,) any { [3] tget };
    let mb = unsafecast<MarshalledBytes>(msg);
    let ba = bytearray_unmarshalBytes(mb);
    let bs = bytestream_new(ba);
    if let Some(res) = unmarshalCodeSegment(bs) {
        let (initCodePt, callCodePt) = res;
        callCodePt();
    } else {
        ;//panic;
    }
}