//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type Account;
import type EvmCallFrame;
import type ByteArray;

import impure func evmCallStack_currentFrame() -> EvmCallFrame;
import impure func evmCallStack_setCurrentFrameMemory(mem: ByteArray);
import impure func evmCallStack_setCurrentFrameStorageCell(addr: address, offset: uint, val: uint);

import func evmCallFrame_currentAccount(frame: EvmCallFrame) -> Account;
import func evmCallFrame_getAccount(frame: EvmCallFrame, addr: address) -> Account;
import func evmCallFrame_getMemory(frame: EvmCallFrame) -> ByteArray;
import impure func selfDestructQueue_put(victim: address, owner: address);

import func account_getAddress(acct: Account) -> address;
import func account_getCodeSize(acct: Account) -> uint;
import func account_getBalance(acct: Account) -> uint;
import func account_getCode(acct: Account) -> ByteArray;
import func account_getStorageCell(acct: Account, offset: uint) -> uint;

import impure func inbox_currentTimestamp() -> uint;
import impure func inbox_currentBlockNumber() -> uint;

import func byteArray_size(ba: ByteArray) -> uint;
import func byteArray_getByte(ba: ByteArray, offset: uint) -> uint;
import func byteArray_setByte(ba: ByteArray, offset: uint, val: uint) -> ByteArray;
import func byteArray_get256(ba: ByteArray, offset: uint) -> uint;
import func byteArray_set256(ba: ByteArray, offset: uint, val: uint) -> ByteArray;
import func byteArray_copy(from: ByteArray, fromOffset: uint, to: ByteArray, toOffset: uint, nbytes: uint) -> ByteArray;

import func keccak256(array: ByteArray, offset: uint, nbytes: uint) -> bytes32;


public func evmOp_stop() {
    panic; //TODO
}

public func evmOp_sha3(baseMemAddr: uint, nbytes: uint) -> bytes32 {
    let memory = evmCallFrame_getMemory(
        evmCallStack_currentFrame()
    );
    return keccak256(memory, baseMemAddr, nbytes);
}

public func evmOp_address() -> address {
    return account_getAddress(
        evmCallFrame_currentAccount(
            evmCallStack_currentFrame()
        )
    );
}

public func evmOp_balance(addr: address) -> uint {
    return account_getBalance(
        evmCallFrame_getAccount(
            evmCallStack_currentFrame(),
            addr
        )
    );
}
    
public func evmOp_origin() -> address {
    panic; //TODO
}
    
public func evmOp_caller() -> address {
    panic; //TODO
}

public func evmOp_callvalue() -> uint {
    panic; //TODO
}

public func evmOp_calldataload(offset: uint) -> uint {
    panic; //TODO
}

public func evmOp_calldatasize() -> uint {
    panic; //TODO
}

public func evmOp_calldatacopy(memAddr: uint, calldataOffset: uint, nbytes: uint) {
    panic; //TODO
}

public impure func evmOp_codesize() -> uint {
    return account_getCodeSize(
        evmCallFrame_currentAccount(
            evmCallStack_currentFrame()
        )
    );
}

public impure func evmOp_codecopy(memAddr: uint, codeOffset: uint, nbytes: uint) {
    let frame = evmCallStack_currentFrame();
    let memory = evmCallFrame_getMemory(frame);
    memory = byteArray_copy(
        account_getCode(
            evmCallFrame_currentAccount(frame)
        ),
        codeOffset,
        memory,
        memAddr,
        nbytes
    );
    evmCallStack_setCurrentFrameMemory(memory);
}

public func evmOp_extcodesize(addr: address) -> uint {
    panic; //TODO
}

public func evmOp_extcodecopy(addr: address, memAddr: uint, codeOffset: uint, nbytes: uint) {
    panic; //TODO
}

public func evmOp_returndatasize() -> uint {
    panic; //TODO
}

public func evmOp_returndatacopy(memAddr: uint, dataOffset: uint, nbytes: uint) {
    panic; //TODO
}

public impure func evmOp_timestamp() -> uint {
    return inbox_currentTimestamp();
}

public func evmOp_number() -> uint {
    return inbox_currentBlockNumber();
}

public impure func evmOp_mload(memAddr: uint) -> uint {
    return byteArray_get256(
        evmCallFrame_getMemory(
            evmCallStack_currentFrame()
        ),
        memAddr
    );
}

public impure func evmOp_mstore(memAddr: uint, value: uint) {
    evmCallStack_setCurrentFrameMemory(
        byteArray_set256(
            evmCallFrame_getMemory(evmCallStack_currentFrame()),
            memAddr,
            value
        )
    );
}

public impure func evmOp_mstore8(memAddr: uint, value:uint) {
       evmCallStack_setCurrentFrameMemory(
        byteArray_setByte(
            evmCallFrame_getMemory(evmCallStack_currentFrame()),
            memAddr,
            value
        )
    );
}
    
public impure func evmOp_sload(storageAddr: uint) -> uint {
    return account_getStorageCell(
        evmCallFrame_currentAccount(
            evmCallStack_currentFrame()
        ),
        storageAddr
    );
}

public impure func evmOp_sstore(storageAddr: uint, value: uint) {
    evmCallStack_setCurrentFrameStorageCell(
        account_getAddress(
            evmCallFrame_currentAccount(
                evmCallStack_currentFrame()
            )
        ),
        storageAddr,
        value
    );
}
    
public func evmOp_getjumpaddr() {
    //BUGBUG: don't know the type signature of this one
    panic; //TODO
}

public func evmOp_msize() -> uint {
    return byteArray_size(
        evmCallFrame_getMemory(
            evmCallStack_currentFrame()
        )
    );
}

public func evmOp_log0(
    memAddr: uint, 
    nbytes: uint
) {
    panic; //TODO
}

public func evmOp_log1(
    memAddr: uint, 
    nbytes: uint, 
    topic0: uint
) {
    panic; //TODO
}

public func evmOp_log2(
    memAddr: uint, 
    nbytes: uint, 
    topic0: uint,
    topic1: uint,
) {
    panic; //TODO
}

public func evmOp_log3(
    memAddr: uint, 
    nbytes: uint, 
    topic0: uint,
    topic1: uint,
    topic2: uint,
) {
    panic; //TODO
}

public func evmOp_log4(
    memAddr: uint, 
    nbytes: uint, 
    topic0: uint,
    topic1: uint,
    topic2: uint,
    topic3: uint,
) {
    panic; //TODO
}

public func evmOp_sloadbytes() {
    //BUGBUG: don't know type signature of this one 
    panic; //TODO
}

public func evmOp_sstorebytes() {
    //BUGBUG: don't know type signature of this one 
    panic; //TODO
}

public func evmOp_ssize() {
    //BUGBUG: don't know type signature of this one 
    panic; //TODO
}

public func evmOp_call(
    gas: uint,
    callee: address,
    balance: uint,
    inMemOffset: uint,
    inNbytes: uint,
    outMemOffset: uint,
    outMemSize: uint
) -> bool {
    panic; //TODO
}

public func evmOp_callcode(
    gas: uint,
    callee: address,
    balance: uint,
    inMemOffset: uint,
    inNbytes: uint,
    outMemOffset: uint,
    outMemSize: uint
) -> bool {
    panic; //TODO
}

public func evmOp_delegatecall(
    gas: uint,
    callee: address,
    inMemOffset: uint,
    inNbytes: uint,
    outMemOffset: uint,
    outMemSize: uint
) -> bool {
    panic; //TODO
}

public func evmOp_staticcall(
    gas: uint,
    callee: address,
    inMemOffset: uint,
    inNbytes: uint,
    outMemOffset: uint,
    outMemSize: uint
) -> bool {
    panic; //TODO
}

public func evmOp_revert(memOffset: uint, memNbytes: uint) {
    panic; //TODO
}

public func evmOp_return(memOffset: uint, memNbytes: uint) {
    panic; //TODO
}

public func evmOp_txexecgas() {
    //BUGBUG: don't know the type signature of this one 
    panic; //TODO
}

public func evmOp_selfdestruct(owner: address) {
    selfDestructQueue_put(
        account_getAddress(
            evmCallFrame_currentAccount(
                evmCallStack_currentFrame()
            )
        ),
        owner
    );
}