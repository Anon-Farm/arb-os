//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;
import type ByteStream;
import type MarshalledBytes;
import type AccountStore;
import type Account;
import type EvmLogs;

import impure func getGlobalAccountStore() -> AccountStore;
import impure func setGlobalAccountStore(acctStore: AccountStore);
import func accountStore_get(acctStore: AccountStore, addr: address) -> Account;
import func accountStore_set(acctStore: AccountStore, addr: address, acct: Account) -> AccountStore;
import func accountStore_transferEthBalance(
    acctStore: AccountStore,
    from: address, 
    to: address, 
    amount: uint
) -> option<AccountStore>;
import func accountStore_createAccountFromEvmCode(
    acctStore: AccountStore,
    newAddr: address,
    evmCode: ByteArray,
    evmJumpTable: map<uint, func()>,
    startCodePt: func(),
    storageMap: map<uint, uint>
) -> option<AccountStore>;
import func account_checkAndIncrSeqNum(
    account: Account, 
    seqNumRecvd: uint
) -> option<Account>;

import func account_getStartCodePoint(acct: Account) -> option<func()>;

import impure func initEvmCallStack(
    callKind: uint,
    ethMessage: MessageFromL1,
    addr: address,
    caller: address,
    calldata: ByteArray,
    callvalue: uint,
    gas: uint
);
import func evmCallStack_runningCodeFromAccount() -> option<Account>;

import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytearray_marshalFull(ba: ByteArray) -> MarshalledBytes;

import func bytestream_new(ba: ByteArray) -> ByteStream;
import func bytestream_getByte(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_getUint(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_getRemainingBytes(bs: ByteStream) -> ByteArray;

import func makeInitStructures(v: any) -> (map<uint, func()>, map<uint, uint>);
import func translateEvmCodeSegment(bs: ByteStream) -> option<(func(), map<uint, func()>)>;

import func cleanUpAndJumpToRunLoop();

type EthBridgeMessage = struct {
    blockNum: uint,
    timestamp: uint,
    txId: uint,
    message: ArbMessage,
}

type ArbMessage = struct {
    msgType: uint,
    sender: address,
    message: any,
}

type TokenTransferMessage = struct {
    tokenAddress: address,
    dest: address,
    amount: uint,
}

type EthTransferMessage = struct {
    dest: address,
    amount: uint,
}

type TxMessage = struct {
    to: address,
    seqNumber: uint,
    value: uint,
    data: MarshalledBytes,
    maxGas: uint,
    gasPriceBid: uint
}

type CallMessage = struct {
    to: address,
    data: MarshalledBytes,
}

type AvmCodeLoadMessage = struct {
    seqNum: uint,
    data: MarshalledBytes,
}

type EvmCodeLoadMessage = struct {
    contractAddr: address,
    data: MarshalledBytes,
    storageInfo: StorageInfo,
}
    
type StorageInfo = struct {
    offset: uint,
    value: uint,
    more: any,
}

public impure func handleEthbridgeMessage(ethMsg: EthBridgeMessage) {
    let arbMsg = ethMsg.message;
    let msgType = arbMsg.msgType;
    if (msgType == 0) {
        let txMsg = unsafecast<TxMessage>(arbMsg.message);
        let globalAS = getGlobalAccountStore();
        let account = accountStore_get(globalAS, arbMsg.sender);
        if let Some(updatedAcct) = account_checkAndIncrSeqNum(account, txMsg.seqNumber) {
            setGlobalAccountStore(
                accountStore_set(globalAS, arbMsg.sender, updatedAcct),
            );
//            if ( ! handleValidTxMessage(txMsg, ethMsg)) {
//                panic; // for debugging -- call failed
//            }
        } else {
            // sequence number was invalid
            panic; //TODO
        }
    } elseif (msgType == 1) {
        let depMsg = unsafecast<EthTransferMessage>(arbMsg.message);
        let globalAS = getGlobalAccountStore();
        if let Some(newGAS) = accountStore_transferEthBalance(
            globalAS, 
            arbMsg.sender,
            depMsg.dest, 
            depMsg.amount
        ) {
            setGlobalAccountStore(newGAS,);
            panic; // TODO
        } else {
            panic; //TODO
        }
    } elseif (msgType == 2) {
        let depMsg = unsafecast<TokenTransferMessage>(arbMsg.message);
        panic; // deposit ERC 20
    } elseif (msgType == 3) {
        let depMsg = unsafecast<TokenTransferMessage>(arbMsg.message);
        panic; // deposit ERC 721
    } elseif (msgType == 4) {
        panic; // contract tx call message
    } elseif (msgType == 5) {
        let callMsg = unsafecast<CallMessage>(arbMsg.message);
        panic; // call message
    // msgType 6  is currently unused
    } elseif (msgType == 7) {
        let codeLoadMsg = unsafecast<EvmCodeLoadMessage>(arbMsg.message);
        let globalAS = getGlobalAccountStore();
        let ba = bytearray_unmarshalBytes(codeLoadMsg.data);
        let bs = bytestream_new(ba);
        if let Some(res) = translateEvmCodeSegment(bs) {
            let (codept, evmJumpTable) = res;
            let newAddr = codeLoadMsg.contractAddr;
            if let Some(as) = accountStore_createAccountFromEvmCode(
                globalAS,
                newAddr,
                ba,
                evmJumpTable,
                codept,
                makeStorageMap(codeLoadMsg.storageInfo)
            ) {
                globalAS = as;
            } else {
                asm((666, 0),) { log };
            }
        } else {
            asm((666, 1),) { log };
        }
        setGlobalAccountStore(globalAS,);
    }
    // if no case matches, unrecognized message type; ignore it
}

type MessageFromL1 = struct {
    blockHash: bytes32,
    timestamp: uint,
    blockNumber: uint,
    sender: address,
    msgData: MarshalledBytes
}

public func handleMessageFromL1(msg: MessageFromL1) -> option<()> {
    let inStream = bytestream_new(bytearray_unmarshalBytes(msg.msgData));

    let (bs, msgType) = bytestream_getByte(inStream)?;
    inStream = bs;

    if (msgType == 0) {
        // txcall message

        let (bs, sequenceNum) = bytestream_getUint(inStream)?;
        inStream = bs;
        verifyAndIncrSequenceNum(msg.sender, sequenceNum)?;

        return handleValidTxMessage(inStream, msg);
    } elseif (msgType == 1) {
        // ethtransfer message

        let (bs, destination) = bytestream_getUint(inStream)?;
        inStream = bs;

        let (bs, amount) = bytestream_getUint(inStream)?;
        inStream = bs;

        return None;  // NOT YET IMPLEMENTED
    } elseif (msgType == 2) {
        // ERC20 token transfer message
        return None; // NOT YET IMPLEMENTED
    } elseif (msgType == 3) {
        // ERC721 token transfer message
        return None; // NOT YET IMPLEMENTED
    } elseif (msgType == 4) {
        // contract txcall message
        return None; // NOT YET IMPLEMENTED
    } elseif (msgType == 5) {
        // (non-mutating) call message
        return None; // NOT YET IMPLEMENTED
    } elseif (msgType == 6) {
        // this message type is currently unused
        return None;
    } elseif (msgType == 7) {
        // EVM code load message
        let (bs, contractAddressAsUint) = bytestream_getUint(inStream)?;
        inStream = bs;

        let (storageMap, bs) = parseStorageMap(bs)?;
        inStream = bs;

        let codeBytes = bytestream_getRemainingBytes(bs);
        let (codept, evmJumpTable) = translateEvmCodeSegment(bytestream_new(codeBytes))?;
        setGlobalAccountStore(
            accountStore_createAccountFromEvmCode(
                getGlobalAccountStore(),
                address(contractAddressAsUint),
                codeBytes,
                evmJumpTable,
                codept,
                storageMap
            )?
        );
        return Some(());
    } else {
        // not a valid message type
        return None;
    }
}

impure func verifyAndIncrSequenceNum(addr: address, seqNum: uint) -> option<()> {
    let globalAS = getGlobalAccountStore();
    setGlobalAccountStore(
        accountStore_set(
            globalAS,
            addr,
            account_checkAndIncrSeqNum(
                accountStore_get(globalAS, addr),
                seqNum
            )?
        )
    );
    return Some(());
}

func makeStorageMap(storageInfo: StorageInfo) -> map<uint, uint> {
    let ret = newmap<uint, uint>;
    while (null != unsafecast<any>(storageInfo)) {
        ret = ret with { [storageInfo.offset] = storageInfo.value };
        storageInfo = unsafecast<StorageInfo>(storageInfo.more);
    }
    return ret;
}

func parseStorageMap(bs: ByteStream) -> option<(map<uint, uint>, ByteStream)> {
    let storageMap = newmap<uint, uint>;
    loop {
        let (ubs, more) = bytestream_getByte(bs)?;
        bs = ubs;
        if (more == 0) {
            return Some((storageMap, bs));
        }
        let (ubs, offset) = bytestream_getUint(bs)?;
        bs = ubs;
        let (ubs, value) = bytestream_getUint(bs)?;
        bs = ubs;
        storageMap = storageMap with { [offset] = value };
    }
}

impure func handleValidTxMessage(inStream: ByteStream, fullMsg: MessageFromL1) -> option<()> {
    let (bs, calleeAddressAsUint) = bytestream_getUint(inStream)?;
    inStream = bs;

    let (bs, value) = bytestream_getUint(inStream)?;
    inStream = bs;

    let (bs, maxGas) = bytestream_getUint(inStream)?;
    inStream = bs;

    let (bs, gasPriceBid) = bytestream_getUint(inStream)?;
    inStream = bs;

    initEvmCallStack(
        0,    // txcall type
        fullMsg,
        address(calleeAddressAsUint),
        fullMsg.sender,
        bytestream_getRemainingBytes(inStream),
        value,
        maxGas
    );  // should never return

    return None;
}
