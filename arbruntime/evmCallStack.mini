//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type AccountStore;
import type Account;
import type Queue;
import type ByteArray;

import func getGlobalAccountStore() -> AccountStore;
import func accountStore_get(store: AccountStore, addr: address) -> Account;
import func accountStore_set(store: AccountStore, addr: address, acct: Account) -> AccountStore;
import func account_setStorageCell(acct: Account, offset: uint, value: uint) -> Account;
import func account_getBalance(acct: Account) -> uint;
import func account_setBalance(acct: Account, bal: uint) -> Account;
import func account_deductFromEthBalance(account: Account, deduction: uint) -> option<Account>;

import func bytearray_new(capacity: uint, variableSize: bool) -> ByteArray;

import func queue_new() -> Queue;
import func queue_isEmpty(q: Queue) -> bool;
import func queue_get(q: Queue) -> (Queue, any);
import func queue_put(q: Queue, val: any) -> Queue;


type EvmCallFrame = struct {
    addr: address,
    accountStore: AccountStore,
    currentAccount: Account,
    calldata: ByteArray,
    callvalue: uint,
    returndata: option<ByteArray>,
    memory: ByteArray,
    parent: option<any>,      // really an option<EvmCallFrame>, but compiler doesn't allow recursive types
}

var globalCallStack: option<EvmCallFrame>;

public impure func initEvmCallStack(
    addr: address,
    calldata: ByteArray,
    callvalue: uint,
) {
    let globalAS = getGlobalAccountStore();
    globalCallStack = Some(struct {
        addr: addr,
        accountStore: globalAS,
        currentAccount: accountStore_get(globalAS, addr),
        calldata: calldata,
        callvalue: callvalue,
        returndata: None<ByteArray>,
        memory: bytearray_new(8, true),
        parent: None<any>
    });
}

public impure func evmCallStack_currentFrame() -> option<EvmCallFrame> {
    return globalCallStack;
}

public impure func evmCallStack_currentAccount() -> option<Account> {
    if let Some(topFrame) = globalCallStack {
        return Some(topFrame.currentAccount);
    } else {
        return None<Account>;
    }
}

public impure func evmCallStack_currentAccountAndAddr() -> option<(Account, address)> {
    if let Some(topFrame) = globalCallStack {
        return Some((topFrame.currentAccount, topFrame.addr));
    } else {
        return None<(Account, address)>;
    }
}

public impure func evmCallStack_writeCurrentAccount(acct: Account) -> bool {
    if let Some(topFrame) = globalCallStack {
        globalCallStack = Some(topFrame with { currentAccount: acct });
        return true;
    } else {
        return false;
    }
}

public impure func evmCallStack_getAccount(addr: address) -> option<Account> {
    if let Some(topFrame) = globalCallStack {
       if (topFrame.addr == addr) {
            return Some(topFrame.currentAccount);
        } else {
            return Some(accountStore_get(topFrame.accountStore, addr));
        }
    } else {
        return None<Account>;
    }
}

public impure func evmCallStack_setAccount(addr: address, acct: Account) -> bool {
    if let Some(topFrame) = globalCallStack {
        if (topFrame.addr == addr) {
            globalCallStack = Some(topFrame with { currentAccount: acct });
        } else {
            globalCallStack = Some(topFrame with {
                accountStore: accountStore_set(topFrame.accountStore, addr, acct)
            });
        }
        return true;
    } else {
        return false;
    }
}

public impure func evmCallStack_setCurrentFrameMemory(mem: ByteArray) -> bool {
    if let Some(topFrame) = globalCallStack {
        globalCallStack = Some(topFrame with { memory: mem });
        return true;
    } else {
        return false;
    }
}

public impure func evmCallStack_transferEthFromCurrent(
    dest: address,
    amount: uint,
) -> bool {
    if let Some(topFrame) = globalCallStack {
        if (topFrame.addr == dest) {
            return false;   // can't do a self-transfer
        }
        let curAcct = topFrame.currentAccount;
        let curBalance = account_getBalance(curAcct);
        if (curBalance < amount) {
            return false;   // insufficient funds
        }
        topFrame = topFrame with {
            currentAccount: account_setBalance(curAcct, curBalance-amount)
        };
        let otherAcct = accountStore_get(topFrame.accountStore, dest);
        topFrame = topFrame with {
            accountStore: accountStore_set(
                topFrame.accountStore,
                dest,
                account_setBalance(
                    otherAcct,
                    account_getBalance(otherAcct) + amount
                )
            )
        };
        globalCallStack = Some(topFrame);
        return true;
    } else {
        return false;  // no current call frame
    }
}

public impure func evmCallStack_setCurrentFrameStorageCell(offset: uint, value: uint) -> bool {
    if let Some(topFrame) = globalCallStack {
        globalCallStack = Some(topFrame with {
            currentAccount: account_setStorageCell(
                topFrame.currentAccount,
                offset,
                value
            )
        });
        return true;
    } else {
        return false;
    }
}

public func evmCallFrame_currentAccount(frame: EvmCallFrame) -> Account {
    return frame.currentAccount;
}

public func evmCallFrame_getAccount(frame: EvmCallFrame, addr: address) -> Account {
    if (addr == frame.addr) {
        return frame.currentAccount;
    } else {
        return accountStore_get(frame.accountStore, addr);
    }
}

public func evmCallFrame_getMemory(frame: EvmCallFrame) -> ByteArray {
    return frame.memory;
}

public func evmCallFrame_getCallvalue(frame: EvmCallFrame) -> uint {
    return frame.callvalue;
}

public func evmCallFrame_getCalldata(frame: EvmCallFrame) -> ByteArray {
    return frame.calldata;
}

var selfDestructQueue: Queue;

impure func initSelfDestructQueue() {
    if (null == unsafecast<any>(selfDestructQueue)) {
        selfDestructQueue = queue_new();
    }
}

public impure func selfDestructQueue_put(addr: address, owner: address) {
    selfDestructQueue = queue_put(selfDestructQueue, (addr, owner,));
}

func selfDestructQueue_execute() {
    while ( ! queue_isEmpty(selfDestructQueue)) {
        let (q, item,) = queue_get(selfDestructQueue);
        selfDestructQueue = q;
        let (addr, owner,) = unsafecast<(address, address)>(item);
        //BUGBUG: destroy addr, send addr's funds to owner
    }
}