//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type EthBridgeMessage;

import impure func inbox_init();
import impure func accountStore_init();

import impure func inbox_get() -> EthBridgeMessage;
import impure func handleEthbridgeMessage(msg: EthBridgeMessage);


impure func main() {
    inbox_init();
    accountStore_init();
    
    mainRunLoop();
}

public impure func mainRunLoop() {
    loop {
        let msg = inbox_get();
        handleEthbridgeMessage(msg,);
    }
    panic;  // should never be reached
}

public func cleanUpAndJumpToRunLoop() {
    // When this is called, there might be unwanted junk in the stack and auxstack
    // This function will discard all of that stuff and then jump to mainRunLoop

    // discard everything from the auxstack, except the current callframe (which is on top)
    while ( ! asm() bool { auxpop auxstackempty swap1 auxpush }) {
        asm() {
            auxpop
            auxpop
            pop
            auxpush
        };
    }

    // discard everything on the stack
    while ( ! asm() bool { stackempty }) {
        asm() { pop };
    }

    // discard our callframe, push a fake return address, and jump to mainRunLoop
    // mainRunLoop will think somebody called it normally
    asm(mainRunLoop,) {
        auxpop
        pop
        [0] swap1  // bogus return address, which mainRunLoop expects to see but will never use
        jump
    };

    panic; // should never be reached
}