//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import impure func accountStore_init();

import type Queue;
import func queue_new() -> Queue;
import func queue_isEmpty(q: Queue) -> bool;
import func queue_get(q: Queue) -> (Queue, any);
import func queue_put(q: Queue, val: any) -> Queue;
import impure func handleEthbridgeMessage(msg: any);


impure func main() {
    accountStore_init();
    let inbox = queue_new();
    loop {
        inbox = getFromL1Inbox(inbox);
        while ( ! queue_isEmpty(inbox)) {
            let (newInbox, thisMsg,) = queue_get(inbox);
            inbox = newInbox;
            handleEthbridgeMessage(thisMsg);
        }
    }
}

type TimeTuple = struct {
    blockLowerBound: uint,
    blockUpperBound: uint,
    timestampLowerBound: uint,
    timestampUpperBound: uint,
}

impure func getTime() -> TimeTuple {
    return asm() TimeTuple { gettime };
}

type InboxCell = struct {
    rest: any,   // really an InboxCell, but language doesn't allow recursive types
    msg: any,
}

impure func getFromL1Inbox(msgq: Queue) -> Queue {
    let newMsgs = asm(0) InboxCell { inbox };
    return addInboxToQueue(msgq, newMsgs);
}

func addInboxToQueue(msgq: Queue, newMsgs: InboxCell) -> Queue {
    if (unsafecast<any>(newMsgs) == null) {
        return msgq;
    } else {
        return queue_put(
            addInboxToQueue(msgq, unsafecast<InboxCell>(newMsgs.rest)),
            newMsgs.msg
        );
    }
}
