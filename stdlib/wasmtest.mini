
use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_unmarshalBytes;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_get64;
use std::bytearray::bytearray_set64;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_copy;
use std::bytearray::bytearray_buffer;

func main() {
    let buf = #include "/home/sami/wasm-hash/pkg/wasm_hash_bg.wasm";
    let ln = 27105;
    let compiled = asm(ln, buf,) any { compilewasm };

    let ba = bytearray_copy(setupFromUnmarshal(), 0, bytearray_new(0), 0, 67);
    // let ba = bytearray_setByte(ba, 10000, 123);
    let ba_buf = bytearray_buffer(ba);
    let i = 0;
    while (i < 100000) {
        let res = asm(10000,ba_buf,compiled,) any { runwasm };
        i = i + 1;
    }
    let res = asm(67,ba_buf,compiled,) any { runwasm };
    debug(res);
}

func setupFromUnmarshal() -> ByteArray {
	let marshalledStruct = unsafecast<MarshalledBytes>((
		67,
		(
            0x4041420000000000000000000000000000000000000000000000000000000000,
			(
				0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f,
				(
					0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,
					null,
				),
			),
		),
	));
	if let Some(ba) = bytearray_unmarshalBytes(marshalledStruct) {
	    return ba;
	} else {
	    panic;
	}
}
