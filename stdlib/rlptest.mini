//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_fromSizeAndBuffer;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_marshalFull;
use std::bytearray::bytearray_unmarshalBytes;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_setByte;

use std::bytestream::bytestream_new;

use std::keccak::keccak256;

use std::rlp::rlp_init;
use std::rlp::rlp_encodeUint;
use std::rlp::rlp_encodeBytes;
use std::rlp::rlp_encodeList;
use std::rlp::rlp_encodeMessageInfo;
use std::rlp::rlp_encodeAndHashMessageInfoForSignature;
use std::rlp::rlp_decodeMessageInfo;
use std::rlp::rlp_encodeMessageInfo_old;

use std::rlp::rlp_decodeUint;
use std::rlp::rlp_decodeBytes;

type SignedTx = struct {
    seqNum: uint,
    gasPrice: uint,
    gasLimit: uint,
    to: address,
    value: uint,
    data: ByteArray,
    v: uint,
    r: uint,
    s: uint
};


write view func main(kind: uint, value: any) {
    rlp_init();
    if (kind == 0) {
        let ui = unsafecast<uint>(value);
        let ba = bytearray_new(0);
        let (uba, _) = rlp_encodeUint(ui, ba, 0);
        ba = uba;

        // decode and verify no difference
        if let Some(res) = rlp_decodeUint(bytestream_new(ba)) {
            if (res.1 == ui) {
                asm(bytearray_marshalFull(ba),) { log };
            } else {
                asm(0,) { log };
            }
        } else {
            asm(1,) { log };
        }
    } elseif (kind == 1) {
        let mb = unsafecast<MarshalledBytes>(value);
        if let Some(in) = bytearray_unmarshalBytes(mb) {
            let encoded = rlp_encodeBytes(
                in,
                0,
                bytearray_size(in),
                bytearray_new(0),
                0
            ).0;

            // decode and verify no difference
            if let Some(res) = rlp_decodeBytes(bytestream_new(encoded)) {
                let marshDec = bytearray_marshalFull(res.1);
                if (marshDec == mb) {
                    asm(bytearray_marshalFull(encoded),) { log };
                } else {
                    asm( (20, bytearray_marshalFull(encoded)), ) { log };
                }
            } else {
                asm(3,) { log };
            }
        } else {
            error;
        }
    } elseif (kind == 2) {
        let vals = unsafecast<(uint, MarshalledBytes, uint)>(value);
        if let Some(data) = bytearray_unmarshalBytes(vals.1) {
            let encodedPieces = unsafecast<[]ByteArray>(newarray<any>(3));  // workaround issue #120
            encodedPieces = encodedPieces with {
                [0] = rlp_encodeUint(vals.0, bytearray_new(0), 0).0
            } with {
                [1] = rlp_encodeBytes(data, 0, bytearray_size(data), bytearray_new(0), 0).0
            } with {
                [2] = rlp_encodeUint(vals.2, bytearray_new(0), 0).0
            };
            if let Some(res) = rlp_encodeList(encodedPieces, 0, 3, bytearray_new(0), 0) {
                asm(bytearray_marshalFull(res.0),) { log };
            } else {
                asm(4,) { log };
            }
        } else {
            error;
        }
    }

    testRlpHasher();
}

write view func testRlpIssue() {
    rlp_init();
    let seqNum = 0;
    let gasPrice = uint(10);
    let gasLimit = uint(10);
    let to = address(100000000000000); // address(34253944624943037145398863266787883273185918976);
    let value = uint(0);
    let (length, buf) = h"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806339f484b71461003b578063813c13b114610045575b600080fd5b61004361004d565b005b6100436100e8565b600060646001600160a01b03166308bd624c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561008957600080fd5b505afa15801561009d573d6000803e3d6000fd5b505050506040513d60208110156100b357600080fd5b5051604051909150811515907f9cd8e0cef591b8295292293a053ccf65910a134f855c5fdb104fe56fa1d0722d90600090a250565b306001600160a01b03166339f484b76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561012357600080fd5b505af1158015610137573d6000803e3d6000fd5b5050505056fea2646970667358221220451e18e5c6fb7a8f3facbd6fbecfbb9134c3b40eb7fcc8904b58b0ed97b375f364736f6c634300060c0033";
    let data = struct { 
        size: 0,
        sliceOffset: 10,
        contents: buf
    };
    // bytearray_fromSizeAndBuffer(length, buf);
    // let v = 3153124704039036735094424456269739530502908347665605141184664410173466839143;
    let v = 0; // 3153124704039036735094424456269739530502908347665605141184664410173466839143;
    let r = 0; // 28954904340381089822902041954277469361696650116314885413476360682139646428099;
    let s = 0; // 52693876841252334201538340284447954025639184787012953020233583555886101072957;

    let oldBuf = rlp_encodeMessageInfo(
        seqNum,
        gasPrice,
        gasLimit,
        to,
        value,
        data,
        v,
        r,
        s
    );

    // oldBuf = struct { size: oldBuf.size, sliceOffset: 0, contents: setbuffer8(oldBuf.contents, 515, 0) };
    // bytearray_setByte(oldBuf, 495, 0);

    let oldBuf2 = rlp_encodeMessageInfo_old(
        seqNum,
        gasPrice,
        gasLimit,
        to,
        value,
        data,
        v,
        r,
        s
    );

    debug(oldBuf);
    debug(oldBuf2);
    debug(hash(oldBuf));
    debug(hash(oldBuf2));
}


view func testRlpHasher() {
    let seqNum = 0;
    let gasPrice = 31;
    let gasLimit = uint(hash(0));
    let to = address(3919850193);
    let value = uint(hash(gasLimit));
    let data = randomByteArray();
    let v = uint(hash(value));
    let r = 0;
    let s = 0;
    debug(value);
    debug(v);
    debug(gasLimit);

    debug(data);

    let oldBuf = rlp_encodeMessageInfo(
        seqNum,
        gasPrice,
        gasLimit,
        to,
        value,
        data,
        v,
        r,
        s
    );

    let oldBuf2 = rlp_encodeMessageInfo_old(
        seqNum,
        gasPrice,
        gasLimit,
        to,
        value,
        data,
        v,
        r,
        s
    );

    debug(oldBuf);
    debug(oldBuf2);

    if let Some(res) = rlp_decodeMessageInfo(bytestream_new(oldBuf2)) {
        let (_, tx) = res;
        debug(tx);
    }

    if let Some(res) = rlp_decodeMessageInfo(bytestream_new(oldBuf2)) {
        let (_, tx) = res;
        debug(tx);
        if (keccak256(oldBuf2, 0, bytearray_size(oldBuf2)) != rlp_encodeAndHashMessageInfoForSignature(tx, Some(tx.v))) {
            asm(12,) { debugprint };
            error;
        }
    } else {
        asm(13,) { debugprint };
        error;
    }

    let newWay = rlp_encodeAndHashMessageInfoForSignature(
        struct {
            seqNum: seqNum,
            gasPrice: gasPrice,
            gasLimit: gasLimit,
            to: to,
            value: value,
            data: data,
            v: v,
            r: r,
            s: s
        },
        Some(v)
    );

    if (keccak256(oldBuf, 0, bytearray_size(oldBuf)) != newWay) {
        asm(14,) { debugprint };
        error;
    }
}

func randomByteArray() -> ByteArray {
    let ret = bytearray_new(0);
    let i = 0;
    while (i < 5) {
        ret = bytearray_set256(ret, 32*i, uint(hash(i+1017)));
        i = i+1;
    }
    return ret;
}
