//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;

import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, offset: uint) -> option<uint>;
import func bytearray_get64(ba: ByteArray, offset: uint) -> option<uint>;
import func bytearray_get256(ba: ByteArray, offset: uint) -> option<uint>;
import func bytearray_extract(ba: ByteArray, offset: uint, nbytes: uint) -> option<ByteArray>;

type ByteStream = struct {
    contents: ByteArray,
    capacity: uint,
    currentOffset: uint,
}

public func bytestream_new(contents: ByteArray) -> ByteStream {
    return struct {
        contents: contents,
        capacity: bytearray_size(contents),
        currentOffset: 0,
    };
}

public func bytestream_atEof(bs: ByteStream) -> bool {
    return bs.currentOffset >= bs.capacity;
}

public func bytestream_bytesReadSoFar(bs: ByteStream) -> uint {
    return bs.currentOffset;
}

public func bytestream_bytesRemaining(bs: ByteStream) -> uint {
    return bs.capacity - bs.currentOffset;
}

public func bytestream_skipBytes(bs: ByteStream, nbytes: uint) -> option<ByteStream> {
    let newOffset = bs.currentOffset + nbytes;
    if (newOffset <= bs.capacity) {
        return Some(bs with { currentOffset: newOffset });
    } else {
        return None;
    }
}

public func bytestream_truncate(bs: ByteStream, size: uint) -> ByteStream {
    if (size < bs.capacity) {
        if (size < bs.currentOffset) {
            return bs with { capacity: bs.currentOffset };
        } else {
            return bs with { capacity: size };
        }
    } else {
        return bs;
    }
}

public func bytestream_getByte(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset >= bs.capacity) {
        return None;
    } else {
        return Some((
            bs with { currentOffset: bs.currentOffset+1 },
            bytearray_getByte(bs.contents, bs.currentOffset)?
        ));
    }
}

public func bytestream_get64(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset+8 > bs.capacity) {
        return None;
    } else {
        return Some((
            bs with { currentOffset: bs.currentOffset+8 },
            bytearray_get64(bs.contents, bs.currentOffset)?
        ));
    }
}

public func bytestream_getUint(bs: ByteStream) -> option<(ByteStream, uint)> {
    if (bs.currentOffset+32 > bs.capacity) {
        return None;
    } else {
        return Some((
            bs with { currentOffset: bs.currentOffset+32 },
            bytearray_get256(bs.contents, bs.currentOffset)?
        ));
    }
}

public func bytestream_getRemainingBytes(bs: ByteStream) -> ByteArray {
    if let Some(ba) = bytearray_extract(
        bs.contents,
        bs.currentOffset,
        bs.capacity - bs.currentOffset
    ) {
        return ba;
    } else {
        panic;  // should never happen, because we called bytearray_extract with valid args
    }
}
