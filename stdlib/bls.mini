//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
// 
// ported from https://github.com/thehubbleproject/RedditHubble/blob/master/contracts/libs/BLS.sol

use std::bytearray::ByteArray;
use std::random::RandomGenerator;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;

use std::keccak::keccak256;

use std::random::random_new;
use std::random::random_next;
use std::random::random_nextMod;

use std::keccak::keccak256;
use std::sha256::sha256_byteArray;


// Field order
const N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

// Negated genarator of G2
const nG2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
const nG2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
const nG2y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;
const nG2y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;

// sqrt(-3)
const z0 = 0x0000000000000000b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd;

// (sqrt(-3) - 1)  / 2
const z1 = 0x000000000000000059e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe;

const T24 = 0x1000000000000000000000000000000000000000000000000;
const MASK24 = 0xffffffffffffffffffffffffffffffffffffffffffffffff;

const n_modexp_3064_fd54 = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
const n_modexp_c191_3f52 = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;

type BLSHashedMessage = struct {
    x: uint,
    y: uint,
}

type BLSSignature = struct {
    x: uint,
    y: uint,
}

type BLSKey = struct {
    ax: uint,
    ay: uint,
    bx: uint,
    by: uint,
}

// ==================================================================
// BLS top level functions with built-in hashing
// ==================================================================

public func bls_hashAndVerifySingleSig(
    domain: ByteArray,
    message: ByteArray,
    key: BLSKey,
    signature: BLSSignature
) -> option<()> {
    let hashedMessage = bls_hashToPoint(domain, message)?;
    return bls_verifySingleSig(hashedMessage, key, signature);
}

public func bls_hashAndVerifySignature(
    numMsgs: uint,
    domain: ByteArray,
    messages: []ByteArray,
    keys: []BLSKey,
    signature: BLSSignature
) -> option<()> {
    let hashedMessages = newarray <BLSHashedMessage> (numMsgs);

    let i = 0;
    while (i < numMsgs) {
        let hashedMessage) = bls_hashToPoint(domain, messages[i])?;
        hashedMessages = hashedMessages with { [i] = hashedMessage };
    }

    return bls_verifySignature(numMsgs, hashedMessages, keys, signature);
}

// ==================================================================
// BLS top level functions which assume a pre-hashed input
// ==================================================================

public func bls_verifySingleSig(
    message:  BLSHashedMessage,
    key:      BLSKey,
    signature: BLSSignature
) -> option<()> {
	let messages = newarray <BLSHashedMessage> (1);
	messages = messages with { [0] = message };
	let keys = newarray <BLSKey> (1);
    keys = keys with { [0] = key };
    return bls_verifySignature(1,
    messages,
    keys,
    signature);
}

public func bls_makeKey(x0: uint, x1: uint, y0: uint, y1: uint) -> option<BLSKey> {
    return Some(struct { x0: x0, x1: x1, y0: y0, y1: y1 });
}

public func bls_marshalPublicKey(key: BLSKey, ba: ByteArray, offset: uint) -> ByteArray {
    return bytearray_set256(
        bytearray_set256(
            bytearray_set256(
                bytearray_set256(
                    ba,
                    offset,
                    key.ax
                ),
                offset+32,
                key.ay
            ),
            offset+2*32,
            key.bx
        ),
        offset+3*32,
        key.by
    );
}

public func bls_verifySignature(
    numMsgs:   uint,
    messages:  []BLSHashedMessage,
    keys:      []BLSKey,
    signature: BLSSignature
) -> option<()> {
	let size = len(keys);
	if (numMsgs == 0 || numMsgs > 30 || numMsgs != len(messages) || numMsgs != len(keys)) {
        asm(56,) { debugprint };
		return None;
	}

	let acc = unsafecast<any>(());
	acc = (
        acc,
        (
          signature.x,
          signature.y,
          const::nG2x0,
          const::nG2x1,
          const::nG2y0,
          const::nG2y1

        ),
    );

	let i = 0;
    while (i < numMsgs) {
        acc = (
            acc,
            (
                messages[i].x,
                messages[i].y,
                keys[i].ax,
                keys[i].ay,
                keys[i].bx,
                keys[i].by
            ),
        );
        i = i + 1;
    }

    let result = asm(acc,) bool { ecpairing };
    asm(result,) { debugprint };
    if (result) {
        asm(99,) { debugprint };
        return Some(());
    } else {
        asm(100,) { debugprint };
        return None;
    }
}

// ==================================================================
// BLS Hash to Point in G1
// ==================================================================

public func bls_hashToPoint(
  	domain: 	ByteArray,
  	message:	ByteArray
) -> option<BLSHashedMessage> {
    let (u0, u1) = hashToField(domain, message);
    let p0 = mapToPoint(u0)?;
    let p1 = mapToPoint(u1)?;

    let x = asm(p0.0, p0.1, p1.0, p1.1) uint { ecadd }; // check order
    let y = asm() uint { };

    asm(x,) { debugprint };
    asm(y,) { debugprint };

    // AVM error checking

    return Some(struct { x: x, y: y });
}

func mapToPoint(_x:	uint) -> option<(uint, uint)> {
    if(_x >= const::N) {
    	return None;
    }
     
    let x = _x;

    let sqrtX = sqrt(x);

    let found = false;

    if let Some(squx) = sqrtX {
    	found = true;
    }

    let a0 = asm(x, x, const::N) uint { mulmod };

    a0 = asm(a0, 4, const::N) uint { addmod };

    let a1 = asm(x, const::z0, const::N) uint { mulmod };
    let a2 = asm(a1, a0, const::N) uint { mulmod };
	a2 = inverse(a2);

    a1 = asm(a1, a1, const::N) uint { mulmod };
    a1 = asm(a1, a2, const::N) uint { mulmod };

     // x1

    a1 = asm(x, a1, const::N) uint { mulmod };

    x = asm(const::z1, const::N - a1, const::N) uint { addmod };

    // check curve

    a1 = asm(x, x, const::N) uint { mulmod };
    a1 = asm(a1, x, const::N) uint { mulmod };
    a1 = asm(a1, 3, const::N) uint { addmod };

    let sqrtA1 = sqrt(a1);

    if let Some(sqa1) = sqrtA1 {
    	if (found) {
            a1 = sqa1;
    	} else {
    		a1 = const::N - sqa1;
    	}
        return Some((x,a1));
    }

    // x2
    x = asm(x, 1, const::N) uint { addmod };
    x = const::N - x;

    // check curve
    a1 = asm(x, x, const::N) uint { mulmod };
    a1 = asm(a1, x, const::N) uint { mulmod };
    a1 = asm(a1, 3, const::N) uint { addmod };

    sqrtA1 = sqrt(a1);
    if let Some(sqa1) = sqrtA1 {
    	if (found) {
            a1 = sqa1;
    	} else {
    		a1 = const::N - sqa1;
    	}
    	return Some((x,a1));
    }

    // x3
    x = asm(a0, a0, const::N) uint { mulmod };
    x = asm(x, x, const::N) uint { mulmod };
    x = asm(x, a2, const::N) uint { mulmod };
    x = asm(x, a2, const::N) uint { mulmod };
    x = asm(x, 1, const::N) uint { addmod };

    // must be on curve
    a1 = asm(x, x, const::N) uint { mulmod };
    a1 = asm(a1, x, const::N) uint { mulmod };
    a1 = asm(a1, 3, const::N) uint { addmod };

    sqrtA1 = sqrt(a1);

    if let Some(squa1) = sqrtA1 {
    	if (!found) {
            a1 = const::N - squa1;
        } else {
            a1 = squa1;
        }
    } else {
    	return None; // BLS: bad ft mapping implementation
    }

    return Some((x,a1));
}

func sqrt(xx: uint) ->option<uint> {
    let x = modexp_c191_3f52(xx);

    let square = asm(x, x, const::N) uint { mulmod };
    if(square == xx) {
        return Some(x);
    } else {
        return None;
    }
}

func inverse(a:	uint) -> uint {
    return modexp_3064_fd54(a);
}

func hashToField(
    domain:		ByteArray,
    messages:	ByteArray
) -> (uint, uint) {
    let _msg = expandMsgTo96(domain, messages);
    let temp1 = bytearray_get256(_msg,0);
    let u1 = asm(64, temp1) uint { shr };

    temp1 = bytearray_get256(_msg,16);
    let u0 = asm(temp1, const::MASK24) uint { bitwiseand };
    temp1 =  asm(u1, const::T24, const::N) uint { mulmod };
    let a0 = asm(temp1, u0, const::N) uint { addmod };
    temp1 = bytearray_get256(_msg,40);
    let u1 = asm(temp1, const::MASK24) uint { bitwiseand };
    temp1 = bytearray_get256(_msg,64);
    u0 = asm(temp1, const::MASK24) uint { bitwiseand };
    temp1 =  asm(u1, const::T24, const::N) uint { mulmod };
    let a1 = asm(temp1, u0, const::N) uint { addmod };

    return (a0, a1);
}

func expandMsgTo96(
	domain:		ByteArray,
	message:	ByteArray
) -> ByteArray {
    let out = bytearray_new(96);

    let t0 = bytearray_size(message);
    let t1 = bytearray_size(domain);

    let msg0 = bytearray_new(64 + t0 + t1 + 4);

    let off = 64;
    let z = 0;

    while(z < t0) {
        msg0 = bytearray_setByte(msg0,z+off,bytearray_getByte(message,z));
        z = z + 1;
    }

    off = off + t0;

    msg0 = bytearray_setByte(msg0,off,0);
    off = off + 1;
    msg0 = bytearray_setByte(msg0,off,96);
    off = off + 1;
    msg0 = bytearray_setByte(msg0,off,0);
    off = off + 1;

    z = 0;

    while(z < t1) {
        msg0 = bytearray_setByte(msg0,z+off,bytearray_getByte(domain,z));
        z = z + 1;
    }
     off = off + t1;
     msg0 = bytearray_setByte(msg0,off,t1);

    let b0 = sha256_byteArray(msg0);

    msg0 = bytearray_new(32 + 1 + 32 + 1);
    off = 0;
    msg0 = bytearray_set256(msg0,off,uint(b0));
    off = off + 32;
    msg0 = bytearray_setByte(msg0,off,1);
    off = off + 1;

    z = 0;

    while(z < t1) {
        msg0 = bytearray_setByte(msg0,z+off,bytearray_getByte(domain,z));
        z = z + 1;
    }
    off = off + t1;
    msg0 = bytearray_setByte(msg0,off,t1);

    let bi = sha256_byteArray(msg0);

    out = bytearray_set256(out,0,uint(bi));

    let t = b0 ^ bi;

    off = 0;
    msg0 = bytearray_set256(msg0,off,uint(t));
    off = off + 32;
    msg0 = bytearray_setByte(msg0,off,2);
    off = off + 1;

    z = 0;
    while(z < t1) {
        msg0 = bytearray_setByte(msg0,z+off,bytearray_getByte(domain,z));
        z = z + 1;
    }
    off = off + t1;
    msg0 = bytearray_setByte(msg0,off,t1);

    bi = sha256_byteArray(msg0);

    out = bytearray_set256(out,32,uint(bi));

    let t = b0 ^ bi;

    off = 0;
    msg0 = bytearray_set256(msg0,off,uint(t));
    off = off + 32;
    msg0 = bytearray_setByte(msg0,off,3);
    off = off + 1;

    z = 0;

    while(z < t1) {
        msg0 = bytearray_setByte(msg0,z+off,bytearray_getByte(domain,z));
        z = z + 1;
    }
    off = off + t1;
    msg0 = bytearray_setByte(msg0,off,t1);

    bi = sha256_byteArray(msg0);

    out = bytearray_set256(out,64,uint(bi));

    return out;
}


func modexp_3064_fd54(t2: uint) -> uint {
     let t0 = asm(t2, t2, const::n_modexp_3064_fd54) uint { mulmod };
     let t5 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     let t1 = asm(t5, t0, const::n_modexp_3064_fd54) uint { mulmod };
     let t3 = asm(t5, t5, const::n_modexp_3064_fd54) uint { mulmod };
     let t8 = asm(t1, t0, const::n_modexp_3064_fd54) uint { mulmod };
     let t4 = asm(t3, t5, const::n_modexp_3064_fd54) uint { mulmod };
     let t6 = asm(t3, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t3, t3, const::n_modexp_3064_fd54) uint { mulmod };
     let t7 = asm(t8, t3, const::n_modexp_3064_fd54) uint { mulmod };
     t3 = asm(t4, t3, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_3064_fd54) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_3064_fd54) uint { mulmod };
      
     return t0;
}

func modexp_c191_3f52(t6: uint) -> uint {
    let t0 = asm(t6, t6, const::n_modexp_c191_3f52) uint { mulmod };
    let t4 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
    let t2 = asm(t4, t0, const::n_modexp_c191_3f52) uint { mulmod };
    let t3 = asm(t4, t4, const::n_modexp_c191_3f52) uint { mulmod };
    let t8 = asm(t2, t0, const::n_modexp_c191_3f52) uint { mulmod };
    let t1 = asm(t3, t4, const::n_modexp_c191_3f52) uint { mulmod };
    let t5 = asm(t3, t2, const::n_modexp_c191_3f52) uint { mulmod };
    t0 = asm(t3, t3, const::n_modexp_c191_3f52) uint { mulmod };
    let t7 = asm(t8, t3, const::n_modexp_c191_3f52) uint { mulmod };
     t3 = asm(t1, t3, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t8, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t7, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t6, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t5, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t4, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t3, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t2, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t1, const::n_modexp_c191_3f52) uint { mulmod };
     t0 = asm(t0, t0, const::n_modexp_c191_3f52) uint { mulmod };

     return t0;
}
