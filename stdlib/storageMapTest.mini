//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::storageMap::storageMap_new;
use std::storageMap::storageMap_size;
use std::storageMap::storageMap_get;
use std::storageMap::storageMap_set;
use std::storageMap::storageMap_delete;
use std::storageMap::storageMap_forall;
use std::storageMap::storageMap_diff;

use std::stack::stack_size;
use std::stack::stack_pop;


impure func main() {
	asm(tests().1) { log };
}

func tests() -> (uint, buffer) {
	let s = storageMap_new();
	if (storageMap_get(s, 17) != 0) {
		return "error 1";
	}
	if (storageMap_size(s) != 0) {
	    return "error 101";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 42);
	if (storageMap_get(s, 42) != 42) {
		return "error 2";
	}
	if (storageMap_size(s) != 1) {
	    return "error 102";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 43);
	s = storageMap_set(s, 55, 56);
	s = storageMap_set(s, 42, 99);
	if (storageMap_get(s, 42) != 99) {
		return "error 3";
	}
	if (storageMap_size(s) != 2) {
	    return "error 103";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 43);
	s = storageMap_set(s, 55, 56);
	s = storageMap_set(s, 42, 99);
	if (storageMap_get(s, 55) != 56) {
		return "error 4";
	}
	if (storageMap_size(s) != 2) {
	    return "error 104";
	}

	s = storageMap_new();
	let i = 0;
	while (i < 41) {
		s = storageMap_set(s, i, 1000+i);
		i = i+1;
	}
	if (storageMap_get(s, 17) != 1017) {
		return "error 5";
	}
	if (storageMap_size(s) != 41) {
	    return "error 105";
	}

	s = storageMap_new();
	let i = 0;
	while (i < 27) {
		s = storageMap_set(s, i, 1000+i);
		i = i+1;
	}
	s = storageMap_delete(s, 17);
	if (storageMap_get(s, 17) != 0) {
		return "error 6";
	}
	if (storageMap_size(s) != 26) {
	    return "error 106";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 43);
	s = storageMap_set(s, 55, 56);
	s = storageMap_set(s, 42, 99);
	if (storageMap_get(s, 42) != 99) {
		return "error 7";
	}
	if (storageMap_size(s) != 2) {
	    return "error 107";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 43);
	s = storageMap_set(s, 55, 56);
	s = storageMap_set(s, 42, 99);
	if (storageMap_get(s, 3) != 0) {
		return "error 8";
	}
	if (storageMap_size(s) != 2) {
	    return "error 108";
	}

	s = storageMap_new();
	s = storageMap_set(s, 42, 43);
	s = storageMap_set(s, 55, 56);
	s = storageMap_set(s, 42, 99);
	let rawResult = storageMap_forall(s, sumForKvsIterator, 0);
	if (unsafecast<uint>(rawResult) != 155) {
		return "error 9";
	}
	if (storageMap_size(s) != 2) {
	    return "error 109";
	}

    // regression test for bug #73
    s = storageMap_new();
    s = storageMap_set(s, 42, 43);
    s = storageMap_set(s, 55, 56);
    s = storageMap_delete(s, 42);
    s = storageMap_set(s, 55, 100);
    s = storageMap_delete(s, 55);
    if (storageMap_get(s, 55) != 0) {
        return "error 10";
    }
	if (storageMap_size(s) != 0) {
	    return "error 110";
	}

    // test size counting, including reductions for zero
    s = storageMap_new();
    let i = 0;
    while (i < 1007) {
        s = storageMap_set(s, i, 2000+i);
        i = i+1;
    }
    if (storageMap_size(s) != 1007) {
        return "error 11";
    }
    s = storageMap_set(s, 55, 0);
    if (storageMap_size(s) != 1006) {
        return "error 111";
    }
    s = storageMap_set(s, 3000, 0);
    if (storageMap_size(s) != 1006) {
        return "error 211";
    }
    s = storageMap_delete(s, 55);
    if (storageMap_size(s) != 1006) {
        return "error 311";
    }
    s = storageMap_delete(s, 77);
    if (storageMap_size(s) != 1005) {
        return "error 411";
    }

	return storageMapDiffTest();
}

func isSome(x: option<any>) -> bool {
	return xif let Some(_) = x {
		true
	} else {
		false
	};
}

func getSomeOr(x: option<any>, backupVal: any) -> any {
	return xif let Some(val) = x {
		val
	} else {
		backupVal
	};
}

func sumForKvsIterator(_key: uint, value: uint, state: any) -> any {
	return value + unsafecast<uint>(state);
}

func storageMapDiffTest() -> (uint, buffer) {
    let m0 = storageMap_new();
    m0 = storageMap_set(m0, 13, 5);
    m0 = storageMap_set(m0, 14, 6);

    let m1 = storageMap_new();
    m1 = storageMap_set(m1, 13, 6);

    if (stack_size(storageMap_diff(m0, m1)) != 2) {
        return "error 50";
    }

    m1 = storageMap_set(m1, 14, 6);
    let diff = storageMap_diff(m0, m1);
    if (stack_size(diff) != 1) {
        return "error 60";
    }
    if let Some(res) = stack_pop(diff) {
        if (res.1 != (13, 5, 6)) {
            return "error 61";
        }
    } else {
        return "error 62";
    }

    m1 = storageMap_set(m1, 99, 99);
    diff = storageMap_diff(m0, m1);
    if (stack_size(diff) != 2) {
        return "error 70";
    }

    return "";
}
