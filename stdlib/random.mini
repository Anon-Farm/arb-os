//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

type RandomGenerator = bytes32

public func random_new(seed: bytes32) -> RandomGenerator {
    return seed;
}

public func random_refresh_seed(rand: RandomGenerator, refresh: bytes32) -> RandomGenerator {
    return hash(rand, refresh);
}

public func random_next(rand: RandomGenerator) -> (bytes32, RandomGenerator) {
    return (
        hash(bytes32(0), rand), 
        hash(bytes32(1), rand),
    );
}

public func randomly_permute_array(
    rand: RandomGenerator,
    arr: []any,
    offset: uint,
    num: uint
) -> ([]any, RandomGenerator) {
    while (num > 1) {
        let (rb, gen) = random_next(rand);
        rand = gen;
        let i = uint(rb) % num;   // This isn't perfectly uniform, but difference is negligible for this use.
        arr = arr with { [offset+i] = arr[offset+num-1] }
                  with { [offset+num-1] = arr[offset+i] };
        num = num-1;
    }
    return (arr, rand);
}