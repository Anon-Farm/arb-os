//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;
import type MarshalledBytes;

import func bytearray_new(size: uint, autoExpand: bool) -> ByteArray;
import func bytearray_unmarshalBytes(mbytes: MarshalledBytes) -> ByteArray;
import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, idx: uint) -> option<uint>;
import func bytearray_setByte(ba: ByteArray, idx: uint, val: uint) -> option<ByteArray>;
import func bytearray_get64(ba: ByteArray, idx: uint) -> option<uint>;
import func bytearray_set64(ba: ByteArray, idx: uint, val: uint) -> option<ByteArray>;
import func bytearray_get256(ba: ByteArray, offset: uint) -> option<uint>;
import func bytearray_set256(ba: ByteArray, offset: uint, value: uint) -> option<ByteArray>;

import func keccak256(ba: ByteArray, offset: uint, nbytes: uint) -> bytes32;
import impure func keccak_permutation(state: [25]uint) -> [25]uint;


func main() {
    if let Some(x) = tests() {
	    asm(x,) { log };
	} else {
	    asm(666,) { log };
	}
}

func tests() -> option<uint> {
    let acc = newfixedarray(25, 0)
        with { [0] = 1 }
        with { [16] = 0x8000000000000000 };
    let accOut = keccak_permutation(acc);
    return Some(accOut[0]);

	let ba = bytearray_new(0, true);
	//ba = bytearray_setByte(ba, 0, 0xcc)?;
	return Some(uint(keccak256(ba, 0, 1)));
    //if (uint(keccak256(ba, 0, 1)) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) {
	//	return 1;
	//}

	return Some(0);
	
	//^ for the one character: 0x044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d;
	// for empty string: c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470
}

func setupFromUnmarshal() -> ByteArray {
	let marshalledStruct = unsafecast<MarshalledBytes>((
		67,
		(
			(
				(
					null,
					0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,
				),
				0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f,
			),
			0x4041420000000000000000000000000000000000000000000000000000000000,
		),
	));
	return bytearray_unmarshalBytes(marshalledStruct);
}