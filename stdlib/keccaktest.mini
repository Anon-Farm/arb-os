//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type ByteArray;
import type MarshalledBytes;

import func bytearray_new(size: uint, autoExpand: bool) -> ByteArray;
import func bytearray_unmarshalBytes(mbytes: MarshalledBytes, dest: ByteArray, offset: uint) -> ByteArray;
import func bytearray_size(ba: ByteArray) -> uint;
import func bytearray_getByte(ba: ByteArray, idx: uint) -> uint;
import func bytearray_setByte(ba: ByteArray, idx: uint, val: uint) -> ByteArray;
import func bytearray_get64(ba: ByteArray, idx: uint) -> uint;
import func bytearray_set64(ba: ByteArray, idx: uint, val: uint) -> ByteArray;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;
import func bytearray_set256(ba: ByteArray, offset: uint, value: uint) -> ByteArray;

import func keccak256(ba: ByteArray, offset: uint, nbytes: uint) -> bytes32;


func tests(which: uint) -> any {
	if (which == 0) {
		let ba = bytearray_new(1, false);
		ba = bytearray_setByte(ba, 0, 48);
		return uint(keccak256(ba, 0, 0)); //^ for the one character: 0x044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d;
		                                  // for empty string: c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470
	} else {
		return null;
	}
}

func setupFromUnmarshal() -> ByteArray {
	let marshalledStruct = unsafecast<MarshalledBytes>((
		67,
		(
			(
				(
					null,
					0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100,
				),
				0x3f3e3d3c3b3a393837363534333231302f2e2d2c2b2a29282726252423222120,
			),
			0x424140,
		),
	));
	let ba = bytearray_new(67, false);
	return bytearray_unmarshalBytes(marshalledStruct, ba, 0);
}
