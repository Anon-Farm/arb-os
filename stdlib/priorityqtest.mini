//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type PriorityQ;

import func priorityq_new() -> PriorityQ;
import func priorityq_isEmpty(pq: PriorityQ) -> bool;
import func priorityq_insert(pq: PriorityQ, item: any, priority: uint) -> PriorityQ;
import func priorityq_get(pq: PriorityQ) -> (bool, any, PriorityQ);
import func priorityq_printAsArray(pq: PriorityQ) -> uint;


func tests(which: uint) -> any {
	if (which == 0) {
		let q = priorityq_new();
		if (priorityq_isEmpty(q)) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 1) {
		let q = priorityq_new();
		q = priorityq_insert(q, 97, 3);
		if (priorityq_isEmpty(q)) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 2) {
		let q = priorityq_new();
		let pq = priorityq_insert(q, 97, 3);
		if (pq != q) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 3) {
		let q = priorityq_new();
		q = priorityq_insert(q, 97, 3);
		q = priorityq_insert(q, 98, 2);
		q = priorityq_insert(q, 96, 4);
		let (success, ret, pq,) = priorityq_get(q);
		if (!success) {
			return 3;
		}
		return ret;
	} elseif (which == 4) {
		let q = priorityq_new();
		let i = 0;
		while (i < 58) {
			q = priorityq_insert(q, i+30, i+100);
			i = i+1;
		}
		q = priorityq_insert(q, 97, 293);
		q = priorityq_insert(q, 98, 292);
		q = priorityq_insert(q, 96, 294);
		let (success, ret, pq,) = priorityq_get(q);
		if (!success) {
			return 28;
		}
		return ret;
	} else {
		return null;
	}
}

// stuff below here is for testing the compiler
func nullFunc() {
	return;
}

func callNullFunc() {
	callNullFunc();
}