// This is machine-generated code. Don't modify it unless you know what you're doing.

use evmOp::evmOp_return;
use evmOp::evmOp_revert_knownPc;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setTopFrameMemory;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_copy;

use ArbInfoImpl::ArbInfo_getCode;
use ArbInfoImpl::ArbInfo_getBalance;

public impure func ArbInfo__dispatch() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let funcCode = asm(224, bytearray_get256(calldata, 0)) uint { shr };
        if (funcCode == 0x7e105ce2) {
            ArbInfo_getCode_wrapper(topFrame, calldata);
        } elseif  (funcCode == 0xf8b2cb4f) {
            ArbInfo_getBalance_wrapper(topFrame, calldata);
        } else {
            evmOp_revert_knownPc(1, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(2, 0, 0);
    }
}

impure func ArbInfo_getCode_wrapper(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownPc(3, 0, 0);
    }
    let account = address(bytearray_get256(calldata, 4));
    let ret = ArbInfo_getCode(account);
    let mem = bytearray_new(0);
    let __offset = 0;
    let __offset_ret_0 = __offset;
    __offset = 32 + __offset;
    let ret_0_size = bytearray_size(ret.0);
    let ret_0_size_rounded = 32 * ((ret_0_size + 31)/32);
    mem = bytearray_set256(mem, __offset_ret_0, __offset);
    mem = bytearray_set256(mem, __offset, ret.0_size);
    mem = bytearray_copy(ret.0, 0, mem, 32+__offset, ret_0_size_rounded);
    __offset = __offset + 32 + ret.0_size_rounded;
    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, __offset);
    } else {
        evmOp_revert(5, 0, 0);
    }
}

impure func ArbInfo_getBalance_wrapper(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownPc(3, 0, 0);
    }
    let account = address(bytearray_get256(calldata, 4));
    let ret = ArbInfo_getBalance(account);
    let mem = bytearray_new(0);
    let __offset = 0;
    mem = bytearray_set256(mem, __offset, ret.0);
    __offset = __offset + 32;
    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, __offset);
    } else {
        evmOp_revert(5, 0, 0);
    }
}

