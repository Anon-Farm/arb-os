
import type KeyValueStore;

import func kvs_new() KeyValueStore;
import func kvs_get(kvs: KeyValueStore, key: anytype) anytype;
import func kvs_set(kvs: KeyValueStore, key: anytype, value:anytype) KeyValueStore;
import func kvs_delete(kvs: KeyValueStore, key: anytype) KeyValueStore;


func tests(which: uint) anytype {
	if (which == 0) {
		let s = kvs_new();
		return kvs_get(s, 17);
	} elseif (which == 1) {
		let s = kvs_new();
		s = kvs_set(s, 42, 42);
		return kvs_get(s, 42);
	} elseif (which == 2) {
		let s = kvs_new();
		s = kvs_set(s, 42, 43);
		s = kvs_set(s, 55, 56);
		s = kvs_set(s, 42, 99);
		return kvs_get(s, 42);
	} elseif (which == 3) {
		let s = kvs_new();
		s = kvs_set(s, 42, 43);
		s = kvs_set(s, 55, 56);
		s = kvs_set(s, 42, 99);
		return kvs_get(s, 55);
	} elseif (which == 4) {
		let s = kvs_new();
		let i = 0;
		while (i < 150) {
			s = kvs_set(s, i, 1000+i);
			i = i+1;
		}
		return kvs_get(s, 17);
	} elseif (which == 5) {
		let s = kvs_new();
		let i = 0;
		while (i < 27) {
			s = kvs_set(s, i, 1000+i);
			i = i+1;
		}
		s = kvs_delete(s, 17);
		return kvs_get(s, 17);
	} else {
		return null;
	}
}
