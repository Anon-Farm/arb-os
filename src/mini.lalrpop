//
// Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
//


use crate::compile::ast::{TopLevelDecl, TypeDecl, Func, GlobalVarDecl, Type, CodeBlock, StructField, FuncArg, FuncProperties, Statement, StatementKind, DebugInfo, Attributes, MatchPattern, SubData, Expr, ExprKind, TrinaryOp, BinaryOp, UnaryOp, Constant, OptionConst, FieldInitializer, new_func_arg, new_type_decl};
use crate::compile::{InliningMode, ErrorSystem, CompileError};
use crate::stringtable::{StringTable, StringId};
use crate::compile::Lines;
use crate::link::Import;
use crate::pos::{BytePos, Location};
use crate::mavm::{Value, Instruction, Opcode};
use crate::uint256::Uint256;
use crate::console::Color;
use std::collections::{HashMap, HashSet, BTreeMap, BTreeSet};
use regex::Regex;

grammar(
    stringtable: &mut StringTable,                      // map of ids to strings
    lines: &Lines,                                      // the lines of source code
    file: u64,                                          // filename hash
    current_path: &[String],                            // path to what's being parsed
    constants: &mut HashMap<String, Uint256>,           // all constants (local *and* global)
    local_constants: &mut HashMap<String, Location>,    // constants created
    used_constants: &mut HashSet<String>,               // constants used
    closures: &mut BTreeMap<StringId, Func>,            // closures found
    error_system: &mut ErrorSystem,                     // mechanism for delaying errors
);

extern {
    type Error = CompileError;
}

match {
    r"\s*" => { },                                                                 // Skip whitespace
    r"/\*(([^*/]|\n)|(\*+([^*/]|\n)|/([^*/]|\n)*|/\*([^*/]|\n)*))*\**\*/" => { },  // Skip multi-line comments
    r"//[^\n\r]*[\n\r]*" => { },                                                   // Skip single-line comments
    _
}

pub Decls: Vec<TopLevelDecl> = {
	<a: ("#![" <Attributes> "]")?><mut i:HeadDecl*> <mut n:BodyDecl+> => {
        i.append(&mut n);
        for decl in &mut i {
            if let (TopLevelDecl::FuncDecl(func), Some(attr)) = (decl, a) {
                func.debug_info.attributes.inline = func.debug_info.attributes.inline.and(&attr.inline);
            }
        };
        i
        },
}

HeadDecl: TopLevelDecl = {
    "use" <p: PathDecl> ";" => {
        let (mut vec, name_lno) = p;
        let filename = vec.pop().expect("Internal error: Path vector was empty");
        let id = stringtable.get(filename.clone());
        TopLevelDecl::UseDecl(Import::new(
            vec, filename.clone(), Some(id), Some(lines.loc(name_lno, file)),
        ))
    },
    "const" <lno: @L> <n: IdentString> "=" <u: UnsignedInteger> ";" => { 
        
        if let Some(_) = constants.get(&n) {
            error_system.errors.push(
                CompileError::new(
                    String::from("Parser error"),
                    format!("Constant {} is declared twice", Color::red(&n)),
                    vec![lines.loc(lno, file)],
                )
            )
        }
        constants.insert(n.clone(), u);
        local_constants.insert(n, lines.loc(lno, file));
        TopLevelDecl::ConstDecl
    },
}

PathDecl: (Vec<String>, usize) = {
    <mut base: (<IdentString> "::")+> <lno: @L> <i: IdentString> => {
        base.push(i);
        (base, lno)    // we want the right-most string
    },
}

BodyDecl: TopLevelDecl = {
	TypeDecl => TopLevelDecl::TypeDecl(<>),
	FuncDecl => TopLevelDecl::FuncDecl(<>),
	GlobalVarDecl => TopLevelDecl::VarDecl(<>),
}

TypeDecl: TypeDecl = {
    "type" <Ident> "=" <Type> ";" => new_type_decl(<>),
}

FuncDecl: Func = {
    <attribs: ("#[" <Attributes> "]")?> <qualifiers: (<Qualifier>)*> "func" <lno: @L> <i:Ident> "(" <fa:FuncArgs> ")" <t: (Return)?> <cb:CodeBlock> => {
        let public = qualifiers.contains(&"public");
        let view = qualifiers.contains(&"view");
        let write = qualifiers.contains(&"write");
        let debug = DebugInfo::new(Some(lines.loc(lno, file)), attribs.unwrap_or_default());
        let name = stringtable.name_from_id(i).clone();
        
	Func::new(name, i, public, view, write, false, fa, t, cb, BTreeSet::new(), 0, debug)
    }
}

Return: Type = {
    "->" <Type> => <>,
    "noreturn" => Type::Every,
}

FuncArgs: Vec<FuncArg> = {
    <mut a: (<FuncArg> ",")*> <b: FuncArg?> => { if let Some(c) = b { a.push(c) }; a },
}

FuncArg: FuncArg = {
    <lno: @L> <i:Ident> ":" <t:Type> => new_func_arg(i, t, DebugInfo::here(lines, lno, file)),
}

GlobalVarDecl: GlobalVarDecl = {
    "var" <lno: @L> <i:Ident> ":" <t:Type> ";" => GlobalVarDecl::new(
        i, stringtable.name_from_id(i).clone(), t, lines.location(BytePos::from(lno), file)
    ),
}

CodeBlock: Vec<Statement> = {
    "{" <Statement*> "}" => <>
}

CodeBlockNew: CodeBlock = {
    "{" <stats: Statement*> <expr: Expr?> "}" => CodeBlock::new(stats, expr.map(Box::new)),
}

Statement: Statement = {
    <lno: @L> <attribs: ("#[" <Attributes> "]")?> <kind:StatementKind> => Statement {
        kind, debug_info: DebugInfo::new(Some(lines.loc(lno, file)), attribs.unwrap_or_default())
    },
}

Attributes: Attributes = {
    <lno: @L> <names: (<IdentString> ",")*> <last: IdentString?> => {
        let mut attribs = Attributes::default();
        for name in names.into_iter().chain(last.into_iter()) {
            match name.as_ref() {
                "breakpoint" => attribs.breakpoint = true,
                "inline" => attribs.inline = InliningMode::Always,
                "noinline" => attribs.inline = InliningMode::Never,
                "print" => attribs.codegen_print = true,
                unrecognized => error_system.errors.push(
                    CompileError::new(
                        String::from("Lexer error"),
                        format!("Unrecognized attribute {}", Color::red(&unrecognized)),
                        vec![lines.loc(lno, file)],
                    )
                ),
            }
        }; 
        attribs
    },
}

StatementKind: StatementKind = {
    "while" "(" <e: Expr> ")" <cb: CodeBlock> => StatementKind::While(e, cb),
    <lno: @L> "loop" <cb: CodeBlock> => StatementKind::Expression(Expr::lno(ExprKind::Loop(cb), lines, lno, file)),
    <lno: @L> "if" "let" "Some(" <l: Ident> ")" "=" <r:Expr> <t: CodeBlock> <e: ElseIf?> => StatementKind::Expression(
        Expr::lno(ExprKind::IfLet(l, Box::new(r), CodeBlock::new(t, None), e), lines, lno, file)
    ),
    <lno: @L> "if" "(" <c: Expr> ")" <t: CodeBlock> <r: ElseIf?> => StatementKind::Expression(
        Expr::lno(ExprKind::If(Box::new(c), CodeBlock::new(t, None), r), lines, lno, file)
    ),
    "let" <p: MatchPattern> "=" <e: Expr> ";" => StatementKind::Let(p, e),
    "let" <p: MatchPattern> ":" <lno: @L> <t: Type> "=" <e: Expr> ";" => {
        StatementKind::Let(p, Expr::lno(ExprKind::Check(Box::new(e), t), lines, lno, file))
    },
    <e: Expr> ";" => StatementKind::Expression(e),
    <i: Ident> "=" <e: Expr> ";" => StatementKind::Assign(i, e),
    "return" <e: Expr> ";" => StatementKind::Return(e),
    "return" ";" => StatementKind::ReturnVoid(),
    <lno: @L> "return" "None" ";" => StatementKind::Return(
        Expr::lno(ExprKind::Constant(Constant::Option(OptionConst::None(Type::Every))), lines, lno, file)
    ),
    "break" <e: Expr?> ";" => StatementKind::Break(e, None),
    "debug" "(" <e: Expr> ")" ";" => StatementKind::DebugPrint(e),
    "assert" "(" <e: Expr> ")" ";" => StatementKind::Assert(e),
    "asm" "(" <e: Expr> ")" "{" <body:AsmInsn*> "}" ";" => StatementKind::Asm(body, vec![e]),
    "asm" "(" <a:CommaedExprs?> ")" "{" <body:AsmInsn*> "}" ";" => StatementKind::Asm(body, a.unwrap_or(vec![])),
    <lno: @L> "set" <i:Ident> <s: SubData+> "=" <e: Expr> ";" => {

        // This routine manually derives a series of nested with-statements to build an interior assignment.
        
        let debug_info = DebugInfo::here(lines, lno, file);
        
        // the withs we assign at the end
        let mut withs = Expr::new(ExprKind::VariableRef(i), debug_info);
        
        // the intereior site we expand to right-derive the next step, taking the form
        //   a with { expr }
        //   a with { a.b with { expr } }
        //   a with { a.b with { a.b.c with { expr } }         and so on
        let mut build = &mut withs;
        
        // a nested set of sub-value identifier ops that lets us build up nodes for those like a.b.c by going through
        // each of those for a, a.b, a.b.c, etc
        let mut nest = Expr::new(ExprKind::VariableRef(i), debug_info);
        
        for inner in s {
            match inner {
                SubData::ArrayOrMap(index) => {
                    let inside = e.clone();
                    *build = Expr::new(
                        ExprKind::ArrayOrMapMod(Box::new(nest.clone()), Box::new(index.clone()), Box::new(inside)),
                        index.debug_info,
                    );
                    build = match &mut build.kind {
                        ExprKind::ArrayOrMapMod(_, _, ref mut build) => build,
                        _ => unreachable!(),
                    };
                    nest = Expr::new(
                        ExprKind::ArrayOrMapRef(Box::new(nest), Box::new(index.clone())),
                        index.debug_info,
                    );
                }
                SubData::Dot(id) => {
                    let inside = e.clone();
                    let name = stringtable.name_from_id(id).to_string();
                    *build = Expr::new(
                        ExprKind::StructMod(Box::new(nest.clone()), name.clone(), Box::new(inside)),
                        debug_info,
                    );
                    build = match &mut build.kind {
                        ExprKind::StructMod(_, _, ref mut build) => build,
                        _ => unreachable!(),
                    };
                    nest = Expr::new(ExprKind::DotRef(Box::new(nest), name), debug_info);
                }
            }
        }
        
        StatementKind::Assign(i, withs)
    }
}

SubData: SubData = {
    "." <i:Ident> => SubData::Dot(i),
    "[" <e: Expr> "]" => SubData::ArrayOrMap(e),
}

MatchPattern: MatchPattern = {
    <lno: @L> <i: Ident> => MatchPattern::new_bind(i, DebugInfo::here(lines, lno, file), ()),
    <lno: @L> "*"<i: Ident> => MatchPattern::new_assign(i, DebugInfo::here(lines, lno, file), ()),
    <lno: @L> "(" <c: CommaedMatchPatterns> ")" => MatchPattern::new_tuple(c, DebugInfo::here(lines, lno, file), ()),
}

CommaedMatchPatterns: Vec<MatchPattern> = {
    <mut a: ( <MatchPattern> "," )+> <b: MatchPattern?> => {if let Some(c) = b { a.push(c) } a },
}

StructFields: Vec<StructField> = {
    <mut a: (<StructField> ",")*> <b: StructField> ","? => { a.push(b); a },
}

StructField: StructField = {
	<i: Ident> ":" <t: Type> => StructField::new(stringtable.name_from_id(i).to_string(), t),
}

Type: Type = {
	"uint" => Type::Uint,
	"int" => Type::Int,
	"bool" => Type::Bool,
	"buffer" => Type::Buffer,
	"bytes32" => Type::Bytes32,
	"address" => Type::EthAddress,
	"struct" "{" <StructFields> "}" => Type::Struct(<>),
	<CommaedTypesInParens> => Type::Tuple(<>),
	"[" "]" <Type> => Type::Array(Box::new(<>)),
	"[" <s:UnsignedInteger> "]" <t:Type> => Type::FixedArray(
		Box::new(t),
		s.to_usize().unwrap(),
	),
	"map" "<" <t1:Type> "," <t2:Type> ","? ">" => Type::Map(Box::new(t1), Box::new(t2)),
	"any" => Type::Any,
	"option<" <t1:Type> ">" => Type::Option(Box::new(t1)),
	"every" => Type::Every,
	"union<" <t1:CommaedTypes> ">" => Type::Union(t1),
    <q: Qualifier*> "func" <a: CommaedTypesInParens> <r: ("->" <Type>)?> => {
        let view = q.contains(&"view");
        let write = q.contains(&"write");
        Type::Func(FuncProperties::new(view, write, false), a, Box::new(r.unwrap_or(Type::Void)))
    },
    <q: Qualifier*> "closure" <a: CommaedTypesInParens> <r: ("->" <Type>)?> => {
        let view = q.contains(&"view");
        let write = q.contains(&"write");
        Type::Func(FuncProperties::new(view, write, true), a, Box::new(r.unwrap_or(Type::Void)))
    },
    Ident => Type::Nominal(current_path.to_owned(), <>),
};

CommaedTypesInParens: Vec<Type> = {
	"(" ")" => vec![],
	"(" <CommaedTypes> ")" => <>,
}

CommaedTypes: Vec<Type> = {
	<mut t: (<Type> ",")*> <e: (Type)> ","? => {
        t.push(e);
        t
    },
};

Ident: StringId = {
	IdentString => stringtable.get(<>),
};

Expr: Expr = {
    <lno: @L> <t:Expr> "with" "{" "[" <i:Expr> "]" "=" <v:Expr> "}" => Expr::new(
        ExprKind::ArrayOrMapMod(Box::new(t), Box::new(i), Box::new(v)),
	    DebugInfo::here(lines, lno, file),
    ),
    <lno: @L> <t: Expr> "with" "{" <i:Ident> ":" <e: Expr> "}" => Expr::new(
        ExprKind::StructMod(Box::new(t), stringtable.name_from_id(i).to_string(), Box::new(e)),
        DebugInfo::here(lines, lno, file),
    ),
    Expr1,
}

Expr1: Expr = {
    <lno: @L> <l:Expr1> "||" <r:Expr2> => Expr::lno(ExprKind::ShortcutOr(Box::new(l), Box::new(r)), lines, lno, file),
    Expr2,
};

Expr2: Expr = {
    <lno: @L> <l:Expr2> "&&" <r:Expr3> => Expr::lno(ExprKind::ShortcutAnd(Box::new(l), Box::new(r)), lines, lno, file),
    Expr3,
};

Expr3: Expr = {
    <l:Expr3> <lno: @L> "<" <r:Expr4> => Expr::new_binary(BinaryOp::LessThan, l, r, lines, lno, file),
    <l:Expr3> <lno: @L> ">" <r:Expr4> => Expr::new_binary(BinaryOp::GreaterThan, l, r, lines, lno, file),
    <l:Expr3> <lno: @L> "<=" <r:Expr4> => Expr::new_binary(BinaryOp::LessEq, l, r, lines, lno, file),
    <l:Expr3> <lno: @L> ">=" <r:Expr4> => Expr::new_binary(BinaryOp::GreaterEq, l, r, lines, lno, file),
    <l:Expr3> <lno: @L> "==" <r:Expr4> => Expr::new_binary(BinaryOp::Equal, l, r, lines, lno, file),
    <l:Expr3> <lno: @L> "!=" <r:Expr4> => Expr::new_binary(BinaryOp::NotEqual, l, r, lines, lno, file),
    Expr4,
}

Expr4: Expr = {
    <l:Expr4> <lno: @L> "|" <r:Expr5> => Expr::new_binary(BinaryOp::BitwiseOr, l, r, lines, lno, file),
    <l:Expr4> <lno: @L> "<<" <r:Expr5> => Expr::new_binary(BinaryOp::ShiftLeft, r, l, lines, lno, file),
    <l:Expr4> <lno: @L> ">>" <r:Expr5> => Expr::new_binary(BinaryOp::ShiftRight, r, l, lines, lno, file),
    Expr5,
};

Expr5: Expr = {
    <l:Expr5> <lno: @L> "^" <r:Expr6> => Expr::new_binary(BinaryOp::BitwiseXor, l, r, lines, lno, file),
    Expr6,
};

Expr6: Expr = {
    <l:Expr6> <lno: @L> "&" <r:Expr7> => Expr::new_binary(BinaryOp::BitwiseAnd, l, r, lines, lno, file),
    Expr7,
};

Expr7: Expr = {
    <l:Expr7> <lno: @L> "+" <r:Expr8> => Expr::new_binary(BinaryOp::Plus, l, r, lines, lno, file),
    <l:Expr7> <lno: @L> "-" <r:Expr8> => Expr::new_binary(BinaryOp::Minus, l, r, lines, lno, file),
    Expr8,
};

Expr8: Expr = {
    <l:Expr8> <lno: @L> "*" <r:Expr9> => Expr::new_binary(BinaryOp::Times, l, r, lines, lno, file), 
    <l:Expr8> <lno: @L> "/" <r:Expr9> => Expr::new_binary(BinaryOp::Div, l, r, lines, lno, file),
    <l:Expr8> <lno: @L> "%" <r:Expr9> => Expr::new_binary(BinaryOp::Mod, l, r, lines, lno, file),
    Expr9,
};

Expr9: Expr = {
    <e: Expr9> <lno: @L> "?" => Expr::lno(ExprKind::Try(Box::new(e)), lines, lno, file),
    Expr10,
}

Expr10: Expr = {
    <lno: @L> "-" <e: Expr10> => Expr::new_unary(UnaryOp::Minus, e, lines, lno, file),
    <lno: @L> "!" <e: Expr10> => Expr::new_unary(UnaryOp::Not, e, lines, lno, file),
    <lno: @L> "~" <e: Expr10> => Expr::new_unary(UnaryOp::BitwiseNeg, e, lines, lno, file),
    Expr11,
};

Expr11: Expr = {
    <lno: @L> <c: Const> => Expr::lno(ExprKind::Constant(c), lines, lno, file),
    <lno: @L> "Some(" <e: Expr> ")" => Expr::lno(ExprKind::OptionInitializer(Box::new(e)), lines, lno, file),
    <lno: @L> <f: Expr11> "(" <e: Expr> ")" => Expr::lno(
        ExprKind::FunctionCall(Box::new(f), vec![e]), lines, lno, file
    ),
    <lno: @L> <f: Expr11> "(" <c: CommaedExprs?> ")" => Expr::lno(
        ExprKind::FunctionCall(Box::new(f), c.unwrap_or(vec![])), lines, lno, file
    ),
    <e1:Expr11> <lno: @L> "[" <e2:Expr> "]" => Expr::lno(
        ExprKind::ArrayOrMapRef(Box::new(e1), Box::new(e2)), lines, lno, file
    ),
    <e:Expr11> <lno: @L> "." <i:Ident> => Expr::lno(
        ExprKind::DotRef(Box::new(e), stringtable.name_from_id(i).to_string()), lines, lno, file
    ),
    <e:Expr11> <lno: @L> "." <u:UnsignedInteger> => Expr::lno(
        ExprKind::TupleRef(Box::new(e), u), lines, lno, file
    ),
    <lno: @L> "xif" <cond: Expr> <cb: CodeBlockNew> <el: ElseIf?> => Expr::lno(
        ExprKind::If(Box::new(cond), cb, el), lines, lno, file
    ),
    <lno: @L> "xif" "let" "Some(" <l: Ident> ")" "=" <r:Expr> <t: CodeBlockNew> <el: ElseIf?> => Expr::lno(
        ExprKind::IfLet(l, Box::new(r), t, el), lines, lno, file
    ),
    <lno: @L> "xloop" <cb: CodeBlock> => Expr::lno(ExprKind::Loop(cb), lines, lno, file),
    Expr12,
}

ElseIf: CodeBlock = {
    ("else" <CodeBlockNew>) => <>,
    <lno: @L> "elseif" <cond: Expr> <cb: CodeBlockNew> <el: ElseIf?> => CodeBlock::new(
        vec![], Some(Box::new(Expr::lno(ExprKind::If(Box::new(cond), cb, el), lines, lno, file)))
    ),
    <lno: @L> "elseif" "let" "Some(" <l: Ident> ")" "=" <r:Expr> <t: CodeBlockNew> <el: ElseIf?> => CodeBlock::new(
        vec![], Some(Box::new(Expr::lno(ExprKind::IfLet(l, Box::new(r), t, el), lines, lno, file)))
    ),
}

Expr12: Expr = {
    <lno: @L> "hash" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::Hash, e, lines, lno, file),
    <lno: @L> "hash" "(" <l:Expr> "," <r:Expr> ","? ")" => Expr::new_binary(BinaryOp::Hash, l, r, lines, lno, file),
    <lno: @L> "len" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::Len, e, lines, lno, file),
    <lno: @L> "uint" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToUint, e, lines, lno, file),
    <lno: @L> "int" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToInt, e, lines, lno, file),
    <lno: @L> "bytes32" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToBytes32, e, lines, lno, file),
    <lno: @L> "address" "(" <e: Expr> ")" => Expr::new_unary(UnaryOp::ToAddress, e, lines, lno, file),
    <lno: @L> "newbuffer" "(" ")" => Expr::lno(ExprKind::NewBuffer, lines, lno, file),
    <lno: @L> "getbuffer8" "(" <e: Expr> "," <f:Expr> ")" => Expr::new_binary(
        BinaryOp::GetBuffer8, f, e, lines, lno, file
    ),
    <lno: @L> "getbuffer64" "(" <e: Expr> "," <f:Expr> ")" => Expr::new_binary(
        BinaryOp::GetBuffer64, f, e, lines, lno, file
    ),
    <lno: @L> "getbuffer256" "(" <e: Expr> "," <f:Expr> ")" => Expr::new_binary(
        BinaryOp::GetBuffer256, f, e, lines, lno, file
    ),
    <lno: @L> "setbuffer8" "(" <e: Expr> "," <f:Expr> "," <g:Expr> ")" => Expr::new_trinary(
        TrinaryOp::SetBuffer8, f, g, e, lines, lno, file
    ),
    <lno: @L> "setbuffer64" "(" <e: Expr> "," <f:Expr> "," <g:Expr> ")" => Expr::new_trinary(
        TrinaryOp::SetBuffer64, f, g, e, lines, lno, file
    ),
    <lno: @L> "setbuffer256" "(" <e: Expr> "," <f:Expr> "," <g:Expr> ")" => Expr::new_trinary(
        TrinaryOp::SetBuffer256, f, g, e, lines, lno, file
    ),
    <lno: @L> "newarray" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::NewArray(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> "newfixedarray" "(" <s:UnsignedInteger> "," <e:Expr> ","? ")" => Expr::lno(
        ExprKind::NewFixedArray(s.to_usize().unwrap(), Some(Box::new(e))), lines, lno, file
    ),
    <lno: @L> "newfixedarray" "(" <s:UnsignedInteger> ")" => Expr::lno(
        ExprKind::NewFixedArray(s.to_usize().unwrap(), None), lines, lno, file
    ),
    <lno: @L> "newmap" "<" <k:Type> "," <v:Type> ","? ">" => Expr::lno(
        ExprKind::NewMap(k, v), lines, lno, file
    ),
    <lno: @L> "newunion" "<" <t: CommaedTypes> ">" "(" <e: Expr> ")" => Expr::lno(
        ExprKind::NewUnion(t, Box::new(e)), lines, lno, file
    ),
    <lno: @L> "unsafecast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::UnsafeCast(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> "cast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::Cast(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> "covariantcast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::CovariantCast(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> "weakcast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::WeakCast(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> "unioncast" "<" <t:Type> ">" "(" <e:Expr> ")" => Expr::lno(
        ExprKind::UnionCast(Box::new(e), t), lines, lno, file
    ),
    <qualifiers: (<Qualifier>)*> <lno: @L> "closure" "(" <fa:FuncArgs> ")" <t: (Return)?> <cb:CodeBlock> => {
        let view = qualifiers.contains(&"view");
        let write = qualifiers.contains(&"write");
        let debug = DebugInfo::here(lines, lno, file);
        
        let name = format!("closure #{}", closures.len() + 1);
        let id = stringtable.get(name.clone());
        let closure = Func::new(name, id, false, view, write, true, fa, t, cb, BTreeSet::new(), 0, debug);
        
	closures.insert(id, closure.clone());
        
        Expr::new(ExprKind::Closure(closure), debug)
    },
    Expr13,
}

Expr13: Expr = {
    <lno: @L> "asm" "(" <e:Expr> ")" <rt:Type> "{" <body:AsmInsn*> "}" => Expr::lno(
        ExprKind::Asm(rt, body, vec![e]), lines, lno, file
    ),
    <lno: @L> "asm" "(" <a:CommaedExprs?> ")" <rt:Type> "{" <body:AsmInsn*> "}" => Expr::lno(
        ExprKind::Asm(rt, body, a.unwrap_or(vec![])), lines, lno, file
    ),
    <lno: @L> "struct" "{" <fi: FieldInitializers> "}" => Expr::lno(
        ExprKind::StructInitializer(fi), lines, lno, file
    ),
    "(" <e: Expr> ")" => <>,
    <lno: @L> <cb: CodeBlockNew> => Expr::lno(ExprKind::CodeBlock(cb), lines, lno, file),
    <lno: @L> "(" <c: CommaedExprs?> ")" => Expr::lno(ExprKind::Tuple(c.unwrap_or(vec![])), lines, lno, file),
    <lno: @L> "error" => Expr::lno(ExprKind::Error, lines, lno, file),
    <lno: @L> "getGas" "(" ")" => Expr::lno(ExprKind::GetGas, lines, lno, file),
    <lno: @L> "setGas" "(" <e:Expr> ")" => Expr::lno(ExprKind::SetGas(Box::new(e)), lines, lno, file),
    <lno: @L> "check" "(" <e: Expr> "," <t: Type> ")" => Expr::lno(
        ExprKind::Check(Box::new(e), t), lines, lno, file
    ),
    <lno: @L> <i: Ident> => Expr::lno(ExprKind::VariableRef(i), lines, lno, file),
    <lno: @L> <q: QuoteString> => Expr::lno(ExprKind::Quote(q), lines, lno, file),
}

Const: Constant = {
    <u: UnsignedInteger> => Constant::Uint(u),
    <s: SignedInteger> => Constant::Int(s),
    "None<" <t: Type> ">" => Constant::Option(OptionConst::None(t)),
    "false" => Constant::Bool(false),
    "true" => Constant::Bool(true),
    "null" => Constant::Null,
}

FieldInitializers: Vec<FieldInitializer> = {
    <mut l: (<FieldInitializer> ",")*> <f: FieldInitializer> ","? => { l.push(f); l },
}

FieldInitializer: FieldInitializer = {
    <i: Ident> ":" <e: Expr> => FieldInitializer::new(stringtable.name_from_id(i).to_string(), e),
}

CommaedExprs: Vec<Expr> = {
    <mut c: (<Expr> ",")+> <e: (Expr)?> => {
    	if let Some(s) = e {
    	    c.push(s);
    	}
    	c
    },
}

AsmInsn: Instruction = {
    <lno: @L> <o: AsmOpcode> => Instruction::from_opcode(o, DebugInfo::here(lines, lno, file)),
    <lno: @L> "[" <v:AsmVal> "]" <o:AsmOpcode> => Instruction::from_opcode_imm(o, v, DebugInfo::here(lines, lno, file)),
}

AsmOpcode: Opcode = {
    IdentStr => Opcode::from_name(<>),
}

AsmVal: Value = {
    <UnsignedInteger> => Value::Int(<>),
    "(" <mut l: (<AsmVal> ",")*> <v: AsmVal> ","? ")" => Value::new_tuple({ l.push(v); l }),
}

Qualifier: &'input str = {
    "view" => <>,
    "write" => <>,
    "public" => <>,
};

IdentStr: &'input str = {
    r"[a-zA-Z_][a-zA-Z_01-9]*" => <>,
};

IdentString: String = {
    r"[a-zA-Z_][a-zA-Z_01-9]*" => <>.to_string(),
};

QuoteString: Vec<u8> = {
    <lno: @L> <q: r#"s?"[a-zA-Z0-9_ .,:?'<+>()!@#$%^&*|~-]*""#> => {
        let re = Regex::new(r#"s?"(0x)?[a-fA-F0-9]+""#).unwrap();
        if re.is_match(q) {
            error_system.warnings.push(
                CompileError::new_warning(
                    String::from("Parser warning"),
                    format!(
                        "String {} looks like hex but will be treated as a string",
                        Color::color(error_system.warn_color, &q),
                    ),
                    lines.location(BytePos::from(lno) + BytePos::from(1), file).into_iter().collect()
                )
            );
        }
        let re = Regex::new(r#"s?"([a-zA-Z0-9_ .,:?'<+>()!@#$%^&*|~-]*)""#).unwrap();
        let string = re.captures(q).unwrap().get(1).map_or(String::new(), |m| m.as_str().to_string());
        string.as_bytes().to_vec()
    },
    <lno: @L> <q: r#"h"(0x)?[a-fA-F0-9]*""#> => {
        let re = Regex::new(r#"h"(0x)?([a-fA-F0-9]*)""#).unwrap();
        let mut string = re.captures(q).unwrap().get(2).map_or(String::new(), |m| m.as_str().to_string());
        if string.len() % 2 == 1 {
            string = "0".to_owned() + &string;
        }
        hex::decode(string).unwrap()
    },
};

UnsignedInteger: Uint256 = {
    "0" => Uint256::from_usize(0),
    r"[1-9][0-9]*" => Uint256::from_string(<>).unwrap(),
    r"0x[0-9a-fA-F]+" => Uint256::from_string_hex(&<>[2..]).unwrap(),
    <ConstVal> => <>,
}

ConstVal: Uint256 = {
    "const" "::" <lno: @L> <c: IdentString> =>? {
        let loc = lines.loc(lno, file);
        match constants.get(&c) {
            Some(i) => {
                if c.starts_with('_') {
                    error_system.warnings.push(
                        CompileError::new_warning(
                            String::from("Parser warning"),
                            format!(
                                "Constant {} was used despite being marked as intentionally unused",
                                Color::color(error_system.warn_color, &c),
                            ),
                            vec![loc]
                        )
                    );
                }
                used_constants.insert(c.clone());
                Ok(i.clone())
            }
            None => {
                error_system.errors.push(
                    CompileError::new(
                        String::from("Parser error"),
                        format!("Unrecognized constant {}", Color::color(error_system.warn_color, &c)),
                        vec![loc]
                    )
                );
                // intentionally skip error so as to not halt compilation
                Ok(Uint256::from_usize(0))
            }
        }
    }
}

SignedInteger: Uint256 = {
    "0s" => Uint256::from_usize(0),
    r"[1-9][0-9]*s" => Uint256::from_signed_string(<>).unwrap(),
}
