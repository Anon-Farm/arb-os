//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import func builtin_arrayOp(a: any, index: uint, closure: opClosure) -> (any, any);

type opClosure = struct {
	f: func(any, any) -> (any, any),
	val: any,
}


func tests(which: uint) -> any {
	if (which == 1) {
		let a = newarray<any>(17);
		return a[6];
	} elseif (which == 2) {
		let a = newarray<uint>(71);
		return a[66];
	} elseif (which == 3) {
		let a = newarray<uint>(64);
		a = a with { [17] = 3 };
		return a[17];
	} elseif (which == 4) {
		let a = newarray<uint>(111);
		a = a with { [42] = 3 };
		a = a with { [99] = 4 };
		a = a with { [42] = 5 };
		return a[42];
	} elseif (which == 5) {
		let a = newarray<uint>(111);
		a = a with { [42] = 3 };
		a = a with { [99] = 4 };
		a = a with { [42] = 5 };
		return a[99];
	} elseif (which == 6) {
		let a = newarray<uint>(17);
		a = a with { [11] = 3 };
		let result = builtin_arrayOp(
			a,
			11,
			unsafecast<opClosure>(struct { f: addFunc, val: 4, })
		);
		return result.1;
	} else {
		return null;
	}
}

func addFunc(thunk: uint, oldVal: uint) -> (uint, uint) {
	let res = thunk + oldVal;
	return (res, res,);
}
