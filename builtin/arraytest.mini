//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import func builtin_arrayOp(a: any, index: uint, closure: opClosure) -> (any, any);

type opClosure = struct {
	f: func(any, any) -> (any, any),
	val: any,
}


func main() {
	asm(tests(),) { log };
}

func tests() -> uint {
	let a = newarray<any>(17);
	if (a[6] != null) {
		return 1;
	};

	a = newarray<uint>(71);
	if (a[66] != 0) {
		return 2;
	}

	a = newarray<uint>(64);
	a = a with { [17] = 3 };
	if (a[17] != 3) {
		return 3;
	}

	a = newarray<uint>(111);
	a = a with { [42] = 3 };
	a = a with { [99] = 4 };
	a = a with { [42] = 5 };
	if (a[42] != 5) {
		return 4;
	}

	a = newarray<uint>(111);
	a = a with { [42] = 3 };
	a = a with { [99] = 4 };
	a = a with { [42] = 5 };
	if (a[99] != 4) {
		return 5;
	}

	let a = newarray<uint>(17);
	a = a with { [11] = 3 };
	let result = builtin_arrayOp(
		a,
		11,
		unsafecast<opClosure>(struct { f: addFunc, val: 4, })
	);
	if (result.1 != 7) {
		return 6;
	}

	return 0;
}

func addFunc(thunk: uint, oldVal: uint) -> (uint, uint) {
	let res = thunk + oldVal;
	return (res, res,);
}
