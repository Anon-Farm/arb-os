//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

var global0: uint;
var global1: uint;
var global2: any;
var global3: (uint, int, bool);
var global4: int;
var global5: bool;
var global6: uint;
var global7: []uint;
var global8: [13]uint;
var global9: uint;

type MyType = uint
var global10: MyType;


func main() {
    asm(tests()) { log };
}

func tests() -> uint {
    global0 = 3;
    if (global0 != 3) {
        return 1;
    }
        
    global9 = 4;
    if (global9 != 4) {
        return 2;
    }

    global0 = 5;
    global9 = 4;
    if (global0 != 5) {
        return 3;
    }

    global9 = 6;
    global0 = 3;
    if (global9 != 6) {
        return 4;
    }

    let sum = asm (4, 0, 3) uint {
        plus
        plus
    };
    if (sum != 7) {
        return 5;
    }

    global10 = 3;
    if (global10 != 3) {
        return 6;
    }

    let farr = newfixedarray(25, 0);
    farr = farr with { [0] = 33 };
    if (farr[0] != 33) {
        return 7;
    }
 
    return 0;
}