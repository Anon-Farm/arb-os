
type block = [8]anytype

type array = struct {
	size: uint,
	topstep: uint,
	contents: block,
}

func main() anytype {
	return builtin_arrayNew(13, null);
}

public func builtin_arraySize(arr: array) uint {
	return arr.size;
}

public func builtin_arrayNew(sz: uint, base_val: anytype) array {
	let chunk = 1;
	let height = 1;
	while ((8*chunk) < sz) {
		chunk = 8*chunk;
		height = 1+height;
	}
	return struct {
		size: sz,
		topstep: chunk,
		contents: buildTree(height, base_val),
	};
}

func buildTree(height: uint, base_val: anytype) block {
	if (1 == height) {
		return newfixedarray(8, base_val);
	} else {
		return newfixedarray(8, buildTree(height-1, base_val));
	}
}

public func builtin_arrayGet(arr: array, index: uint) anytype {
	if (index >= arr.size) {
		panic;
	}
	let res = arr.contents;
	let chunk = arr.topstep;
	while (1 <= chunk) {
		res = unsafecast(res[index/chunk], block);
		index = index % chunk;
		chunk = chunk / 8;
	}
	return res;
}

public func builtin_arraySet(arr: array, index: uint, value: anytype) array {
	if (index >= arr.size) {
		panic;
	}
	return arr with { contents: arraySet2(arr.contents, arr.topstep, index, value) };
}

func arraySet2(b: block, chunk: uint, index: uint, value: anytype) block {
	if (1 == chunk) {
		return b with {[index] = value};
	} else {
		return b with {[index/chunk] = arraySet2(
			unsafecast(b[index/chunk], block), 
			chunk/8, 
			index%chunk, 
			value
		)};
	}
}

public func builtin_arraySwap(a: array, index: uint, value: anytype) (array, anytype) {
	if (index >= a.size) {
		panic;
	}
	let sub = arraySwap2(a.contents, a.topstep, index, value);
	return (
		a with { contents: sub.bloc },
		sub.val,
	);
}

type arraySwapSubResult = struct {
	bloc: block,
	val:  anytype,
}

func arraySwap2(b: block, chunk: uint, index: uint, value: anytype)  arraySwapSubResult {
	if (1 == chunk) {
		return struct {
			bloc: b with {[index] = value},
			val: b[index],
		};
	} else {
		let subIndex = index/chunk;
		let sub = arraySwap2(
			unsafecast(b[subIndex], block),
			chunk/8,
			index%chunk,
			value
		);
		return sub with { bloc: b with {[subIndex] = sub.bloc} };
	}
}
