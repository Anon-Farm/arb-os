//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import func builtin_kvsDelete(kvs: any, key: any) -> any;
import func builtin_kvsForall(kvs: any, cb: func(any, any, any) -> any, state: any) -> any; 

func tests(which: uint) -> any {
	if (which == 0) {
		let s = builtin_kvsNew();
		return (builtin_kvsGet(s, 17)).0;
	} elseif (which == 1) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 42);
		return (builtin_kvsGet(s, 42)).0;
	} elseif (which == 2) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 43);
		s = builtin_kvsSet(s, 55, 56);
		s = builtin_kvsSet(s, 42, 99);
		return (builtin_kvsGet(s, 42)).0;
	} elseif (which == 3) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 43);
		s = builtin_kvsSet(s, 55, 56);
		s = builtin_kvsSet(s, 42, 99);
		return (builtin_kvsGet(s, 55)).0;
	} elseif (which == 4) {
		let s = builtin_kvsNew();
		let i = 0;
		while (i < 41) {
			s = builtin_kvsSet(s, i, 1000+i);
			i = i+1;
		}
		return (builtin_kvsGet(s, 17)).0;
	} elseif (which == 5) {
		let s = builtin_kvsNew();
		let i = 0;
		while (i < 27) {
			s = builtin_kvsSet(s, i, 1000+i);
			i = i+1;
		}
		s = builtin_kvsDelete(s, 17);
		return (builtin_kvsGet(s, 17)).0;
	} elseif (which == 6) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 43);
		s = builtin_kvsSet(s, 55, 56);
		s = builtin_kvsSet(s, 42, 99);
		return (builtin_kvsGet(s, 42)).1;
	} elseif (which == 7) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 43);
		s = builtin_kvsSet(s, 55, 56);
		s = builtin_kvsSet(s, 42, 99);
		return (builtin_kvsGet(s, 3)).1;
	} elseif (which == 8) {
		let s = builtin_kvsNew();
		s = builtin_kvsSet(s, 42, 43);
		s = builtin_kvsSet(s, 55, 56);
		s = builtin_kvsSet(s, 42, 99);
		let rawResult = builtin_kvsForall(s, sumForKvsIterator, 0);
		return unsafecast<uint>(rawResult);
	} else {
		return null;
	}
}

func sumForKvsIterator(key: any, value: any, state: any) -> any {
	return unsafecast<uint>(value) + unsafecast<uint>(state);
}