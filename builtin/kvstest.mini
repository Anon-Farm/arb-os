//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import func builtin_kvsDelete(kvs: any, key: any) -> any;
import func builtin_kvsForall(kvs: any, cb: func(any, any, any) -> any, state: any) -> any; 

func main() {
	asm(tests(),) { log };
}

func tests() -> uint {
	let s = builtin_kvsNew();
	if (builtin_kvsGet(s, 17) != None<any>) {
		return 1;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 42);
	if (builtin_kvsGet(s, 42) != Some(unsafecast<any>(42))) {
		return 2;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 43);
	s = builtin_kvsSet(s, 55, 56);
	s = builtin_kvsSet(s, 42, 99);
	if (builtin_kvsGet(s, 42) != Some(unsafecast<any>(99))) {
		return 3;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 43);
	s = builtin_kvsSet(s, 55, 56);
	s = builtin_kvsSet(s, 42, 99);
	if (builtin_kvsGet(s, 55) != Some(unsafecast<any>(56))) {
		return 4;
	}

	s = builtin_kvsNew();
	let i = 0;
	while (i < 41) {
		s = builtin_kvsSet(s, i, 1000+i);
		i = i+1;
	}
	if (builtin_kvsGet(s, 17) != Some(unsafecast<any>(1017))) {
		return 5;
	}

	s = builtin_kvsNew();
	let i = 0;
	while (i < 27) {
		s = builtin_kvsSet(s, i, 1000+i);
		i = i+1;
	}
	s = builtin_kvsDelete(s, 17);
	if (builtin_kvsGet(s, 17) != None<any>) {
		return 6;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 43);
	s = builtin_kvsSet(s, 55, 56);
	s = builtin_kvsSet(s, 42, 99);
	if (builtin_kvsGet(s, 42) != Some(unsafecast<any>(99))) {
		return 7;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 43);
	s = builtin_kvsSet(s, 55, 56);
	s = builtin_kvsSet(s, 42, 99);
	if (builtin_kvsGet(s, 3) != None<any>) {
		return 8;
	}

	s = builtin_kvsNew();
	s = builtin_kvsSet(s, 42, 43);
	s = builtin_kvsSet(s, 55, 56);
	s = builtin_kvsSet(s, 42, 99);
	let rawResult = builtin_kvsForall(s, sumForKvsIterator, 0);
	if (unsafecast<uint>(rawResult) != 155) {
		return 9;
	}

	return 0;
}

func isSome(x: option<any>) -> bool {
	if let Some(unused) = x {
		return true;
	} else {
		return false;
	}
}

func getSomeOr(x: option<any>, backupVal: any) -> any {
	if let Some(val) = x {
		return val;
	} else {
		return backupVal;
	}
}

func sumForKvsIterator(key: any, value: any, state: any) -> any {
	return unsafecast<uint>(value) + unsafecast<uint>(state);
}