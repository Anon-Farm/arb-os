
import type PriorityQ;

import func priorityq_new(capacity: uint) PriorityQ;
import func priorityq_isEmpty(pq: PriorityQ) bool;
import func priorityq_isFull(pq: PriorityQ) bool;
import func priorityq_insert(pq: PriorityQ, item: anytype, priority: uint) (bool, PriorityQ);
import func priorityq_get(pq: PriorityQ) (bool, anytype, PriorityQ);
import func priorityq_printAsArray(pq: PriorityQ) uint;


func tests(which: uint) anytype {
	if (which == 0) {
		let q = priorityq_new(40);
		if (priorityq_isEmpty(q)) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 1) {
		let q = priorityq_new(40);
		if (priorityq_isFull(q)) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 2) {
		let q = priorityq_new(40);
		let (success, pq,) = priorityq_insert(q, 97, 3);
		if (success) {
			return 1;
		} else {
			return 0;
		}
	} elseif (which == 3) {
		let q = priorityq_new(40);
		let (success, pq,) = priorityq_insert(q, 97, 3);
		if (! success) {
			return 0;
		}
		let (success2, pq2,) = priorityq_insert(pq, 98, 2);
		if (! success2) {
			return 1;
		}
		let (success3, pq3,) = priorityq_insert(pq2, 96, 4);
		if (! success3) {
			return 2;
		}
		let (success4, ret, pq4,) = priorityq_get(pq3);
		if (!success4) {
			return 3;
		}
		return ret;
	} elseif (which == 4) {
		let q = priorityq_new(40);
		let i = 0;
		while (i < 10) {
			let (success, pq,) = priorityq_insert(q, i+30, i+100);
			if (! success) {
				return i;
			}
			q = pq;
			i = i+1;
		}
		let (success, pq1,) = priorityq_insert(q, 97, 293);
		if (! success) {
			return 25;
		}
		q = pq1;
		let (success2, pq2,) = priorityq_insert(q, 98, 292);
		if (! success2) {
			return 26;
		}
		q = pq2;
		let (success3, pq3,) = priorityq_insert(q, 96, 294);
		if (! success3) {
			return 27;
		}
		q = pq3;
		let (success4, ret, pq4,) = priorityq_get(q);
		if (!success4) {
			return 28;
		}
		return ret;
	} else {
		return null;
	}
}
