//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::getGlobalAccountStore;
use accounts::accountStore_getNumAccounts;
use accounts::accountStore_getNumContracts;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallStack_callHitError;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;

use inbox::inbox_currentArbBlockNumber;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;


public impure func ArbStatistics_getStats(topFrame: EvmCallFrame) -> (uint, uint, uint, uint, uint, uint) {
    return (
        inbox_currentArbBlockNumber(),
        accountStore_getNumAccounts(getGlobalAccountStore()),
        arbStats.storage,
        arbStats.arbGasUsed,
        arbStats.numTxReceipts,
        accountStore_getNumContracts(getGlobalAccountStore()),
    );
}

type ArbStatistics = struct {
    storage: uint,
    arbGasUsed: uint,
    numTxReceipts: uint,
}

var arbStats: ArbStatistics;

public impure func arbStatistics_init() {
    arbStats = struct {
        storage: 0,
        arbGasUsed: 0,
        numTxReceipts: 0,
    };
}

public func arbStatistics_newForUpgrade() -> ArbStatistics {
    return struct {
        storage: 0,
        arbGasUsed: 0,
        numTxReceipts: 0,
    };
}

public impure func arbStatistics_addToStorage(delta: int) {
    arbStats = arbStats with {
        storage: uint(int(arbStats.storage) + delta)
    };
}

public impure func arbStatistics_addToGasUsed(gas: uint) {
    arbStats = arbStats with {
        arbGasUsed: arbStats.arbGasUsed + gas
    };
}

public impure func arbStatistics_addTxReceipt() {
    arbStats = arbStats with {
        numTxReceipts: arbStats.numTxReceipts + 1
    };
}
