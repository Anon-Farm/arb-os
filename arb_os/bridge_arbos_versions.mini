
// This file is machine-generated. Don't edit it unless you know what you're doing.
use customize_arbos_bridge_versions::set_gasAccountingInfo_onUpgrade;
use customize_arbos_bridge_versions::set_globalCurrentRetryableRequest_onUpgrade;
use customize_arbos_bridge_versions::set_globalAccountStore_onUpgrade;

type GlobalsBeforeUpgrade = struct {
    moduleManager: any,
    globalBlockReceiptData: struct {
        data: any,
        statsThisBlock: any,
        statsAllTime: any,
        lastBlockNum: uint,
        nextSendTime: uint,
    },
    logsQueuedForEndOfBlock: any,
    globalOutbox: struct {
        batch: any,
        batchNumber: uint,
        numInBatch: uint,
    },
    globalInbox: any,
    globalInputQueue: struct {
        txQ: any,
        batchQ: any,
    },
    gasAccountingInfo: struct {
        txState: option<any>,
        feeConfig: any,
        currentPrices: any,
        gasRemainingThisBlock: uint,
        congestionState: any,
        speedLimitPerSecond: uint,
        pricingParams: any,
        gasAllocatedToThisBlock: uint,
    },
    gasAccountingParams: struct {
        SpeedLimitPerSecond: uint,
        GasPoolMax: uint,
        TxGasLimit: uint,
    },
    globalL1GasPriceEstimator: struct {
        estimateWei: uint,
        fairGasPriceSender: address,
    },
    evmOpJumpTable: [47]impure func(),
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    inErrorHandler: bool,
    globalIndexedAddressTable: any,
    unreachableMask: uint,
    globalChainParams: option<any>,
    blockhashes: struct {
        latestBlockNum: uint,
        oldHashes: [256]bytes32,
    },
    upgradeInProgress: option<any>,
    globalAccountStore: any,
    dummyGlobalForUpgradeTest: uint,
    _jump_table: any,
}

type GlobalsAfterUpgrade = struct {
    moduleManager: any,
    globalBlockReceiptData: struct {
        data: any,
        statsThisBlock: any,
        statsAllTime: any,
        lastBlockNum: uint,
        nextSendTime: uint,
    },
    logsQueuedForEndOfBlock: any,
    globalOutbox: struct {
        batch: any,
        batchNumber: uint,
        numInBatch: uint,
    },
    globalInbox: any,
    globalInputQueue: struct {
        txQ: any,
        batchQ: any,
    },
    gasAccountingInfo: struct {
        txState: option<any>,
        feeConfig: any,
        currentPrices: any,
        gasRemainingThisBlock: uint,
        congestionState: any,
        speedLimitPerSecond: uint,
        pricingParams: any,
        gasAllocatedToThisBlock: uint,
        retryablePrices: any,
    },
    gasAccountingParams: struct {
        SpeedLimitPerSecond: uint,
        GasPoolMax: uint,
        TxGasLimit: uint,
    },
    globalL1GasPriceEstimator: struct {
        estimateWei: uint,
        fairGasPriceSender: address,
    },
    evmOpJumpTable: [47]impure func(),
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    globalCurrentRetryableRequest: option<any>,
    inErrorHandler: bool,
    globalIndexedAddressTable: any,
    unreachableMask: uint,
    globalChainParams: option<any>,
    blockhashes: struct {
        latestBlockNum: uint,
        oldHashes: [256]bytes32,
    },
    upgradeInProgress: option<any>,
    globalAccountStore: any,
    _jump_table: any,
}

public impure func remapGlobalsForUpgrade(input_globals: GlobalsBeforeUpgrade) -> GlobalsAfterUpgrade {
    let globalAccountStore = set_globalAccountStore_onUpgrade(input_globals);
    let globalBlockReceiptData = input_globals.globalBlockReceiptData;
    let globalIndexedAddressTable = input_globals.globalIndexedAddressTable;
    let globalL1GasPriceEstimator = input_globals.globalL1GasPriceEstimator;
    let blockhashes = input_globals.blockhashes;
    let upgradeInProgress = input_globals.upgradeInProgress;
    let globalInputQueue = input_globals.globalInputQueue;
    let moduleManager = input_globals.moduleManager;
    let evmOpJumpTable = input_globals.evmOpJumpTable;
    let unreachableMask = input_globals.unreachableMask;
    let globalInbox = input_globals.globalInbox;
    let logsQueuedForEndOfBlock = input_globals.logsQueuedForEndOfBlock;
    let inErrorHandler = input_globals.inErrorHandler;
    let globalCurrentTxRequest = input_globals.globalCurrentTxRequest;
    let gasAccountingParams = input_globals.gasAccountingParams;
    let globalCallStack = input_globals.globalCallStack;
    let globalChainParams = input_globals.globalChainParams;
    let globalOutbox = input_globals.globalOutbox;
    let gasAccountingInfo = set_gasAccountingInfo_onUpgrade(input_globals);
    let globalCurrentRetryableRequest = set_globalCurrentRetryableRequest_onUpgrade(input_globals);
    let _jump_table = (asm() GlobalsAfterUpgrade { rget })._jump_table;
    return struct {
        moduleManager: moduleManager,
        globalBlockReceiptData: globalBlockReceiptData,
        logsQueuedForEndOfBlock: logsQueuedForEndOfBlock,
        globalOutbox: globalOutbox,
        globalInbox: globalInbox,
        globalInputQueue: globalInputQueue,
        gasAccountingInfo: gasAccountingInfo,
        gasAccountingParams: gasAccountingParams,
        globalL1GasPriceEstimator: globalL1GasPriceEstimator,
        evmOpJumpTable: evmOpJumpTable,
        globalCallStack: globalCallStack,
        globalCurrentTxRequest: globalCurrentTxRequest,
        globalCurrentRetryableRequest: globalCurrentRetryableRequest,
        inErrorHandler: inErrorHandler,
        globalIndexedAddressTable: globalIndexedAddressTable,
        unreachableMask: unreachableMask,
        globalChainParams: globalChainParams,
        blockhashes: blockhashes,
        upgradeInProgress: upgradeInProgress,
        globalAccountStore: globalAccountStore,
        _jump_table: _jump_table,
    };
}
