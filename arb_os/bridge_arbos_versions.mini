
type GlobalsBeforeUpgrade = struct {
    globalAccountStore: any,
    upgradeInProgress: option<any>,
    blockhashes: struct {
    latestBlockNum: uint,
    oldHashes: [256]bytes32,
},
    globalChainParams: option<any>,
    unreachableMask: uint,
    globalIndexedAddressTable: any,
    inErrorHandler: bool,
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    evmOpJumpTable: [47]impure func(),
    gasAccountingInfo: struct {
    txState: option<any>,
    feeConfig: any,
    currentPrices: any,
    gasRemainingThisBlock: uint,
    congestionState: any,
    speedLimitPerSecond: uint,
    pricingParams: any,
    gasAllocatedToThisBlock: uint,
},
    anotherExtraVarForTesting: uint,
    gasAccountingParams: struct {
    SpeedLimitPerSecond: uint,
    GasPoolMax: uint,
    TxGasLimit: uint,
},
    globalL1GasPriceEstimator: struct {
    estimateWei: uint,
    fairGasPriceSender: address,
},
    globalInbox: any,
    globalInputQueue: struct {
    txQ: any,
    batchQ: any,
},
    globalBlockReceiptData: struct {
    data: any,
    statsThisBlock: any,
    statsAllTime: any,
    lastBlockNum: uint,
    nextSendTime: uint,
},
    logsQueuedForEndOfBlock: any,
    globalOutbox: struct {
    batch: any,
    batchNumber: uint,
    numInBatch: uint,
},
    moduleManager: any,
    extraVariableForTesting: uint,
    _jump_table: any,
}
type GlobalsAfterUpgrade = struct {
    globalAccountStore: any,
    upgradeInProgress: option<any>,
    blockhashes: struct {
    latestBlockNum: uint,
    oldHashes: [256]bytes32,
},
    globalChainParams: option<any>,
    unreachableMask: uint,
    globalIndexedAddressTable: any,
    inErrorHandler: bool,
    globalCallStack: option<any>,
    globalCurrentTxRequest: any,
    evmOpJumpTable: [47]impure func(),
    gasAccountingInfo: struct {
    txState: option<any>,
    feeConfig: any,
    currentPrices: any,
    gasRemainingThisBlock: uint,
    congestionState: any,
    speedLimitPerSecond: uint,
    pricingParams: any,
    gasAllocatedToThisBlock: uint,
},
    gasAccountingParams: struct {
    SpeedLimitPerSecond: uint,
    GasPoolMax: uint,
    TxGasLimit: uint,
},
    globalL1GasPriceEstimator: struct {
    estimateWei: uint,
    fairGasPriceSender: address,
},
    globalInbox: any,
    globalInputQueue: struct {
    txQ: any,
    batchQ: any,
},
    globalBlockReceiptData: struct {
    data: any,
    statsThisBlock: any,
    statsAllTime: any,
    lastBlockNum: uint,
    nextSendTime: uint,
},
    logsQueuedForEndOfBlock: any,
    globalOutbox: struct {
    batch: any,
    batchNumber: uint,
    numInBatch: uint,
},
    moduleManager: any,
    _jump_table: any,
}
public impure func remapGlobalsForUpgrade(input_globals: GlobalsBeforeUpgrade) -> GlobalsAfterUpgrade {
    let unreachableMask = input_globals.unreachableMask;
    let gasAccountingInfo = input_globals.gasAccountingInfo;
    let globalInbox = input_globals.globalInbox;
    let globalInputQueue = input_globals.globalInputQueue;
    let inErrorHandler = input_globals.inErrorHandler;
    let logsQueuedForEndOfBlock = input_globals.logsQueuedForEndOfBlock;
    let globalOutbox = input_globals.globalOutbox;
    let globalCallStack = input_globals.globalCallStack;
    let globalAccountStore = input_globals.globalAccountStore;
    let globalBlockReceiptData = input_globals.globalBlockReceiptData;
    let globalChainParams = input_globals.globalChainParams;
    let moduleManager = input_globals.moduleManager;
    let globalIndexedAddressTable = input_globals.globalIndexedAddressTable;
    let upgradeInProgress = input_globals.upgradeInProgress;
    let gasAccountingParams = input_globals.gasAccountingParams;
    let globalCurrentTxRequest = input_globals.globalCurrentTxRequest;
    let globalL1GasPriceEstimator = input_globals.globalL1GasPriceEstimator;
    let blockhashes = input_globals.blockhashes;
    let evmOpJumpTable = input_globals.evmOpJumpTable;
    let _jump_table = (asm() GlobalsAfterUpgrade { rget })._jump_table;
    return struct {
        globalAccountStore: globalAccountStore,
        upgradeInProgress: upgradeInProgress,
        blockhashes: blockhashes,
        globalChainParams: globalChainParams,
        unreachableMask: unreachableMask,
        globalIndexedAddressTable: globalIndexedAddressTable,
        inErrorHandler: inErrorHandler,
        globalCallStack: globalCallStack,
        globalCurrentTxRequest: globalCurrentTxRequest,
        evmOpJumpTable: evmOpJumpTable,
        gasAccountingInfo: gasAccountingInfo,
        gasAccountingParams: gasAccountingParams,
        globalL1GasPriceEstimator: globalL1GasPriceEstimator,
        globalInbox: globalInbox,
        globalInputQueue: globalInputQueue,
        globalBlockReceiptData: globalBlockReceiptData,
        logsQueuedForEndOfBlock: logsQueuedForEndOfBlock,
        globalOutbox: globalOutbox,
        moduleManager: moduleManager,
        _jump_table: _jump_table,
    };
}
