//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use accounts::account_setContractInfo;

use chainParameters::chainParams_getOwner;
use chainParameters::chainParams_setOwner;
use chainParameters::chainParams_setSecondsPerSend;
use chainParameters::chainParams_get;
use chainParameters::chainParams_set;
use chainParameters::notifyParamsChanged;

use evmCallStack::EvmCallFrame;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCaller;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallStack_setAccount;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_stackDepth;
use evmCallStack::evmCallStack_returnFromCall;

use evmOps::evmOp_return;
use evmOps::evmOp_revert;
use evmOps::evmOp_revert_knownCodePc;

use pluggables::ModuleFunction;
use pluggables::installPluggable;
use pluggables::callPluggable;
use pluggables::bindContractAddressToPluggable;

use gasAccounting::gasAccounting_addToReserveInCurrentContext;
use gasAccounting::gasAccounting_setFeesEnabled;
use gasAccounting::gasAccounting_getFeeRecipients;
use gasAccounting::gasAccounting_setFeeRecipients;
use gasAccounting::setFairGasPriceSender;
use gasAccounting::setGasAccountingParams;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;

use std::avmcodebuilder::AvmCodeBuilder;
use std::avmcodebuilder::avmCodeBuilder_new;
use std::avmcodebuilder::avmCodeBuilder_append;
use std::avmcodebuilder::avmCodeBuilder_getCodeHash;
use std::avmcodebuilder::avmCodeBuilder_finish;

use std::bytestream::bytestream_new;

use std::storageMap::storageMap_new;


var upgradeInProgress: option<AvmCodeBuilder>;

public impure func arbowner_init() {
    upgradeInProgress = None<AvmCodeBuilder>;
}

public impure func arbowner_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        // make sure the caller is either address zero or the chain's owner
        let caller = evmCallFrame_getCaller(topFrame);
        if ( (caller != address(0)) && (caller != chainParams_getOwner()) ) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 0, 0, 0);
        }

        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 1, 0, 0);
        }
        let funcCode = asm(224, bytearray_get256(calldata, 0)) uint { shr };
        if (funcCode == 0xe3a0a148) {
            arbowner_giveOwnership(topFrame, calldata);
        } elseif (funcCode == 0x31acdf5e) {
            arbowner_startCodeUpload(topFrame, calldata);
        } elseif (funcCode == 0x56331f75) {
            arbowner_continueCodeUpload(topFrame, calldata);
        } elseif (funcCode == const::funcCode_ArbOwner_getUploadedCodeHash) {
            arbowner_getUploadedCodeHash(topFrame, calldata);
        } elseif (funcCode == const::funcCode_ArbOwner_finishCodeUploadAsArbosUpgrade) {
           arbowner_finishCodeUploadAsArbosUpgrade(topFrame, calldata);
        } elseif (funcCode == 0xf4f4e136) {
           arbowner_finishCodeUploadAsPluggable(topFrame, calldata);
        } elseif (funcCode == 0xc3bf429d) {
            arbowner_addToReserveFunds(topFrame, calldata);
        } elseif (funcCode == const::funcCode_ArbOwner_getChainParameter) {
            arbowner_getChainParameter(topFrame, calldata);
        } elseif (funcCode == const::funcCode_ArbOwner_setChainParameter) {
            arbowner_setChainParameter(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 2, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(22);
    }
}

impure func arbowner_giveOwnership(topFrame: EvmCallFrame, calldata: ByteArray) {  // (address)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 10, 0, 0);
    }
    chainParams_setOwner(address(bytearray_get256(calldata, 4)));
    evmOp_return(0, 0);
}

impure func arbowner_addToReserveFunds(topFrame: EvmCallFrame, calldata: ByteArray) { // () payable
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 50, 0, 0);
    }
    let callvalue = evmCallFrame_getCallvalue(topFrame);
    if (callvalue > 0) {
        gasAccounting_addToReserveInCurrentContext(callvalue);
    }
    evmOp_return(0, 0);
}

impure func arbowner_startCodeUpload(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 20, 0, 0);
    }
    upgradeInProgress = Some(avmCodeBuilder_new(false));
    evmOp_return(0, 0);
}

impure func arbowner_continueCodeUpload(topFrame: EvmCallFrame, calldata: ByteArray) { // (bytes)
    if (bytearray_size(calldata) < 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 30, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        let nbytes = bytearray_get256(calldata, 36);
        let marshalledCode = bytearray_extract(calldata, 68, nbytes);
        if let Some(updated) = avmCodeBuilder_append(upgrade, bytestream_new(marshalledCode)) {
            upgradeInProgress = Some(updated);
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 33, 0, 0);
    }
}

impure func arbowner_getUploadedCodeHash(topFrame: EvmCallFrame, calldata: ByteArray) { // () -> bytes32
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 140, 0, 0);
    }
    if let Some(upgrade) = upgradeInProgress {
        let codeHash = avmCodeBuilder_getCodeHash(upgrade);
        if (evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, uint(codeHash)))) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 141, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 142, 0, 0);
    }
}

impure func arbowner_finishCodeUploadAsArbosUpgrade(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 40, 0, 0);
    }

    // This can only be called directly from L1. Revert if called from L2.
    if (evmCallStack_stackDepth() != 1) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 41, 0, 0);
    }

    if let Some(upgrade) = upgradeInProgress {
        let requiredCodeHash = bytes32(bytearray_get256(calldata, 4));
        if (avmCodeBuilder_getCodeHash(upgrade) != requiredCodeHash) {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 42, 0, 0);
        }
        let upgradeCodePoint = unsafecast<impure func()>(avmCodeBuilder_finish(upgrade));
        upgradeInProgress = None<AvmCodeBuilder>;
        let _ = evmCallStack_returnFromCall(true, 0, 0, Some(upgradeCodePoint));
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 43, 0, 0);
    }
}

impure func arbowner_finishCodeUploadAsPluggable(topFrame: EvmCallFrame, calldata: ByteArray) { // ()
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 50, 0, 0);
    }
    let id = bytearray_get256(calldata, 4);
    let keepState = bytearray_get256(calldata, 36) != 0;
    if let Some(upgrade) = upgradeInProgress {
        if let Some(_) = installPluggable(id, unsafecast<ModuleFunction>(avmCodeBuilder_finish(upgrade)), keepState) {
            evmOp_return(0, 0);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 51, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 52, 0, 0);
    }
}

impure func arbowner_bindAddressToPluggable(topFrame: EvmCallFrame, calldata: ByteArray) { // (address, uint)
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 60, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let pluggableId = bytearray_get256(calldata, 36);

    let acct = evmCallFrame_getAccount(topFrame, addr);
    acct = bindContractAddressToPluggable(acct, addr, pluggableId);
    let success = evmCallStack_setAccount(addr, acct);
    if (success) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 61, 0, 0);
    }
}

impure func arbowner_getChainParameter(topFrame: EvmCallFrame, calldata: ByteArray) { // (uint) -> uint
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 70, 0, 0);
    }
    let paramId = bytearray_get256(calldata, 4);
    if let Some(value) = chainParams_get(paramId) {
        let mem = bytearray_set256(bytearray_new(0), 0, value);
        if (evmCallStack_setTopFrameMemory(mem)) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 71, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 72, 0, 0);
    }
}

impure func arbowner_setChainParameter(topFrame: EvmCallFrame, calldata: ByteArray) { // (uint, uint)
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(const::Address_ArbOwner), 80, 0, 0);
    }
    let paramId = bytearray_get256(calldata, 4);
    let newValue = bytearray_get256(calldata, 36);
    chainParams_set(paramId, newValue);
    notifyParamsChanged();
    evmOp_return(0, 0);
}







