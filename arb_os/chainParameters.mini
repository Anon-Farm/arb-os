//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type ByteArray;
import type MarshalledBytes;

import func bytearray_unmarshalBytes(mb: MarshalledBytes) -> ByteArray;
import func bytearray_get256(ba: ByteArray, offset: uint) -> uint;

import func evmCallStack_callHitError(reason: uint);

type ChainParams = struct {
    chainAddress: address,
    gracePeriodSec: uint,     // time validators are given to respond to an assertion
    arbGasSpeedLimit: uint,   // assumed max speed of nodes tracking this chain's VM
    maxExecutionSteps: uint,  // max number of steps in an assertion
    baseStake: uint,          // base stake of a validator, in wei
    owner: address            // owner of the chain, who has admin privileges (or zero if there is no owner)
}

var globalChainParams: option<ChainParams>;

public impure func chainParams_init() {
    globalChainParams = None<ChainParams>;
}

public impure func chainParams_gotParamsMessage(sender: address, data: MarshalledBytes) {
    if (globalChainParams == None<ChainParams>) {
        let ba = bytearray_unmarshalBytes(data);
        globalChainParams = Some(struct{
            chainAddress: sender,
            gracePeriodSec: bytearray_get256(ba, 0) / ticksPerSecond(),
            arbGasSpeedLimit: bytearray_get256(ba, 32) * ticksPerSecond(),
            maxExecutionSteps: bytearray_get256(ba, 2*32),
            baseStake: bytearray_get256(ba, 3*32),
            owner: address(bytearray_get256(ba, 4*32)),
        });
    }
}

func ticksPerSecond() -> uint {
    return 10000/135;   // 1000 ticks = 13.5 seconds
}

public impure func chainParams_chainAddress() -> address {
    if let Some(params) = globalChainParams {
        return params.chainAddress;
    } else {
        // If we get here, the chain never received its initialization message.
        evmCallStack_callHitError(15);
        panic;
    }
}

public impure func chainParams_chainId() -> uint {
    return uint(chainParams_chainAddress()) & 0xffffffffffff;  // chainID == low 48 bits of chainAddress
}

public impure func chainParams_speedLimitPerSecond() -> uint {
    if let Some(params) = globalChainParams {
        return params.arbGasSpeedLimit;
    } else {
        return 100000000;  // reasonable default
    }
}

public impure func chainParams_baseStake() -> uint {
    if let Some(params) = globalChainParams {
        return params.baseStake;
    } else {
        return 0;
    }
}
