//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type MarshalledBytes;

import func evmCallStack_callHitError(reason: uint);

type ChainParams = struct {
    chainAddress: address,
}

var globalChainParams: option<ChainParams>;

public impure func chainParams_init() {
    globalChainParams = None<ChainParams>;
}

public impure func chainParams_gotParamsMessage(sender: address, data: MarshalledBytes) {
    if (globalChainParams == None<ChainParams>) {
        globalChainParams = Some(struct{
            chainAddress: sender,
        });
    }
}

public impure func chainParams_chainAddress() -> address {
    if let Some(params) = globalChainParams {
        return params.chainAddress;
    } else {
        // If we get here, the chain never received its initialization message.
        evmCallStack_callHitError(15);
        panic;
    }
}

public impure func chainParams_chainId() -> uint {
    return uint(chainParams_chainAddress()) & 0xffffffffffff;  // chainID == low 48 bits of chainAddress
}

public impure func chainParams_speedLimitPerSecond() -> uint {
    return 100000000;  //TODO: get this from the initialization message, once we merge the branch that parses it
}
