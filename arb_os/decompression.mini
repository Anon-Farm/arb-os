//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

import type ByteArray;
import type MarshalledBytes;
import func bytearray_new(unused: uint) -> ByteArray;
import func bytearray_marshalFull(ba: ByteArray) -> MarshalledBytes;

import type ByteStream;
import func bytestream_getByte(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_get256(bs: ByteStream) -> option<(ByteStream, uint)>;
import func bytestream_getRemainingBytes(bs: ByteStream) -> ByteArray;
import func rlp_decodeUint(bs: ByteStream) -> option<(ByteStream, uint)>;

import type ExpandingIntArray;
import func expandingIntArray_new() -> ExpandingIntArray;
import func expandingIntArray_size(arr: ExpandingIntArray) -> uint;
import func expandingIntArray_get(arr: ExpandingIntArray, index: uint) -> uint;
import func expandingIntArray_set(arr: ExpandingIntArray, index: uint, val: uint) -> ExpandingIntArray;

import type Queue;
import func queue_new() -> Queue;
import func queue_put(q: Queue, item: any) -> Queue;

import type Account;
import type AccountStore;
import impure func getGlobalAccountStore() -> AccountStore;
import func accountStore_get(acctStore: AccountStore, addr: address) -> Account;
import func account_getNextSeqNum(account: Account) -> uint;

import func rlp_decodeAddress(bs: ByteStream) -> option<(ByteStream, address)>;
import func rlp_decodeUint(bs: ByteStream) -> option<(ByteStream, uint)>;

// This structure describes an incoming request.
// It is declared identically in inbox.mini and elsewhere
type IncomingRequest = struct {
    kind: uint,               // type of message
    blockNumber: uint,        // block number of the L1 block
    timestamp: uint,          // timestamp of the L1 block
    sender: address,          // address of the sender
    requestId: uint,
    msgData: MarshalledBytes  // kind-specific data, as a marshalled bytearray
}

type IndexedAddressTable = struct {
    byIndex: ExpandingIntArray,
    byAddress: map<address, uint>,
    size: uint
}

var globalIndexedAddressTable: IndexedAddressTable;

public impure func decompression_init() {
    globalIndexedAddressTable = addressTable_new();
}

public func addressTable_new() -> IndexedAddressTable {
    return struct {
        byIndex: expandingIntArray_new(),
        byAddress: newmap<address, uint>,
        size: 0
    };
}

public func addressTable_size(iat: IndexedAddressTable) -> uint {
    return iat.size;
}

public func addressTable_getByIndex(iat: IndexedAddressTable, index: uint) -> address {  // returns zero if not in table
    return address(expandingIntArray_get(iat.byIndex, index));
}

public func addressTable_getByAddress(iat: IndexedAddressTable, addr: address) -> option<uint> {
    return iat.byAddress[addr];
}

public func addressTable_getByAddressAlloc(iat: IndexedAddressTable, addr: address) -> (IndexedAddressTable, uint) {
    if let Some(val) = iat.byAddress[addr] {
        return (iat, val);
    } else {
        return (
            iat with {
                byIndex: expandingIntArray_set(iat.byIndex, iat.size, uint(addr))
            } with {
                byAddress: iat.byAddress with {
                    [addr] = iat.size
                }
            } with {
                size: 1+iat.size
            },
            iat.size
        );
    }
}

public impure func decompressAddress(
    stream: ByteStream,
) -> option<(ByteStream, address)> {
    // Returns None if insufficient data in stream
    // A compressed address is one of three things:
    //   * an RLP-encoding of a value 8 bytes in length or shorter, which is interpreted as an index into
    //           the IndexedAddressTable, or
    //   * a single byte 0xff followed by an RLP encoding of an address that is 8 bytes in length or shorter, or
    //   * an RLP-encoding of a value longer than 8 bytes, which is interpreted as an address.
    // In the last two cases, the address is added to the globalIndexedAddressTable if it is not already there

    let (ustr, firstByte) = bytestream_getByte(stream)?;
    if (firstByte == 0xff) {
        let (ustr, addr) = rlp_decodeAddress(ustr)?;
        let (iat, _) = addressTable_getByAddressAlloc(globalIndexedAddressTable, addr);
        globalIndexedAddressTable = iat;
        return Some((ustr, addr));
    } else {
        // don't update stream, because we want to re-start from the beginning
        let (ustr, decodedUint) = rlp_decodeUint(stream)?;
        if (decodedUint < 0x10000000000000000) {
            return Some((ustr, addressTable_getByIndex(globalIndexedAddressTable, decodedUint)));
        } else {
            let addr = address(decodedUint);
            let (iat, _) = addressTable_getByAddressAlloc(globalIndexedAddressTable, addr);
            globalIndexedAddressTable = iat;
            return Some((ustr, addr));
        }
    }
}

public func decompressTokenAmount(bs: ByteStream) -> option<(ByteStream, uint)> {
    let (ustr, base) = rlp_decodeUint(bs)?;
    if (base == 0) {
        return Some((ustr, 0));
    }
    let (ustr, sh) = bytestream_getByte(ustr)?;
    return Some((ustr, base * asm(sh, 10) uint { exp }));
}

// This is a copy of a struct defined in ArbOS/signedTx.mini.
// The declaration here must remain consistent with the one there.
type SignedTx = struct {
    seqNum: uint,
    gasPrice: uint,
    gasLimit: uint,
    to: address,
    value: uint,
    data: ByteArray,
    v: uint,
    r: uint,
    s: uint
}

impure func decompressSignedTx(
    stream: ByteStream,
    sender: address
) -> option<(ByteStream, SignedTx)> {
    let (ustr, seqNumByte) = bytestream_getByte(stream)?;
    stream = ustr;
    let dbSeqNum = account_getNextSeqNum(
        accountStore_get(
            getGlobalAccountStore(),
            address(sender)
        )
    );
    let seqNum = (dbSeqNum & ~0xff) + seqNumByte;
    if (seqNum < dbSeqNum) {
        seqNum = seqNum + 256;
    }

    let (ustr, gasPrice) = rlp_decodeUint(stream)?;
    stream = ustr;

    let (ustr, gasLimit) = rlp_decodeUint(stream)?;
    stream = ustr;

    let (ustr, toAddr) = decompressAddress(stream)?;
    stream = ustr;

    let (ustr, value) = decompressTokenAmount(stream)?;
    stream = ustr;

    let (ustr, v) = rlp_decodeUint(stream)?;
    stream = ustr;

    let (ustr, r) = bytestream_get256(stream)?;
    stream = ustr;

    let (ustr, s) = bytestream_get256(stream)?;
    stream = ustr;

    let calldata = bytestream_getRemainingBytes(stream);

    return Some(
        (
            stream,
            struct {
                seqNum: seqNum,
                gasPrice: gasPrice,
                gasLimit: gasLimit,
                to: toAddr,
                value: value,
                data: calldata,
                v: v,
                r: r,
                s: s
            }
        )
    );
}

