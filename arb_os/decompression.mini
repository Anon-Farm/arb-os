//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use chainParameters::chainParams_chainId;

use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_copy;
use std::bytearray::bytearray_marshalFull;

use std::bytestream::ByteStream;
use std::bytestream::bytestream_new;
use std::bytestream::bytestream_getByte;
use std::bytestream::bytestream_get256;
use std::bytestream::bytestream_getN;
use std::bytestream::bytestream_bytesReadSoFar;
use std::bytestream::bytestream_bytesRemaining;
use std::bytestream::bytestream_getRemainingBytes;

use std::expandingIntArray::ExpandingIntArray;
use std::expandingIntArray::expandingIntArray_new;
use std::expandingIntArray::expandingIntArray_size;
use std::expandingIntArray::expandingIntArray_get;
use std::expandingIntArray::expandingIntArray_set;

use std::keccak::keccak256;

use std::queue::Queue;
use std::queue::queue_new;
use std::queue::queue_put;

use accounts::Account;
use accounts::AccountStore;
use accounts::getGlobalAccountStore;
use accounts::accountStore_get;
use accounts::account_getNextSeqNum;

use std::rlp::rlp_decodeAddress;
use std::rlp::rlp_decodeUint;
use std::rlp::rlp_encodeMessageInfo;

use signedTx::recoverSigner;

use inbox::IncomingRequest;
use messages::TxRequestData;
use signedTx::SignedTx;

type IndexedAddressTable = struct {
    byIndex: ExpandingIntArray,
    byAddress: map<address, uint>,
    size: uint
}

var globalIndexedAddressTable: IndexedAddressTable;

public impure func decompression_init() {
    globalIndexedAddressTable = addressTable_new();
}

public impure func getGlobalAddressTable() -> IndexedAddressTable {
    return globalIndexedAddressTable;
}

public impure func setGlobalAddressTable(gat: IndexedAddressTable) {
    globalIndexedAddressTable = gat;
}

public func addressTable_new() -> IndexedAddressTable {
    return struct {
        byIndex: expandingIntArray_new(),
        byAddress: newmap<address, uint> with { [address(0)] = 0 },
        size: 1
    };
}

public func addressTable_size(iat: IndexedAddressTable) -> uint {
    return iat.size;
}

public func addressTable_getByIndex(iat: IndexedAddressTable, index: uint) -> address {  // returns zero if not in table
    return address(expandingIntArray_get(iat.byIndex, index));
}

public func addressTable_getByAddress(iat: IndexedAddressTable, addr: address) -> option<uint> {
    return iat.byAddress[addr];
}

public func addressTable_getByAddressAlloc(iat: IndexedAddressTable, addr: address) -> (IndexedAddressTable, uint) {
    if let Some(val) = iat.byAddress[addr] {
        return (iat, val);
    } else {
        // allocate space in the table
        return (
            iat with {
                byIndex: expandingIntArray_set(iat.byIndex, iat.size, uint(addr))
            } with {
                byAddress: iat.byAddress with {
                    [addr] = iat.size
                }
            } with {
                size: 1+iat.size
            },
            iat.size
        );
    }
}

public impure func decompressAddress(
    stream: ByteStream,
) -> option<(ByteStream, address)> {
    // Returns None if insufficient data in stream
    // A compressed address is one of three things:
    //   * a single byte 0x80, which is interpreted as the null address
    //   * an RLP-encoding of a value 1-19 bytes in length, which is interpreted as an index into
    //           the IndexedAddressTable, or
    //   * an RLP-encoding of a 20-byte value which is interpreted as an address.
    // In the last case, the address is added to the globalIndexedAddressTable if it is not already there

    let (ustr, firstByte) = bytestream_getByte(stream)?;
    if (firstByte == 0x80) {
        return Some((ustr, address(0)));
    } elseif (firstByte < 0x80 + 20) {
        // don't update stream, because we want to re-start from the beginning
        let (ustr, decodedUint) = rlp_decodeUint(stream)?;
        return Some((ustr, addressTable_getByIndex(globalIndexedAddressTable, decodedUint)));
    } else {
        let (ustr, addr) = rlp_decodeAddress(stream)?;
        let (iat, _) = addressTable_getByAddressAlloc(globalIndexedAddressTable, addr);
        globalIndexedAddressTable = iat;
        return Some((ustr, addr));
    }
}

public func decompressTokenAmount(bs: ByteStream) -> option<(ByteStream, uint)> {
    let (ustr, base) = rlp_decodeUint(bs)?;
    if (base == 0) {
        return Some((ustr, 0));
    }
    let (ustr, sh) = bytestream_getByte(ustr)?;
    return Some((ustr, base * asm(10, sh) uint { exp }));
}

public impure func decompressAndVerifyEcdsaSignedTx(
    ba: ByteArray,
    originalRequest: IncomingRequest
) -> option<TxRequestData> {
    let sz = bytearray_size(ba);
    if (sz <= 66) {
        return None;
    }

    let r = bytearray_get256(ba, sz-65);
    let s = bytearray_get256(ba, sz-33);
    let v = bytearray_getByte(ba, sz-1);
    let body = bytearray_extract(ba, 1, sz-66);

    let (_, txRequest) = decompressTx(bytestream_new(body), None<address>)?;

    let seqNum = 0;
    if let Some(sn) = txRequest.seqNum {
        seqNum = sn;
    }

    if (v < 2) {
        v = 35 + 2 * chainParams_chainId() + (1 - (v % 2));
    }
    let tx = struct {
        seqNum: seqNum,
        gasPrice: txRequest.gasPrice,
        gasLimit: txRequest.maxGas,
        to: txRequest.calleeAddr,
        value: txRequest.value,
        data: txRequest.calldata,
        v: v,
        r: r,
        s: s
    };
    let signer = recoverSigner(tx)?;
    let encodedMessage = rlp_encodeMessageInfo(
        tx.seqNum,
        tx.gasPrice,
        tx.gasLimit,
        tx.to,
        tx.value,
        tx.data,
        tx.v,
        tx.r,
        tx.s,
    );

    return Some(
        txRequest with {
            caller: signer
        } with {
            incomingRequest: originalRequest with {
                requestId: uint(keccak256(encodedMessage, 0, bytearray_size(encodedMessage)))
            } with {
                sender: signer
            } with {
                msgData: bytearray_marshalFull(
                    bytearray_copy(
                        encodedMessage,
                        0,
                        bytearray_setByte(bytearray_new(0), 0, 4),
                        1,
                        bytearray_size(encodedMessage)
                    )
                )
            }
        }
    );
}

impure func decompressTx(
    stream: ByteStream,
    maybeSender: option<address>
) -> option<(ByteStream, TxRequestData)> {
    // decompress a compressed transaction, reading it from ByteStream
    // return None if insufficient data in the ByteStream
    // the TxRequestData we return will have an invalid dummy value in the incomingRequest field,
    //         and we'll assume the caller will supply that later
    //
    // caller will tell us the tx sender if it knows the sender
    // (knowing the sender lets us compress the sequence number more efficiently)
    // if we aren't given the sender address, we'll return a dummy value in that slot of the TxRequestData,
    //         and assume the caller will supply it later

    let sender = address(0);
    let seqNum = 0;
    if let Some(senderAddr) = maybeSender {
        sender = senderAddr;
        let (ustr, seqNumByte) = bytestream_getByte(stream)?;
        stream = ustr;
        let dbSeqNum = account_getNextSeqNum(
            accountStore_get(
                getGlobalAccountStore(),
                address(sender)
            )
        );
        seqNum = (dbSeqNum & ~0xff) | seqNumByte;
        if (seqNum < dbSeqNum) {
            seqNum = seqNum + 256;
        }
    } else {
        let (ustr, rawSeqNum) = rlp_decodeUint(stream)?;
        stream = ustr;
        seqNum = rawSeqNum;
    }

    let (ustr, gasPrice) = rlp_decodeUint(stream)?;
    stream = ustr;

    let (ustr, gasLimit) = rlp_decodeUint(stream)?;
    stream = ustr;

    let (ustr, toAddr) = decompressAddress(stream)?;
    stream = ustr;

    let (ustr, value) = decompressTokenAmount(stream)?;
    stream = ustr;

    let calldata = bytestream_getRemainingBytes(stream);

    return Some((
        stream,
        struct {
            maxGas: gasLimit,
            gasPrice: gasPrice,
            seqNum: Some(seqNum),
            caller: sender,
            calleeAddr: toAddr,
            value: value,
            calldata: calldata,
            nonMutating: false,
            incomingRequest: unsafecast<IncomingRequest>(0),  // caller will fill this in
        }
    ));
}

//This function is necessary because there is currently bug in the compiler that will occasionally corrupt the last
//function in a module, so including this function prevents the bug from affecting decompressTx
func dumbHack() {
    let x = 4;
    return;
}
