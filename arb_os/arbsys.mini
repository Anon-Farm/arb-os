//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use evmCallStack::EvmCallFrame;
use accounts::Account;
use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;
use std::stack::Stack;
import type AccountStore;
import type ByteStream;

use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setAccount;
use evmCallStack::evmCallStack_getTopFrameMemoryOrDie;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_cloneContract;
use evmCallStack::evmCallStack_callHitError;
use evmCallStack::evmCallStack_addEvmLogToCurrent;

use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallFrame_runningAsAddress;
use evmCallStack::evmCallFrame_runningAsAccount;
use evmCallStack::evmCallFrame_getParent;
use evmCallStack::evmCallFrame_getCaller;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownCodePc;

use accounts::account_getAddress;
use accounts::account_getNextSeqNum;
use accounts::account_getStorageCell;
use accounts::account_deductFromEthBalance;
use accounts::account_setBlsKey;
use accounts::account_getBlsKey;
use accounts::account_getAggregatorDecompressionState;
use accounts::account_setAggregatorDecompressionState;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_marshalFull;
use std::bytearray::bytearray_extract;

use std::bytestream::bytestream_new;
use std::bytestream::bytestream_bytesReadSoFar;

use inbox::inbox_currentBlockNumber;
use inbox::inbox_currentTimestamp;

import func bytestream_new(ba: ByteArray) -> ByteStream;

import func stack_pop(stack: Stack) -> option<(Stack, any)>;

import impure func inbox_currentBlockNumber() -> uint;
import impure func inbox_currentTimestamp() -> uint;

use output::queueMessageForSend;

use decompression::getGlobalAddressTable;
use decompression::setGlobalAddressTable;
use decompression::addressTable_size;
use decompression::addressTable_getByAddressAlloc;
use decompression::addressTable_getByAddress;
use decompression::addressTable_getByIndex;
use decompression::decompressAddress;
use decompression::getFromFunctionTable;
use decompression::functionTableSize;
use decompression::getFromFunctionTable;

use std::rlp::rlp_encodeUint;
use std::rlp::rlp_encodeAddress;

use std::bls::bls_makeKey;
use std::bls::bls_marshalPublicKey;

use decompression::parseAggregatorFunctionTable;

import impure func pcTableForCode(code: ByteArray) -> option<Stack>;


public impure func arbsys_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert_knownCodePc(address(100), 0, 0, 0);
        }
        let funcCode = getFuncCode(calldata);
        if (funcCode == 0xa1db9782) {
            arbsys_withdrawErc20(topFrame, calldata);
        } elseif(funcCode == 0xf3e414f8) {
            arbsys_withdrawErc721(topFrame, calldata);
        } elseif(funcCode == 0x25e16063) {
            arbsys_withdrawEth(topFrame, calldata);
        } elseif(funcCode == 0x23ca0cd2) {
            arbsys_getTransactionCount(topFrame, calldata);
        } elseif(funcCode == 0xa169625f) {
            arbsys_getStorageAt(topFrame, calldata);
        } elseif(funcCode == 0xaca1dc65) {
            arbsys_addressTable_register(topFrame, calldata);
        } elseif(funcCode == 0x8ee24222) {
            arbsys_addressTable_lookup(topFrame, calldata);
        } elseif(funcCode == 0x43683c1b) {
            arbsys_addressTable_addressExists(topFrame, calldata);
        } elseif(funcCode == 0x03092fdb) {
            arbsys_addressTable_size(topFrame, calldata);
        } elseif(funcCode == 0x3dcfdac7) {
            arbsys_getPcTable(topFrame, calldata);
        } elseif(funcCode == 0x8ee24222) {
            arbsys_addressTable_lookup(topFrame, calldata);
        } elseif(funcCode == 0x4c352200) {
            arbsys_addressTable_lookupIndex(topFrame, calldata);
        } elseif(funcCode == 0xbe05f2b9) {
            arbsys_addressTable_decompress(topFrame, calldata);
        } elseif(funcCode == 0x2a890b98) {
            arbsys_addressTable_compress(topFrame, calldata);
        } elseif(funcCode == 0x1ff548ca) {
            arbsys_registerBlsKey(topFrame, calldata);
        } elseif(funcCode == 0x647e0e98) {
            arbsys_getBlsPublicKey(topFrame, calldata);
        } elseif(funcCode == 0xb7cf9527) {
            arbsys_uploadFunctionTable(topFrame, calldata);
        } elseif(funcCode == 0x1221C896) {
            arbsys_functionTableSize(topFrame, calldata);
        } elseif(funcCode == 0xd6ed0f56) {
            arbsys_functionTableGet(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert_knownCodePc(address(100), 1, 0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(14);
    }
}

func getFuncCode(ba: ByteArray) -> uint {
    return asm(224, bytearray_get256(ba, 0)) uint { shr };
}

impure func arbsys_withdrawErc20(topFrame: EvmCallFrame, calldata: ByteArray) { // (address token, uint amount) -> nil
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(100), 10, 0, 0);
    }
    let tokenAddr = evmCallFrame_getCaller(topFrame);
    let destAddr = address(bytearray_get256(calldata, 4));
    let amount = bytearray_get256(calldata, 36);

    queueMessageForSend(
        1,
        address(0),
        bytearray_set256(
            bytearray_set256(
                bytearray_set256(bytearray_new(0), 0, uint(tokenAddr)),
                32,
                uint(destAddr),
            ),
            64,
            amount
        ),
    );
    if (evmCallStack_addEvmLogToCurrent(
        (
            address(100),  // addEvmLogToCurrent will fill this in
            bytearray_marshalFull(bytearray_set256(bytearray_new(0), 0, amount)),
            0x2fbb3e8dc2807d6a61feb98fc2120153f77b2c0d25ef6272e1756935dd62c847, // ERC20Withdrawal(address,address,uint256)
            uint(destAddr),
            uint(tokenAddr),
        )
    ) == Some(())) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(100), 11, 0, 0);
    }
}

impure func arbsys_withdrawErc721(topFrame: EvmCallFrame, calldata: ByteArray) { // (address token, uint id) -> nil
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(100), 20, 0, 0);
    }
    let tokenAddr = evmCallFrame_getCaller(topFrame);
    let destAddr = address(bytearray_get256(calldata, 4));
    let id = bytearray_get256(calldata, 36);

    queueMessageForSend(
        2,
        address(0),
        bytearray_set256(
            bytearray_set256(
                bytearray_set256(bytearray_new(0), 0, uint(tokenAddr)),
                32,
                uint(destAddr),
            ),
            64,
            id
        ),
    );
    if (evmCallStack_addEvmLogToCurrent(
        (
            address(100),  // addEvmLogToCurrent will fill this in
            bytearray_marshalFull(bytearray_new(0)),
            0xdce1abc7607cf83c96953308072c045ec35d02fbf5777e7d0ec8b102cd89ff81, // ERC721Withdrawal(address,address,uint256)
            uint(destAddr),
            uint(tokenAddr),
            id,
        )
    ) == Some(())) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(100), 21, 0, 0);
    }
}

impure func arbsys_withdrawEth(topFrame: EvmCallFrame, calldata: ByteArray) { // (address payee) payable -> nil
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 30, 0, 0);
    }
    let senderAddr = evmCallFrame_getCaller(topFrame);
    let destAddr = address(bytearray_get256(calldata, 4));
    let amount = evmCallFrame_getCallvalue(topFrame);

    let arbSysAddr = evmCallFrame_runningAsAddress(topFrame);
    let arbSysAccount = evmCallFrame_getAccount(topFrame, arbSysAddr);
    if let Some(updatedAcct) = account_deductFromEthBalance(arbSysAccount, amount) {
        if ( ! evmCallStack_setAccount(arbSysAddr, updatedAcct)) {
            evmOp_revert_knownCodePc(address(100), 31, 0, 0);
        }
        let messageData = bytearray_extract(calldata, 4, 32);
        messageData = bytearray_set256(messageData, 32, amount);
        queueMessageForSend(0, senderAddr, messageData);
        if (evmCallStack_addEvmLogToCurrent(
            (
                address(100),  // addEvmLogToCurrent will fill this in
                bytearray_marshalFull(bytearray_set256(bytearray_new(0), 0, amount)),
                0xc32d3c7eb0f275cbb5b72b3d3c688269430f30e5b9bb36980396edd9101c615c, // EthWithdrawal(address,uint256)
                uint(destAddr),
            )
        ) == Some(())) {
            evmOp_return(0, 0);
        }
    }

    evmOp_revert_knownCodePc(address(100), 32, 0, 0);
}

impure func arbsys_getTransactionCount(topFrame: EvmCallFrame, calldata: ByteArray) { // (address account) -> uint
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 40, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let seqNum = account_getNextSeqNum(evmCallFrame_getAccount(topFrame, addr));
    let updatedMem = bytearray_set256(
         evmCallStack_getTopFrameMemoryOrDie(),
         0,
         seqNum
     );
    let success = evmCallStack_setTopFrameMemory(updatedMem);
    if (success) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(100), 41, 0, 0);
    }
}

impure func arbsys_getStorageAt(topFrame: EvmCallFrame, calldata: ByteArray) {
    let senderAddr = evmCallFrame_getCaller(topFrame);
    if (senderAddr != address(0)) {
        evmOp_revert_knownCodePc(address(100), 50, 0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    let offset = bytearray_get256(calldata, 4+32);
    let acct = evmCallFrame_getAccount(topFrame, addr);

    let ret = 0;
    if let Some(val) = account_getStorageCell(acct, offset) {
        ret = val;
    }

    let updatedMem = bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, ret);
    let success = evmCallStack_setTopFrameMemory(updatedMem);

    if (success) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(100), 51, 0, 0);
    }
}

impure func arbsys_getPcTable(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) <= 4) {
        evmOp_revert_knownCodePc(address(100), 60, 0, 0);
    }
    if let Some(pcTable) = pcTableForCode(bytearray_extract(calldata, 4, bytearray_size(calldata)-4)) {
        let mem = evmCallStack_getTopFrameMemoryOrDie();
        mem = bytearray_set256(mem, 0, 64);
        let offset = 64;
        loop {
            if let Some(res) = stack_pop(pcTable) {
                let (upct, item) = res;
                pcTable = upct;
                let (evmPc, avmCpHash) = unsafecast<(uint, bytes32)>(item);
                mem = bytearray_set256(
                    bytearray_set256(mem, offset, evmPc),
                    offset+32,
                    uint(avmCpHash),
                );
                offset = offset + 64;
            } else {
                // done reading data, finish building returndata then return
                mem = bytearray_set256(mem, 32, (offset-64)/32);
                evmOp_return(0, offset);
            }
        }
    } else {
        evmOp_revert_knownCodePc(address(100), 61, 0, 0);
    }
}

impure func arbsys_addressTable_register(topFrame: EvmCallFrame, calldata: ByteArray) { // (address addr) -> uint
// return the index of addr in the address table
// if addr isn't in the table already, add it to the table and return its new index
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 110, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let (atab, idx) = addressTable_getByAddressAlloc(getGlobalAddressTable(), addr);
    setGlobalAddressTable(atab);
    if (evmCallStack_setTopFrameMemory(bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, idx))) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(100), 111, 0, 0);
    }
}

impure func arbsys_addressTable_lookup(topFrame: EvmCallFrame, calldata: ByteArray) {  // (address addr) -> uint
// return the index of addr in the address table; revert if it's not in the table
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 120, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    if let Some(idx) = addressTable_getByAddress(getGlobalAddressTable(), addr) {
        if (evmCallStack_setTopFrameMemory(bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, idx))) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(100), 121, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(100), 122, 0, 0);
    }
}

impure func arbsys_addressTable_addressExists(topFrame: EvmCallFrame, calldata: ByteArray) { // (address addr) -> bool
// return true iff addr is in the address table
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 130, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let inTable = 0;
    if let Some(_) = addressTable_getByAddress(getGlobalAddressTable(), addr) {
        inTable = 1;
    }

    if (evmCallStack_setTopFrameMemory(bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, inTable))) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(100), 131, 0, 0);
    }
}

impure func arbsys_addressTable_size(topFrame: EvmCallFrame, calldata: ByteArray) { // () -> uint
// return the number of items in the address table
    if (bytearray_size(calldata) != 4) {
        evmOp_revert_knownCodePc(address(100), 140, 0, 0);
    }
    let size = addressTable_size(getGlobalAddressTable());
    if (evmCallStack_setTopFrameMemory(bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, size))) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert_knownCodePc(address(100), 141, 0, 0);
    }
}

impure func arbsys_addressTable_lookupIndex(topFrame: EvmCallFrame, calldata: ByteArray) {  // (uint index) -> address
// return the address at slot index in the address table, or revert if index is beyond the end of the table
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 150, 0, 0);
    }
    let index = bytearray_get256(calldata, 4);
    if let Some(addr) = addressTable_getByIndex(getGlobalAddressTable(), index) {
        if (evmCallStack_setTopFrameMemory(bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, uint(addr)))) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert_knownCodePc(address(100), 151, 0, 0);
        }
    } else {
        evmOp_revert_knownCodePc(address(100), 152, 0, 0);
    }
}

impure func arbsys_addressTable_decompress(topFrame: EvmCallFrame, calldata: ByteArray) {  // (bytes buf, uint offset) -> (address, uint)
    // read a compressed address from buf at offset, return (resulting address, updated offset)
    // revert if buf is too short
    if (bytearray_size(calldata) < 4+4*32) {
        evmOp_revert_knownCodePc(address(100), 160, 0, 0);
    }
    let offset = bytearray_get256(calldata, 36);
    let bytesLen = bytearray_get256(calldata, 68);
    if (offset >= bytesLen) {
        evmOp_revert_knownCodePc(address(100), 161, 0, 0);  // buffer is too short
    }
    let stream = bytestream_new(bytearray_extract(calldata, 100+offset, bytesLen-offset));
    if let Some(res) = decompressAddress(stream) {
        let (ustr, addr) = res;
        stream = ustr;
        if (evmCallStack_setTopFrameMemory(
            bytearray_set256(
                bytearray_set256(
                    evmCallStack_getTopFrameMemoryOrDie(),
                    0,
                    uint(addr)
                ),
                32,
                offset + bytestream_bytesReadSoFar(stream),
            )
        )) {
            evmOp_return(0, 64);
        } else {
            evmOp_revert_knownCodePc(address(100), 162, 0, 0);
        }
    } else {
        // input was too short
        evmOp_revert_knownCodePc(address(100), 163, 0, 0);
    }
}

impure func arbsys_addressTable_compress(topFrame: EvmCallFrame, calldata: ByteArray) { // (address addr) -> bytes
// compress addr, based on the current address table contents, and return the resulting buffer
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 100, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let compressedData = bytearray_new(0);
    let compressedDataLen = 0;
    if let Some(index) = addressTable_getByAddress(getGlobalAddressTable(), addr) {
        let (ba, sz) = rlp_encodeUint(index, compressedData, 0);
        compressedData = ba;
        compressedDataLen = sz;
    } else {
        let (ba, sz) = rlp_encodeAddress(addr, compressedData, 0);
        compressedData = ba;
        compressedDataLen = sz;
    }
    let mem = bytearray_set256(
        bytearray_set256(
            bytearray_set256(
                evmCallStack_getTopFrameMemoryOrDie(),
                0,
                32
            ),
            32,
            compressedDataLen
        ),
        64,
        bytearray_get256(compressedData, 0)
    );

    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, 96);
    } else {
        evmOp_revert_knownCodePc(address(100), 101, 0, 0);
    }
}

impure func arbsys_registerBlsKey(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 4+32*4) {
        evmOp_revert_knownCodePc(address(100), 170, 0, 0);
    }

    let x0 = bytearray_get256(calldata, 4);
    let x1 = bytearray_get256(calldata, 4+32);
    let y0 = bytearray_get256(calldata, 4+32*2);
    let y1 = bytearray_get256(calldata, 4+32*3);
    let maybeBlsKey = bls_makeKey(x0, x1, y0, y1);

    let caller = evmCallFrame_getCaller(topFrame);
    let acct = evmCallFrame_getAccount(topFrame, caller);
    if (evmCallStack_setAccount(caller, account_setBlsKey(acct, maybeBlsKey))) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(100), 171, 0, 0);
    }
}

impure func arbsys_getBlsPublicKey(topFrame: EvmCallFrame, calldata: ByteArray) { // (address) -> (uint, uint, uint, uint)
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 180, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let maybeBlsKey = account_getBlsKey(evmCallFrame_getAccount(topFrame, addr));

    let mem = evmCallStack_getTopFrameMemoryOrDie();
    if let Some(blsKey) = maybeBlsKey {
        mem = bls_marshalPublicKey(blsKey, mem, 0);
    } else {
        mem = bytearray_set256(
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(mem, 0, ~0),
                    32,
                    ~0
                ),
                2*32,
                ~0
            ),
            3*32,
            ~0
        );
    }

    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, 4*32);
    } else {
        evmOp_revert_knownCodePc(address(100), 181, 0, 0);
    }
}

impure func arbsys_uploadFunctionTable(topFrame: EvmCallFrame, calldata: ByteArray) { // (bytes)
    if (bytearray_size(calldata) < (4+2*32)) {
        evmOp_revert_knownCodePc(address(100), 190, 0, 0);
    }

    let callerAddr = evmCallFrame_getCaller(topFrame);
    let nbytes = bytearray_get256(calldata, 4+32);

    let tableData = bytearray_extract(calldata, 4+2*32, nbytes);

    let account = evmCallFrame_getAccount(topFrame, callerAddr);
    account = account_setAggregatorDecompressionState(
        account,
        parseAggregatorFunctionTable(
            account_getAggregatorDecompressionState(account),
            tableData,
        ),
    );
    if (evmCallStack_setAccount(callerAddr, account)) {
        evmOp_return(0, 0);
    } else {
        evmOp_revert_knownCodePc(address(100), 191, 0, 0);
    }
}

impure func arbsys_functionTableSize(topFrame: EvmCallFrame, calldata: ByteArray) { // (address) -> uint
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownCodePc(address(100), 200, 0, 0);
    }

    if let Some(size) = functionTableSize(address(bytearray_get256(calldata, 4))) {
        if (evmCallStack_setTopFrameMemory(bytearray_set256(bytearray_new(0), 0, size))) {
            evmOp_return(0, 32);
        }
    }

        evmOp_revert_knownCodePc(address(100), 201, 0, 0);
}

impure func arbsys_functionTableGet(topFrame: EvmCallFrame, calldata: ByteArray) { // (address, uint) -> (uint, bool, uint)
    if (bytearray_size(calldata) != 68) {
        evmOp_revert_knownCodePc(address(100), 210, 0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    let index = bytearray_get256(calldata, 36);

    if let Some(res) = getFromFunctionTable(addr, index) {
        let (funcCode, isPayable, gasLimit) = res;
        if (evmCallStack_setTopFrameMemory(
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(
                        bytearray_new(0),
                        0,
                        funcCode
                    ),
                    32,
                    uint(isPayable),
                ),
                64,
                gasLimit,
            )
        )) {
            evmOp_return(0, 96);
        }
    }

    evmOp_revert_knownCodePc(address(100), 211, 0, 0);
}

