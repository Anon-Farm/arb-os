//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use evmCallStack::EvmCallFrame;
use accounts::Account;
use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;

use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setAccount;
use evmCallStack::evmCallStack_getTopFrameMemoryOrDie;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallStack_cloneContract;
use evmCallStack::evmCallStack_callHitError;

use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallFrame_getCallvalue;
use evmCallStack::evmCallFrame_getAccount;
use evmCallStack::evmCallFrame_runningAsAddress;
use evmCallStack::evmCallFrame_runningAsAccount;
use evmCallStack::evmCallFrame_getParent;
use evmCallStack::evmCallFrame_getCaller;

use evmOps::evmOp_return;
use evmOps::evmOp_revert;

use accounts::account_getAddress;
use accounts::account_getNextSeqNum;
use accounts::account_getStorageCell;
use accounts::account_deductFromEthBalance;

use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;
use std::bytearray::bytearray_marshalFull;

use inbox::inbox_currentBlockNumber;
use inbox::inbox_currentTimestamp;

use output::queueMessageForSend;


public impure func arbsys_txcall() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert(0, 0);
        }
        let funcCode = getFuncCode(calldata);
        if (funcCode == 0xa1db9782) {
            arbsys_withdrawErc20(topFrame, calldata);
        } elseif(funcCode == 0xf3e414f8) {
            arbsys_withdrawErc721(topFrame, calldata);
        } elseif(funcCode == 0x25e16063) {
            arbsys_withdrawEth(topFrame, calldata);
        } elseif(funcCode == 0x23ca0cd2) {
            arbsys_getTransactionCount(topFrame, calldata);
        } elseif(funcCode == 0x474ed9c0) {
            arbsys_cloneContract(topFrame, calldata);
        } elseif(funcCode == 0xa169625f) {
            arbsys_getStorageAt(topFrame, calldata);
        } else {
            // unrecognized function code
            evmOp_revert(0, 0);
        }
    } else {
        // this shouldn't happen -- should always be called in an EVM tx
        evmCallStack_callHitError(14);
    }
}

func getFuncCode(ba: ByteArray) -> uint {
    return asm(224, bytearray_get256(ba, 0)) uint { shr };
}

impure func arbsys_withdrawErc20(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 68) {
        evmOp_revert(0, 0);
    }
    let senderAcct = evmCallFrame_runningAsAccount(topFrame);
    let senderAddr = account_getAddress(senderAcct);
    let destAddr = address(bytearray_get256(calldata, 4));
    let amount = bytearray_get256(calldata, 36);

    let messageData = bytearray_extract(calldata, 4, 64);
    queueMessageForSend(1, senderAddr, messageData);
    evmOp_return(0, 0);
}

impure func arbsys_withdrawErc721(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 68) {
        evmOp_revert(0, 0);
    }
    let senderAcct = evmCallFrame_runningAsAccount(topFrame);
    let senderAddr = account_getAddress(senderAcct);
    let destAddr = address(bytearray_get256(calldata, 4));
    let id = bytearray_get256(calldata, 36);

    let messageData = bytearray_extract(calldata, 4, 64);
    queueMessageForSend(2, senderAddr, messageData);
    evmOp_return(0, 0);
}

impure func arbsys_withdrawEth(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert(0, 0);
    }
    let senderAddr = evmCallFrame_getCaller(topFrame);
    let senderAcct = evmCallFrame_getAccount(topFrame, senderAddr);
    let destAddr = address(bytearray_get256(calldata, 4));
    let amount = evmCallFrame_getCallvalue(topFrame);

    let arbSysAddr = evmCallFrame_runningAsAddress(topFrame);
    let arbSysAccount = evmCallFrame_getAccount(topFrame, arbSysAddr);
    if let Some(updatedAcct) = account_deductFromEthBalance(arbSysAccount, amount) {
        if ( ! evmCallStack_setAccount(arbSysAddr, updatedAcct)) {
            evmOp_revert(0, 0);
        }
        let messageData = bytearray_extract(calldata, 4, 32);
        messageData = bytearray_set256(messageData, 32, amount);
        queueMessageForSend(0, senderAddr, messageData);
        evmOp_return(0, 0);
    }

    evmOp_revert(0, 0);
}

impure func arbsys_getTransactionCount(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert(0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let seqNum = account_getNextSeqNum(evmCallFrame_getAccount(topFrame, addr));
    let updatedMem = bytearray_set256(
         evmCallStack_getTopFrameMemoryOrDie(),
         0,
         seqNum
     );
    let success = evmCallStack_setTopFrameMemory(updatedMem);
    if (success) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert(0, 0);
    }
}

impure func arbsys_cloneContract(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert(0, 0);
    }
    let oldContractAddr = address(bytearray_get256(calldata, 4));
    if let Some(newAddr) = evmCallStack_cloneContract(oldContractAddr) {
        let updatedMem = bytearray_set256(
            evmCallStack_getTopFrameMemoryOrDie(),
            0,
            uint(newAddr)
        );
        let success = evmCallStack_setTopFrameMemory(updatedMem);
        if (success) {
            evmOp_return(0, 32);
        } else {
            evmOp_revert(0, 0);
        }
    } else {
        evmOp_revert(0, 0);
    }
}

impure func arbsys_getStorageAt(topFrame: EvmCallFrame, calldata: ByteArray) {
    let senderAddr = evmCallFrame_getCaller(topFrame);
    if (senderAddr != address(0)) {
        evmOp_revert(0, 0);
    }

    let addr = address(bytearray_get256(calldata, 4));
    let offset = bytearray_get256(calldata, 4+32);
    let acct = evmCallFrame_getAccount(topFrame, addr);

    let ret = 0;
    if let Some(val) = account_getStorageCell(acct, offset) {
        ret = val;
    }

    let updatedMem = bytearray_set256(evmCallStack_getTopFrameMemoryOrDie(), 0, ret);
    let success = evmCallStack_setTopFrameMemory(updatedMem);

    if (success) {
        evmOp_return(0, 32);
    } else {
        evmOp_revert(0, 0);
    }
}
