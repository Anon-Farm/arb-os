//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use accounts::AccountStore;
use accounts::Account;
use std::bytearray::ByteArray;
use inbox::IncomingRequest;

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_get;
use accounts::accountStore_createERC20;
use accounts::accountStore_createERC721;
use accounts::account_isEmpty;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_set256;

use evmCallStack::initEvmCallStack;

use messages::TxRequestData;


public impure func tokens_erc20deposit(
    tokenAddress: address,
    payee: address,
    amount: uint,
    fullMsg: IncomingRequest
) -> option<()> {
    let globalAS = getGlobalAccountStore();
    if(account_isEmpty(accountStore_get(globalAS, tokenAddress))) {
        globalAS = accountStore_createERC20(
            globalAS,
            tokenAddress
        )?;
        setGlobalAccountStore(globalAS);
    }

    // encode the calldata for call to adminMint
    let calldata = bytearray_new(0);
    calldata = bytearray_set256(calldata, 0, asm(256-32, 0xe58306f9) uint { shl });
    calldata = bytearray_set256(calldata, 4, uint(payee));
    calldata = bytearray_set256(calldata, 36, amount);

    initEvmCallStack(
        const::EVMCallType_call,
        struct {
            maxGas: 1000000000000,  // gas will eventually be charged to overhead
            gasPrice: 0,
            seqNum: None<uint>,
            caller: address(1),     // special caller address, so contract recognizes call as coming from OS
            calleeAddr: tokenAddress,
            value: 0,
            calldata: calldata,
            nonMutating: false,
            isConstructor: false,
            incomingRequest: fullMsg,
        },
        Some((
            const::SendType_erc20Withdraw,
            address(0),
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(bytearray_new(0), 0, uint(tokenAddress)),
                    32,
                    uint(payee),
                ),
                64,
                amount,
            )
        )),
    );  // should never return

    return None;
}

public impure func tokens_erc721deposit(
    tokenAddress: address,
    payee: address,
    id: uint,
    fullMsg: IncomingRequest
) -> option<()> {
    let globalAS = getGlobalAccountStore();
    if(account_isEmpty(accountStore_get(globalAS, tokenAddress))) {
        globalAS = accountStore_createERC721(
            globalAS,
            tokenAddress
        )?;
        setGlobalAccountStore(globalAS);
    }

    // encode the calldata for call to adminMint
    let calldata = bytearray_new(0);
    calldata = bytearray_set256(calldata, 0, asm(256-32, 0xe58306f9) uint { shl });
    calldata = bytearray_set256(calldata, 4, uint(payee));
    calldata = bytearray_set256(calldata, 36, id);

    initEvmCallStack(
        const::EVMCallType_call,
        struct {
            maxGas: 1000000000000,  // gas will eventually be charged to overhead
            gasPrice: 0,
            seqNum: None<uint>,
            caller: address(1),     // special caller address, so contract recognizes call as coming from OS
            calleeAddr: tokenAddress,
            value: 0,
            calldata: calldata,
            nonMutating: false,
            isConstructor: false,
            incomingRequest: fullMsg,
        },
        Some((
            const::SendType_erc721Withdraw,
            address(0),
            bytearray_set256(
                bytearray_set256(
                    bytearray_set256(bytearray_new(0), 0, uint(tokenAddress)),
                    32,
                    uint(payee),
                ),
                64,
                id
            )
        )),
    );  // should never return

    return None;
}

