//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use bridge_arbos_versions::GlobalsBeforeUpgrade;

use inbox::IncomingRequestQueue;
use inbox::IncomingRequest;
use inbox::Inbox;


public func set_globalAccountStore_onUpgrade(input_globals: GlobalsBeforeUpgrade) -> any {
    return input_globals.globalAccountStore;
}

type OldGlobalInbox = struct {
    queue: IncomingRequestQueue,
    arbBlockNum: uint,
    ethBlockNum: uint,
    timestamp: uint,
    seenMsgAtThisArbBlockNum: bool,
    seenMsgAtThisEthBlockNum: bool,
    inboxHashAccumulator: bytes32,
}

public func set_globalInbox_onUpgrade(input_globals: GlobalsBeforeUpgrade) -> any {
    let oldInbox = unsafecast<OldGlobalInbox>(input_globals.globalInbox);
    let ret = unsafecast<Inbox>(());
    ret = struct {
        queue: oldInbox.queue,
        arbBlockNum: oldInbox.arbBlockNum,
        ethBlockNum: oldInbox.ethBlockNum,
        timestamp: oldInbox.timestamp,
        atStartOfBlock: false,
        inboxHashAccumulator: oldInbox.inboxHashAccumulator,
        pendingMessage: None<IncomingRequest>,
    };
    return ret;
}