//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use bridge_arbos_versions::GlobalsBeforeUpgrade;

use accounts::AccountStore;

use evmCallStack::EvmCallFrame;

use gasAccounting::GasAccountingInfo;

use tracing::EvmTracer;
use tracing::evmTracer_new;

use std::avmcodebuilder::AvmCodePoint;

use std::merkletree::MerkleTreeBuilder;


public func set_globalAccountStore_onUpgrade(input_globals: GlobalsBeforeUpgrade) -> AccountStore {
    return unsafecast<AccountStore>(input_globals.globalAccountStore);
}

public func set_globalCallStack_onUpgrade(input_globals: GlobalsBeforeUpgrade) -> option<EvmCallFrame> {
    return None<EvmCallFrame>;
}

public func set_gasAccountingInfo_onUpgrade(input_globals: GlobalsBeforeUpgrade) -> GasAccountingInfo {
    let old = input_globals.gasAccountingInfo;
    let l1GasPrice = input_globals.globalL1GasPriceEstimator.estimateWei;
    return struct {
        txState: old.txState,
        feeConfig: old.feeConfig,
        currentPrices: struct {
            perL1CalldataUnit: old.pricingParams.l1GasPerL2Tx * l1GasPrice,
            perStorageCell: old.pricingParams.l1GasPerStorage * l1GasPrice,
            perArbGasBase: l1GasPrice / old.pricingParams.arbGasDivisor,
            perArbGasCongestion: old.congestionState.congestionPriceWei,
            perArbGasTotal: (l1GasPrice / old.pricingParams.arbGasDivisor) + old.congestionState.congestionPriceWei,
        },
        gasRemainingThisBlock: old.gasRemainingThisBlock,
        congestionState: old.congestionState,
        speedLimitPerSecond: old.speedLimitPerSecond,
        pricingParams: struct {
            l1GasPerL1CalldataUnit: old.pricingParams.l1GasPerL1CalldataUnit,
            l1GasPerStorage: old.pricingParams.l1GasPerStorage,
            arbGasDivisor: old.pricingParams.arbGasDivisor,
        },
        gasAllocatedToThisBlock: old.gasAllocatedToThisBlock,
        retryablePrices: old.retryablePrices,
    };
}

public func set_codeSegGlobals_onUpgrade(
    input_globals: GlobalsBeforeUpgrade
) -> struct {
    unreachableMask: uint,
    dummyAcceptContractCode: impure func(),
} {
    return struct {
        unreachableMask: 0,
        dummyAcceptContractCode: unsafecast<impure func()>(0),     // will initialize this properly later
    };
}

public func set_globalOutbox_onUpgrade(
    input_globals: GlobalsBeforeUpgrade
) -> struct {
    batch: MerkleTreeBuilder,
    batchNumber: uint,
    numInBatch: uint,
    evmTracer: EvmTracer,
} {
    return struct {
        batch: input_globals.globalOutbox.batch,
        batchNumber: input_globals.globalOutbox.batchNumber,
        numInBatch: input_globals.globalOutbox.numInBatch,
        evmTracer: evmTracer_new(),
    };
}