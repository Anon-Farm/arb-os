//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use bridge_arbos_versions::GlobalsBeforeUpgrade;

use gasAccounting::GasAccountingInfo;


public func set_gasAccountingInfo_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> GasAccountingInfo {
    let oldInfo = oldGlobals.gasAccountingInfo;
    let oldPP = oldInfo.pricingParams;
    return struct {
        txState: oldInfo.txState,
        feeConfig: oldInfo.feeConfig,
        currentPrices: oldInfo.currentPrices,
        gasRemainingThisBlock: oldInfo.gasRemainingThisBlock,
        congestionState: oldInfo.congestionState,
        speedLimitPerSecond: oldInfo.speedLimitPerSecond,
        pricingParams: struct {
            l1GasPerL2Tx: oldPP.l1GasPerL2Tx,
            l1GasPerL1CalldataUnit: oldPP.l1GasPerL1CalldataUnit,
            l1GasPerStorage: oldPP.l1GasPerStorage,
            arbGasDivisor: oldPP.arbGasDivisor,
        },
        gasAllocatedToThisBlock: oldInfo.gasAllocatedToThisBlock,
        retryablePrices: oldInfo.retryablePrices,
        allowedSenders: oldInfo.allowedSenders,
    };
}

public func set_globalChainParameters_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> map<uint, uint> {
    let oldChainParams = xif let Some(cp) = oldGlobals.globalChainParams {
        cp
    } else {
        struct {
            chainId: const::Default_Param_ChainID,
            gracePeriodBlocks: const::Default_Param_ChallengePeriodEthBlocks,
            arbGasSpeedLimitPerSecond: const::Default_Param_SpeedLimitPerSecond,
            maxExecutionSteps: 1000000000000,  // never used
            baseStake: 5000000000,             // never used
            stakingToken: address(0),          // ETH
            owner: address(0),
            secondsPerSend: None<uint>,
            defaultAggregator: address(const::Default_Param_DefaultAggregator),
        }
    };

    return newmap<uint, uint>
        with { [const::Atom_Param_SecondsPerBlockNumerator] = const::Default_Param_SecondsPerBlockNumerator }
        with { [const::Atom_Param_SecondsPerBlockDenominator] = const::Default_Param_SecondsPerBlockDenominator }
        with { [const::Atom_Param_FeesEnabled] = xif (oldGlobals.gasAccountingInfo.feeConfig.enabled) { 1 } else { 0 } }
        with { [const::Atom_Param_NetworkFeeRecipient] = uint(oldGlobals.gasAccountingInfo.feeConfig.forNetwork) }
        with { [const::Atom_Param_CongestionFeeRecipient] = uint(oldGlobals.gasAccountingInfo.feeConfig.forCongestion) }
        with { [const::Atom_Param_DefaultAggregator] = uint(oldChainParams.defaultAggregator) }
        with { [const::Atom_Param_ChainID] = oldChainParams.chainId }
        with { [const::Atom_Param_ChallengePeriodEthBlocks] = oldChainParams.gracePeriodBlocks }
        with { [const::Atom_Param_SpeedLimitPerSecond] = oldGlobals.gasAccountingParams.SpeedLimitPerSecond }
        with {
            [const::Atom_Param_SecondsPerSend] = xif let Some(sps) = oldChainParams.secondsPerSend {
                sps
            } else {
                const::Default_Param_SecondsPerSend
            }
        }
        with { [const::Atom_Param_ChainOwner] = uint(oldChainParams.owner) }
        with { [const::Atom_Param_L1GasPerL1CalldataUnit] = oldGlobals.gasAccountingInfo.pricingParams.l1GasPerL1CalldataUnit }
        with { [const::Atom_Param_L1GasPerStorage] = oldGlobals.gasAccountingInfo.pricingParams.l1GasPerStorage }
        with { [const::Atom_Param_ArbGasDivisor] = oldGlobals.gasAccountingInfo.pricingParams.arbGasDivisor }
        with {
            [const::Atom_Param_NetworkFeeShareNumerator] = {
                let bfm = oldGlobals.gasAccountingInfo.feeConfig.baseFeeMultiplier;
                bfm.val - bfm.shiftFactor
            }
        }
        with { [const::Atom_Param_NetworkFeeShareDenominator] = oldGlobals.gasAccountingInfo.feeConfig.baseFeeMultiplier.shiftFactor }
        with { [const::Atom_Param_GasPoolMax] = oldGlobals.gasAccountingParams.GasPoolMax }
        with { [const::Atom_Param_TxGasLimit] = oldGlobals.gasAccountingParams.TxGasLimit }
        with { [const::Atom_Param_RetryablePriceBase] = const::Default_Param_RetryablePriceBase }
        with { [const::Atom_Param_RetryablePricePerByteNumerator] = const::Default_Param_RetryablePricePerByteNumerator }
        with { [const::Atom_Param_RetryablePricePerByteDenominator] = const::Default_Param_RetryablePricePerByteDenominator }
        with { [const::Atom_Param_RetryableTxRepriceIntervalSeconds] = const::Default_Param_RetryableTxRepriceIntervalSeconds }
        with { [const::Atom_Param_L1GasPriceEstimateWeightNumerator] = const::Default_Param_L1GasPriceEstimateWeightNumerator }
        with { [const::Atom_Param_L1GasPriceEstimateWeightDenominator] = const::Default_Param_L1GasPriceEstimateWeightDenominator }
        with { [const::Atom_Param_RetryableTxLifetimeSeconds] = const::Default_Param_RetryableTxLifetimeSeconds }
        with { [const::Atom_Param_ArbitrumNonZeroBalanceCallStipend] = const::Default_Param_ArbitrumNonZeroBalanceCallStipend }
    ;
}
