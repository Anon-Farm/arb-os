//
// Copyright 2021, Offchain Labs, Inc. All rights reserved.
//

use bridge_arbos_versions::GlobalsBeforeUpgrade;

use accounts::AccountStore;

use evmCallStack::EvmCallFrame;
use evmCallStack::IncomingRequestAndLogs;

use output::PerBlockReceiptData;
use output::OutputStatistics;

use std::queue::Queue;
use std::queue::QueueStack;
use std::queue::QueueStackCell;
use std::stack::Stack;
use std::merkletree::MerkleTreeBuilder;
use tracing::EvmTracer;
use evmlogs::EvmLogs;
use inbox::Inbox;
use inbox::TxRequestQueue;
use inbox::IncomingRequestQueue;


// used to force upgrades to work
type GlobalOutbox = struct {
    batch: MerkleTreeBuilder,
    batchNumber: uint,
    numInBatch: uint,
    evmTracer: EvmTracer,
}
type GlobalInputQueue = struct {
    txQ: TxRequestQueue,
    batchQ: IncomingRequestQueueStack,
}

public func set_globalAccountStore_onUpgrade     (input: any) -> every { return unsafecast<every>(input); }
public func set_logsQueuedForEndOfBlock_onUpgrade(input: any) -> every { return unsafecast<every>(input); }
public func set_globalOutbox_onUpgrade           (input: any) -> every { return unsafecast<every>(input); }
public func set_globalInbox_onUpgrade            (input: any) -> every { return unsafecast<every>(input); }
public func set_globalInputQueue_onUpgrade       (input: any) -> every { return unsafecast<every>(input); }

public func set_globalChainParameters_onUpgrade(oldGlobals: GlobalsBeforeUpgrade) -> map<uint, uint> {
    return oldGlobals.globalChainParameters
        with { [const::Atom_Param_GasPriceOracle] = const::Default_Param_GasPriceOracle }
    ;
}

public func set_globalCallStack_onUpgrade(_oldGlobals: GlobalsBeforeUpgrade) -> option<EvmCallFrame> {
    return None<EvmCallFrame>;
}

public func set_globalCurrentRetryableRequest_onUpgrade(_oldGlobals: GlobalsBeforeUpgrade) -> option<IncomingRequestAndLogs> {
    return None<IncomingRequestAndLogs>;
}

public func set_globalBlockReceiptData_onUpgrade(oldGlobals: GlobalsBeforeUpgrade
) -> struct {
    data: PerBlockReceiptData,
    statsThisBlock: OutputStatistics,
    statsAllTime: OutputStatistics,
    lastArbBlockNum: uint,
    nextSendTimestamp: uint,
} {
    let old = oldGlobals.globalBlockReceiptData;
    return struct {
        data: old.data,
        statsThisBlock: old.statsThisBlock,
        statsAllTime: old.statsAllTime,
        lastArbBlockNum: old.lastBlockNum,
        nextSendTimestamp: old.nextSendTime,
    };
}
