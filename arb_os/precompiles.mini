//
// Copyright 2020, Offchain Labs, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import type AccountStore;

import getGlobalAccountStore() -> AccountStore;
import setGlobalAccountStore(acctStore: AccountStore);
import accountStore_createBuiltinContract(acctStore: AccountStore, address, impure func()) -> option<AccountStore>;

public impure func precompiles_init() -> option<()> {
    setGlobalAccountStore(
        accountStore_createBuiltinContract(
            getGlobalAccountStore(),
            address(0x01),
            precompile_0x01,
        )?;
    );
    setGlobalAccountStore(
        accountStore_createBuiltinContract(
            getGlobalAccountStore(),
            address(100),
            arbsys_txcall,
        )?;
    );
}

public impure func precompile_0x01() {  // ecrecover
    // don't bother checking the first four bytes of calldata -- this is the only method in the contract
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 4+3*32+1) {
            evm_revert(0, 0);
        }
        let h = bytearray_get256(calldata, 4);
        let v = bytearray_get(calldata, 36);
        let r = bytearray_get(calldata, 37);
        let s = bytearray_get(calldata, 69);
        let addr = asm(r, s, v-27, h) address { ecrecover };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(bytearray_new(0), 0, 32)
        );
        evm_return(0, 32);
    } else {
        evm_revert(0, 0);
    }
}