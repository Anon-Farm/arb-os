//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use accounts::AccountStore;
use evmCallStack::EvmCallFrame;
use std::bytearray::ByteArray;

use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallFrame_getCalldata;

use evmOps::evmOp_return;
use evmOps::evmOp_revert;
use evmOps::evmOp_revert_knownPc;

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_createBuiltinContract;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;

use std::sha256::sha256_byteArray;

use arbsys::arbsys_txcall;
use arbosTest::arbosTest_txcall;


public impure func precompiles_init(acctStore: AccountStore) -> option<AccountStore> {
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x01),
        makeTrampoline(precompile_0x01),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x02),
        makeTrampoline(precompile_0x02),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x04),
        makeTrampoline(precompile_0x04),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
    	acctStore,
        address(0x06),
        makeTrampoline(precompile_0x06),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x07),
        makeTrampoline(precompile_0x07),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x08),
        makeTrampoline(precompile_0x08),
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(100),
        makeTrampoline(arbsys_txcall),
        true,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(105),
        makeTrampoline(arbosTest_txcall),
        true,
    )?;
    return Some(acctStore);
}

impure func makeTrampoline(txcallFunc: impure func()) -> impure func() {
    // make a small code snippet that function-calls to txcallFunc (with a dummy return address)
    return asm(
        0x3b,
        0,
        asm(
            0x34,
            txcallFunc,
            asm() func() { errcodept }
        ) func() { pushinsnimm }
    ) func() { pushinsnimm };
}

public impure func precompile_0x01() {  // ecrecover
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 4*32) {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let h = bytearray_get256(calldata, 0);
        let v = bytearray_get256(calldata, 32);
        let r = bytearray_get256(calldata, 2*32);
        let s = bytearray_get256(calldata, 3*32);
        let addr = asm(r, s, v-27, h) address { ecrecover };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(bytearray_new(0), 0, uint(addr))
        );
        if (success) {
            evmOp_return(0, 32);
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}

public impure func precompile_0x02() {  // sha256
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        let result = sha256_byteArray(calldata);
        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(
            bytearray_new(0), 0, uint(result))
        );
        if (success) {
            evmOp_return(0, 32);
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}

public impure func precompile_0x04() {  // identity function
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        let success = evmCallStack_setTopFrameMemory(calldata);
        if (success) {
            evmOp_return(0, bytearray_size(calldata));
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}

public impure func precompile_0x06() {  // ecadd
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 4*32) {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let x0 = bytearray_get256(calldata, 0);
        let x1 = bytearray_get256(calldata, 32);
        let y0 = bytearray_get256(calldata, 2*32);
        let y1 = bytearray_get256(calldata, 3*32);

        let z0 = asm(x0, x1, y0, y1) uint { ecadd };
        let z1 = asm() uint { };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(
                bytearray_set256(
                    bytearray_new(0),
                    0,
                    z0,
                ),
                32,
                z1,
            )
        );
        if (success) {
            evmOp_return(0, 64);
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}

public impure func precompile_0x07() {  // ecmul
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 3*32) {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let x0 = bytearray_get256(calldata, 0);
        let x1 = bytearray_get256(calldata, 32);
        let n = bytearray_get256(calldata, 2*32);

        let z0 = asm(x0, x1, n) uint { ecmul };
        let z1 = asm() uint { };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(
                bytearray_set256(
                    bytearray_new(0),
                    0,
                    z0,
                ),
                32,
                z1,
            )
        );
        if (success) {
            evmOp_return(0, 64);
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}

public impure func precompile_0x08() { // ecpairing
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        let numPts = bytearray_size(calldata) / (6*32);
        if ((numPts > 0) && (numPts <= 30)) {
            let acc = unsafecast<any>(());
            let offset = 0;
            while (numPts > 0) {
                acc = (
                    (
                        bytearray_get256(calldata, offset),
                        bytearray_get256(calldata, offset+32),
                        bytearray_get256(calldata, offset+3*32),
                        bytearray_get256(calldata, offset+2*32),
                        bytearray_get256(calldata, offset+5*32),
                        bytearray_get256(calldata, offset+4*32)
                    ),
                    acc
                );
                offset = offset + 6*32;
                numPts = numPts - 1;
            }

            let result = asm(acc,) bool { ecpairing };
            let success = evmCallStack_setTopFrameMemory(
                bytearray_set256(
                    bytearray_new(0),
                    0,
                    uint(result)
                )
            );
            if (success) {
                evmOp_return(0, 32);
            }
        }
    }

    evmOp_revert_knownPc(0, 0, 0);
}
