//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use accounts::AccountStore;
use evmCallStack::EvmCallFrame;
use std::bytearray::ByteArray;

use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallStack_setTopFrameMemory;
use evmCallStack::evmCallFrame_getCalldata;

use evmOps::evmOp_return;
use evmOps::evmOp_revert;

use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_createBuiltinContract;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;


use arbsys::arbsys_txcall;


public impure func precompiles_init(acctStore: AccountStore) -> option<AccountStore> {
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(0x01),
        precompile_0x01,
        false,
    )?;
    acctStore = accountStore_createBuiltinContract(
        acctStore,
        address(100),
        arbsys_txcall,
        true,
    )?;
    return Some(acctStore);
}

public impure func precompile_0x01() {  // ecrecover
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) != 4*32) {
            evmOp_revert(0, 0);
        }
        let h = bytearray_get256(calldata, 0);
        let v = bytearray_get256(calldata, 32);
        let r = bytearray_get256(calldata, 2*32);
        let s = bytearray_get256(calldata, 3*32);
        let addr = asm(r, s, v-27, h) address { ecrecover };

        let success = evmCallStack_setTopFrameMemory(
            bytearray_set256(bytearray_new(0), 0, uint(addr))
        );
        if (success) {
            evmOp_return(0, 32);
        }
    }

    evmOp_revert(0, 0);
}