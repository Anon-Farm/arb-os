//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytearray::MarshalledBytes;
use std::queue::Queue;
use evmlogs::EvmLogs;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_marshalFull;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get64;
use std::bytearray::bytearray_get256;

use std::keccak::keccak256_sizedBuffer;

use std::merkletree::MerkleTreeBuilder;
use std::merkletree::merkleTreeBuilder_new;
use std::merkletree::merkleTreeBuilder_add;
use std::merkletree::merkleTreeBuilder_rootHash;
use std::merkletree::merkleTreeBuilder_isEmpty;

use std::queue::queue_get;

use chainParameters::chainParams_getBlocksPerSend;

use evmlogs::evmlogs_empty;
use evmlogs::evmlogs_numLogs;

use evmCallStack::evmCallStack_queueMessage;

use chainParameters::chainParams_speedLimitPerBlock;

use inbox::IncomingRequest;
use inbox::inbox_currentBlockNumber;
use inbox::inbox_currentTimestamp;

use gasAccounting::GasUsage;
use gasAccounting::gasAccounting_summaryToPublish;


// PerBlockReceiptData is different from OutputStatistics for now; might want to unify
type PerBlockReceiptData = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
}

type OutputStatistics = struct {
    totalGasUsed: uint,
    numTx: uint,
    numEvmLogs: uint,
    numLogs: uint,
    numSends: uint,
}

var merkleOfSends: MerkleTreeBuilder;

public impure func output_init() {
    merkleOfSends = merkleTreeBuilder_new();
}

func outputStats_new() -> OutputStatistics {
    return struct {
        totalGasUsed: 0,
        numTx: 0,
        numEvmLogs: 0,
        numLogs: 0,
        numSends: 0
    };
}

func outputStats_isAllZero(os: OutputStatistics) -> bool {
    return (os.totalGasUsed + os.numTx + os.numEvmLogs + os.numLogs + os.numSends) == 0;
}

func outputStats_add(os1: OutputStatistics, os2: OutputStatistics) -> OutputStatistics {
    return struct {
        totalGasUsed: os1.totalGasUsed + os2.totalGasUsed,
        numTx: os1.numTx + os2.numTx,
        numEvmLogs: os1.numEvmLogs + os2.numEvmLogs,
        numLogs: os1.numLogs + os2.numLogs,
        numSends: os1.numSends + os2.numSends,
    };
}

var globalBlockReceiptData: struct {
    data: PerBlockReceiptData,
    statsThisBlock: OutputStatistics,
    statsAllTime: OutputStatistics,
    lastBlockNum: uint,
    nextSendBlockNum: uint,
};

public impure func outputStats_endOfBlock(blockNum: uint, timestamp: uint) {
    if ( ! outputStats_isAllZero(globalBlockReceiptData.statsThisBlock)) {
        // add current block (including soon-to-be-issued block summary log) into total stats
        let updatedStats = outputStats_add(
            globalBlockReceiptData.statsThisBlock,
            globalBlockReceiptData.statsAllTime
        );
        updatedStats = updatedStats with {
            numLogs: updatedStats.numLogs + 1  // +1 for soon-to-be-issued block summary log
        };

        globalBlockReceiptData = globalBlockReceiptData with {
            statsAllTime: updatedStats
        };
        emitBlockSummaryLog(blockNum, timestamp, globalBlockReceiptData.lastBlockNum);

        globalBlockReceiptData = globalBlockReceiptData with {
            lastBlockNum: blockNum
        };
    }

    // now clear current block stats, because we're advancing to a new current block
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: outputStats_new()
    } with {
        data: struct {
            totalGasUsed: 0,
            numTx: 0,
            numEvmLogs: 0
        }
    };
}

impure func outputStats_addTxLog(gasUsed: uint, numEvmLogs: uint) {
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: globalBlockReceiptData.statsThisBlock with {
            numTx: 1 + globalBlockReceiptData.statsThisBlock.numTx
        } with {
            numLogs: 1 + globalBlockReceiptData.statsThisBlock.numLogs
        } with {
            totalGasUsed: gasUsed + globalBlockReceiptData.statsThisBlock.totalGasUsed
        } with {
            numEvmLogs: numEvmLogs + globalBlockReceiptData.statsThisBlock.numEvmLogs
        }
    };
}

impure func outputStats_addSend() {
    globalBlockReceiptData = globalBlockReceiptData with {
        statsThisBlock: globalBlockReceiptData.statsThisBlock with {
            numSends: 1 + globalBlockReceiptData.statsThisBlock.numSends
        }
    };
}

public impure func txReceipts_init() {  // will be called at beginning of main()
    globalBlockReceiptData = struct {
        data: struct {
            totalGasUsed: 0,
            numTx: 0,
            numEvmLogs: 0
        },
        statsThisBlock: outputStats_new(),
        statsAllTime: outputStats_new(),
        lastBlockNum: ~0,
        nextSendBlockNum: 0,
    };
}

impure func update_txReceiptsForBlock(
    blockNum: uint,
    gasUsed: uint,
    numEvmLogs: uint
) -> PerBlockReceiptData {
    // first add in the gas, because returned value is supposed to include it
    let ret = globalBlockReceiptData.data with {
        totalGasUsed: gasUsed + globalBlockReceiptData.data.totalGasUsed
    };

    // now update the accumulated data and write it back, but don't return the updated version
    globalBlockReceiptData = globalBlockReceiptData with {
        data: ret with {
            numTx: ret.numTx + 1
        } with {
            numEvmLogs: ret.numEvmLogs + numEvmLogs
        }
    };

    return ret;
}

public impure func emitTxReceipt(
    l1message: IncomingRequest,
    resultCode: uint,
    maybeReturnData: option<ByteArray>,
    maybeEvmLogs: option<EvmLogs>,
    gasUsage: option<GasUsage>,
) {
    let realGasUsage = struct {
        gasUsed: 0,
        gasPriceWei: 0,
    };
    if let Some(gu) = gasUsage {
        realGasUsage = gu;
    }

    let evmLogs = evmlogs_empty();
    let numEvmLogs = 0;
    if let Some(el) = maybeEvmLogs {
        evmLogs = el;
        numEvmLogs = evmlogs_numLogs(el);
    }

    outputStats_addTxLog(realGasUsage.gasUsed, numEvmLogs);

    let returnData = bytearray_new(0);
    if let Some(rd) = maybeReturnData {
        returnData = rd;
    }

    let txResultInfo = struct {
        returnCode: resultCode,
        returnData: bytearray_marshalFull(returnData),
        evmLogs: evmLogs,
    };

    asm((
        const::LogType_txReceipt,
        l1message with {
            msgData: unsafecast<ByteArray>(bytearray_marshalFull(l1message.msgData))  // because caller expects marshalled bytes
        },
        txResultInfo,
        realGasUsage,
        update_txReceiptsForBlock(
            l1message.blockNumber,
            realGasUsage.gasUsed,
            numEvmLogs,
        )
    ),) { log };
}

impure func emitBlockSummaryLog(blockNum: uint, timestamp: uint, prevBlockNum: uint) {
    let gasUsedThisBlock = globalBlockReceiptData.statsThisBlock.totalGasUsed;
    let gasLimit = chainParams_speedLimitPerBlock();
    if (gasLimit < gasUsedThisBlock) {
        gasLimit = gasUsedThisBlock;
    }
    asm((
        const::LogType_blockSummary,
        blockNum,
        timestamp,
        gasLimit,
        globalBlockReceiptData.statsThisBlock,
        globalBlockReceiptData.statsAllTime,
        gasAccounting_summaryToPublish(),
        prevBlockNum
    ),) { log };
    if ((inbox_currentBlockNumber() >= globalBlockReceiptData.nextSendBlockNum) && !merkleTreeBuilder_isEmpty(merkleOfSends) ){
        asm(merkleTreeBuilder_rootHash(merkleOfSends),) { send };
        merkleOfSends = merkleTreeBuilder_new();
        globalBlockReceiptData = globalBlockReceiptData with {
            nextSendBlockNum: inbox_currentBlockNumber() + chainParams_getBlocksPerSend()
        };
    }
}

type AvmSend = struct {
    kind: uint,
    sender: address,
    data: ByteArray,
}

public impure func queueMessageForSend(msgType: uint, sender: address, data: ByteArray) {
    evmCallStack_queueMessage(
        struct {
            kind: msgType,
            sender: sender,
            data: data,
        }
    );
}

public impure func sendQueuedMessages(queue: Queue) {
    loop {
        if let Some(res) = queue_get(queue) {
            let (uq, msg) = res;
            queue = uq;
            sendPackagedMessage(unsafecast<AvmSend>(msg));
        } else {
            return;
        }
    }
}

public impure func sendMessage(msgType: uint, sender: address, data: ByteArray) {
    sendPackagedMessage(
        struct {
            kind: msgType,
            sender: sender,
            data: data,
        }
    );
}

impure func sendPackagedMessage(msg: AvmSend) {
    outputStats_addSend();

    let buf = newbuffer();
    buf = setbuffer256(buf, 0, msg.kind);
    buf = setbuffer256(buf, 32, uint(msg.sender));
    let sz = bytearray_size(msg.data);
    let i = 0;
    while (i+32 <= sz) {
        buf = setbuffer256(buf, 64+i, bytearray_get256(msg.data, i));
        i = i+32;
    }
    while (i+8 <= sz) {
        buf = setbuffer64(buf, 64+i, bytearray_get64(msg.data, i));
        i = i+8;
    }
    while (i < sz) {
        buf = setbuffer8(buf, 64+i, bytearray_getByte(msg.data, i));
        i = i+1;
    }
    merkleOfSends = merkleTreeBuilder_add(
        merkleOfSends,
        keccak256_sizedBuffer(64+sz, buf),
    );
    asm((const::LogType_send, 64+sz, buf),) { log };
}