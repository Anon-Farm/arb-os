//
// This is machine-generated code. Don't modify it unless you know what you're doing.
//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use evmCallStack::EvmCallFrame;
use std::bytearray::ByteArray;

use evmOps::evmOp_return;
use evmOps::evmOp_revert_knownPc;
use evmCallStack::evmCallStack_topFrame;
use evmCallStack::evmCallFrame_getCalldata;
use evmCallStack::evmCallStack_setTopFrameMemory;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_copy;
use std::bytearray::bytearray_extract;

use ArbBLSImpl::ArbBLS_getPublicKey;
use ArbBLSImpl::ArbBLS_register;

public impure func ArbBLS__dispatch() {
    if let Some(topFrame) = evmCallStack_topFrame() {
        let calldata = evmCallFrame_getCalldata(topFrame);
        if (bytearray_size(calldata) < 4) {
            evmOp_revert_knownPc(0, 0, 0);
        }
        let funcCode = asm(224, bytearray_get256(calldata, 0)) uint { shr };
        if (funcCode == 0x857cdbb8) {
            ArbBLS_getPublicKey_wrapper(topFrame, calldata);
        } elseif  (funcCode == 0x375a7c7f) {
            ArbBLS_register_wrapper(topFrame, calldata);
        } else {
            evmOp_revert_knownPc(1, 0, 0);
        }
    } else {
        evmOp_revert_knownPc(2, 0, 0);
    }
}

impure func ArbBLS_getPublicKey_wrapper(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 36) {
        evmOp_revert_knownPc(3, 0, 0);
    }
    let addr = address(bytearray_get256(calldata, 4));
    let ret = ArbBLS_getPublicKey(addr);
    let mem = bytearray_new(0);
    let __offset = 0;
    mem = bytearray_set256(mem, __offset, ret.0);
    __offset = __offset + 32;
    mem = bytearray_set256(mem, __offset, ret.1);
    __offset = __offset + 32;
    mem = bytearray_set256(mem, __offset, ret.2);
    __offset = __offset + 32;
    mem = bytearray_set256(mem, __offset, ret.3);
    __offset = __offset + 32;
    if (evmCallStack_setTopFrameMemory(mem)) {
        evmOp_return(0, __offset);
    } else {
        evmOp_revert(5, 0, 0);
    }
}

impure func ArbBLS_register_wrapper(topFrame: EvmCallFrame, calldata: ByteArray) {
    if (bytearray_size(calldata) != 132) {
        evmOp_revert_knownPc(3, 0, 0);
    }
    let x0 = bytearray_get256(calldata, 4);
    let x1 = bytearray_get256(calldata, 36);
    let y0 = bytearray_get256(calldata, 68);
    let y1 = bytearray_get256(calldata, 100);
    ArbBLS_register(topFrame, x0, x1, y0, y1);
    evmOp_return(0, 0);
}

