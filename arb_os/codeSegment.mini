//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::stack::Stack;
use std::bytearray::ByteArray;
use std::bytestream::ByteStream;

use evmCallStack::evmCallStack_callHitError;

use std::bytestream::bytestream_new;
use std::bytestream::bytestream_atEof;
use std::bytestream::bytestream_bytesReadSoFar;
use std::bytestream::bytestream_bytesRemaining;
use std::bytestream::bytestream_truncate;
use std::bytestream::bytestream_getByte;
use std::bytestream::bytestream_get64;
use std::bytestream::bytestream_skipBytes;
use std::stack::stack_new;
use std::stack::stack_push;
use std::stack::stack_pop;

use chainParameters::chainParams_chainId;
use evmOps::evmOp_address;
use evmOps::evmOp_balance;
use evmOps::evmOp_selfbalance;
use evmOps::evmOp_call;
use evmOps::evmOp_callcode;
use evmOps::evmOp_calldatacopy;
use evmOps::evmOp_calldataload;
use evmOps::evmOp_calldatasize;
use evmOps::evmOp_caller;
use evmOps::evmOp_callvalue;
use evmOps::evmOp_codecopy;
use evmOps::evmOp_codesize;
use evmOps::evmOp_delegatecall;
use evmOps::evmOp_extcodesize;
use evmOps::evmOp_extcodecopy;
use evmOps::evmOp_extcodehash;
use evmOps::evmOp_getjumpaddr;
use evmOps::evmOp_log0;
use evmOps::evmOp_log1;
use evmOps::evmOp_log2;
use evmOps::evmOp_log3;
use evmOps::evmOp_log4;
use evmOps::evmOp_msize;
use evmOps::evmOp_mload;
use evmOps::evmOp_mstore;
use evmOps::evmOp_mstore8;
use evmOps::evmOp_number;
use evmOps::evmOp_origin;
use evmOps::evmOp_return;
use evmOps::evmOp_returndatasize;
use evmOps::evmOp_returndatacopy;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_selfdestruct;
use evmOps::evmOp_sha3;
use evmOps::evmOp_sload;
use evmOps::evmOp_sstore;
use evmOps::evmOp_staticcall;
use evmOps::evmOp_stop;
use evmOps::evmOp_timestamp;
use evmOps::evmOp_create;
use evmOps::evmOp_create2;


// An AVM CodePoint, that is, a place that AVM code can jump to, is represented as a func()
type AvmCodePoint = impure func()

func opWrapperVoid(f: impure func()) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperRetAddress(f: impure func() -> address) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperRetUint(f: impure func() -> uint) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperUint(f: impure func(uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperUintRetBytes(f: impure func(uint) -> bytes32) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperUintRetFunc(f: impure func(uint) -> func()) -> func() {
    return unsafecast<func()>(f);
}

func opWrapperUintRetUint(f: impure func(uint) -> uint) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper2Uint(f: impure func(uint, uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper2UintRetBytes(f: impure func(uint, uint) -> bytes32) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper3Uint(f: impure func(uint, uint, uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper3UintRetAddress(f: impure func(uint, uint, uint) -> address) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper4Uint(f: impure func(uint, uint, uint, uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper4UintRetAddress(f: impure func(uint, uint, uint, uint) -> address) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper5Uint(f: impure func(uint, uint, uint, uint, uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper6Uint(f: impure func(uint, uint, uint, uint, uint, uint)) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper6UintRetBool(f: impure func(uint, uint, uint, uint, uint, uint) -> bool) -> func() {
    return unsafecast<func()>(f);
}

func opWrapper7UintRetBool(f: impure func(uint, uint, uint, uint, uint, uint, uint) -> bool) -> func() {
    return unsafecast<func()>(f);
}

impure func pushInstruction(opcode: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, restOfCode) AvmCodePoint { pushinsn };
}

impure func pushInstructionImm(opcode: uint, val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, val, restOfCode) AvmCodePoint { pushinsnimm };
}

impure func pushValue(val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push a noop (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(0x3b, val, restOfCode) AvmCodePoint { pushinsnimm };
}

public impure func pcTableForCode(code: ByteArray) -> option<Stack> {
    let (code, _, pcTable) = translateEvmCodeSegment(bytestream_new(code), true)?;
    return Some(stack_push(pcTable, (0, code)));
}

type EvmInstruction = struct {
    opcode: uint,
    data: option<uint>,
    pc: uint,
}

type EvmInstructionStack = Stack

func evmInstructionStack_new() -> EvmInstructionStack {
    return stack_new();
}

func evmInstructionStack_push(s: EvmInstructionStack, insn: EvmInstruction) -> EvmInstructionStack {
    return stack_push(s, insn);
}

func evmInstructionStack_pop(s: EvmInstructionStack) -> option<(EvmInstructionStack, EvmInstruction)> {
    let (us, item) = stack_pop(s)?;
    return Some((us, unsafecast<EvmInstruction>(item)));
}

impure func parseEvmCodeSegment(bs: ByteStream) -> option<EvmInstructionStack> {
    let stack = evmInstructionStack_new();
    let evmPc = 0;
    loop {
        if let Some(res) = bytestream_getByte(bs) {
            let (ubs, opcode) = res;
            bs = ubs;
            if ((opcode >= 0x60) && (opcode <= 0x7f)) {
                // it's a pushN instruction; unmarshal the immediate value and push it
                let bytesRemaining = opcode - 0x5f;
                let imm = 0;
                while (bytesRemaining > 0) {
                    if let Some(res) = bytestream_getByte(bs) {
                        let (ubs, val) = res;
                        bs = ubs;
                        imm = 256*imm + val;
                    }
                    bytesRemaining = bytesRemaining-1;
                }
                stack = evmInstructionStack_push(
                    stack,
                    struct {
                        opcode: opcode,
                        data: Some(imm),
                        pc: evmPc,
                    }
                );
                evmPc = evmPc + (opcode - 0x5f) + 1;
            } else {
                stack = evmInstructionStack_push(
                    stack,
                    struct {
                        opcode: opcode,
                        data: None<uint>,
                        pc: evmPc,
                    }
                );
                evmPc = evmPc + 1;
            }
        } else {
            return Some(stack);
        }
    }
}

impure func generateCodeForEvmSegment(
    insns: EvmInstructionStack,
    makePcTable: bool,
) -> (AvmCodePoint, map<uint, AvmCodePoint>, Stack) {
    let code = pushEvmInsnCall(
        opWrapperVoid(evmOp_stop),
        asm() AvmCodePoint { errcodept },
    );
    let evmJumpTable = newmap<uint, AvmCodePoint>;
    let pcTable = stack_new();

    loop {
        if let Some(res) = evmInstructionStack_pop(insns) {
            let invalidInstruction = false;
            let (uinsns, insn) = res;
            insns = uinsns;
            let opcode = insn.opcode;
            if (opcode < 0x80) {
                if (opcode < 0x40) {
                    if (opcode < 0x20) {
                        if (opcode < 0x10) {
                            if (opcode < 0x04) {
                                if (opcode == 0x00) { // STOP
                                    code = pushEvmInsnCall(opWrapperVoid(evmOp_stop), code);
                                } elseif (opcode == 0x01) { // ADD
                                    code = pushInstruction(0x01, code);
                                } elseif (opcode == 0x02) { // MUL
                                    code = pushInstruction(0x02, code);
                                } elseif (opcode == 0x03) { // SUB
                                    code = pushInstruction(0x03, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if ( (opcode >= 0x04) && (opcode <= 0x07) ) { // DIV, MOD, SDIV, SMOD
                                    code = pushEvmInsnDenomCheck(opcode, 2, code);
                                } elseif ( (opcode >= 0x08) && (opcode <= 0x09) ) { // ADDMOD, MULMOD
                                    code = pushEvmInsnDenomCheck(opcode, 3, code);
                                } elseif (opcode == 0x0a) { // EXP
                                    code = pushInstruction(0x0a, code);
                                } elseif (opcode == 0x0b) { // SIGNEXTEND
                                    code = pushInstruction(0x0b, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if ( (opcode >= 0x10) && (opcode <= 0x1a) ) {
                                code = pushInstruction(opcode, code);
                            } elseif (opcode == 0x1b) { // SHL
                                code = pushInstructionImm(
                                    0x0a, 2,   // [2] exp
                                    pushInstruction(
                                        0x02, // mul
                                        code
                                    )
                                );
                            } elseif (opcode == 0x1c) { // SHR
                                code = pushInstructionImm(
                                    0x0a, 2,   // [2] exp
                                    pushInstruction(
                                        0x43, // swap1
                                        pushInstruction(
                                            0x04, // div
                                            code
                                        )
                                    )
                                );
                            } elseif (opcode == 0x1d) { // SHA
                                code = pushInstructionImm(
                                    0x0a, 2,   // [2] exp
                                    pushInstruction(
                                        0x43, // swap1
                                        pushInstruction(
                                            0x05, // sdiv
                                            code
                                        )
                                    )
                                );
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0x37 ) {
                            if (opcode < 0x33) {
                                if (opcode == 0x20) { // SHA3
                                    code = pushEvmInsnCall(opWrapper2UintRetBytes(evmOp_sha3), code);
                                } elseif (opcode == 0x30) { // ADDRESS
                                    code = pushEvmInsnCall(opWrapperRetAddress(evmOp_address), code);
                                } elseif (opcode == 0x31) { // BALANCE
                                    code = pushEvmInsnCall(opWrapperUintRetUint(evmOp_balance), code);
                                } elseif (opcode == 0x32) { // ORIGIN
                                    code = pushEvmInsnCall(opWrapperRetAddress(evmOp_origin), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x33) { // CALLER
                                    code = pushEvmInsnCall(opWrapperRetAddress(evmOp_caller), code);
                                } elseif (opcode == 0x34) { // CALLVALUE
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_callvalue), code);
                                } elseif (opcode == 0x35) { // CALLDATALOAD
                                    code = pushEvmInsnCall(opWrapperUintRetUint(evmOp_calldataload), code);
                                } elseif (opcode == 0x36) { // CALLDATASIZE
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_calldatasize), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode < 0x3b) {
                                if (opcode == 0x37) { // CALLDATACOPY
                                    code = pushEvmInsnCall(opWrapper3Uint(evmOp_calldatacopy), code);
                                } elseif (opcode == 0x38) { // CODESIZE
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_codesize), code);
                                } elseif (opcode == 0x39) { // CODECOPY
                                    code = pushEvmInsnCall(opWrapper3Uint(evmOp_codecopy), code);
                                } elseif (opcode == 0x3a) { // GASPRICE
                                    code = pushValue(1, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x3b) { // EXTCODESIZE
                                    code = pushEvmInsnCall(opWrapperUintRetUint(evmOp_extcodesize), code);
                                } elseif (opcode == 0x3c) { // EXTCODECOPY
                                    code = pushEvmInsnCall(opWrapper4Uint(evmOp_extcodecopy), code);
                                } elseif (opcode == 0x3d) { // RETURNDATASIZE
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_returndatasize), code);
                                } elseif (opcode == 0x3e) { // RETURNDATACOPY
                                    code = pushEvmInsnCall(opWrapper3Uint(evmOp_returndatacopy), code);
                                } elseif (opcode == 0x3f) { // EXTCODEHASH
                                    code = pushEvmInsnCall(opWrapperUintRetBytes(evmOp_extcodehash), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        }
                    }
                } else {
                    if (opcode < 0x53) {
                        if (opcode < 0x45) {
                            if (opcode < 0x43) {
                                if (opcode == 0x40) { // BLOCKHASH
                                    code = pushInstruction(
                                        0x30,  // pop
                                        pushValue(0, code),
                                    );
                                } elseif (opcode == 0x41) { // COINBASE
                                    code = pushValue(0, code);
                                } elseif (opcode == 0x42) { // TIMESTAMP
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_timestamp), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x43) { // NUMBER
                                    code = pushEvmInsnCall(opWrapperRetUint(evmOp_number), code);
                                } elseif (opcode == 0x44) { // DIFFICULTY
                                     code = pushValue(2500000000000000, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode == 0x45) { // GASLIMIT
                                code = pushValue(10000000000, code);
                            } elseif (opcode == 0x46) { // CHAINID
                                code = pushEvmInsnCall(opWrapperRetUint(chainParams_chainId), code);
                            } elseif (opcode == 0x47) { // SELFBALANCE
                                code = pushEvmInsnCall(opWrapperRetUint(evmOp_selfbalance), code);
                            } elseif (opcode == 0x50) { // POP
                                code = pushInstruction(0x30, code); // pop
                            } elseif (opcode == 0x51) { // MLOAD
                                code = pushEvmInsnCall(opWrapperUintRetUint(evmOp_mload), code);
                            } elseif (opcode == 0x52) { // MSTORE
                                code = pushEvmInsnCall(opWrapper2Uint(evmOp_mstore), code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } elseif (opcode < 0x60) {
                        if (opcode < 0x58) {
                            if (opcode < 0x56) {
                                if (opcode == 0x53) { // MSTORE8
                                    code = pushEvmInsnCall(opWrapper2Uint(evmOp_mstore8), code);
                                } elseif (opcode == 0x54) { // SLOAD
                                    code = pushEvmInsnCall(opWrapperUintRetUint(evmOp_sload), code);
                                } elseif (opcode == 0x55) { // SSTORE
                                    code = pushEvmInsnCall(opWrapper2Uint(evmOp_sstore), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x56) { // JUMP
                                    code = pushEvmInsnCall(
                                        opWrapperUintRetFunc(evmOp_getjumpaddr),
                                        pushInstruction(0x34, code), // jump
                                    );
                                } elseif (opcode == 0x57) { // JUMPI
                                    let doJump = pushEvmInsnCall(
                                        opWrapperUintRetFunc(evmOp_getjumpaddr),
                                        pushInstruction(0x34, code), // jump
                                    );
                                    code = pushInstruction(
                                        0x43,  // swap1
                                        pushInstructionImm(
                                            0x35, // cjump
                                            doJump,
                                            pushInstruction(
                                                0x30, // pop
                                                pushInstructionImm(
                                                    0x34,  // jump
                                                    code,
                                                    doJump,
                                                )
                                            )
                                        )
                                    );
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode == 0x58) {  // GETPC
                                code = pushValue(insn.pc, code);
                            } elseif (opcode == 0x59) { // MSIZE
                                code = pushEvmInsnCall(opWrapperRetUint(evmOp_msize), code);
                            } elseif (opcode == 0x5a) { // GAS
                                code = pushInstruction(0x76, code);
                            } elseif (opcode == 0x5b) { // JUMPDEST
                                evmJumpTable = evmJumpTable with { [insn.pc] = code };
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        // it's an EVM pushN instruction
                        if let Some(val) = insn.data {
                            code = pushValue(val, code);
                        } else {
                            // should never happen
                            evmCallStack_callHitError(23);
                        }
                    }
                }
            } else {
                if (opcode < 0xe1) {
                    if (opcode < 0xa0) {
                        if (opcode < 0x90) {
                            if (opcode == 0x80) {  // DUP1 -- note that DUPn in EVM corresponds to DUP(n-1) in AvmCodePoint
                                code = pushInstruction(0x40, code);  // dup0
                            } elseif (opcode == 0x81) {  // DUP2
                                code = pushInstruction(0x41, code);  // dup1
                            } elseif (opcode == 0x82) {  // DUP3
                                code = pushInstruction(0x42, code);  // DUP2
                            } elseif ( (opcode >= 0x83) && (opcode <= 0x8f) ) {
                                code = pushDupn(opcode-0x80, code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0x90) {  // SWAP1
                                code = pushInstruction(0x43, code);  // swap1
                            } elseif (opcode == 0x91) {  // SWAP2
                                code = pushInstruction(0x44, code);  // swap2
                            } elseif ( (opcode >= 0x92) && (opcode <= 0x9f) ) {
                                code = pushSwapn(opcode-0x8f, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0xa3) {
                            if (opcode == 0xa0) { // LOG0
                                code = pushEvmInsnCall(opWrapper2Uint(evmOp_log0), code);
                            } elseif (opcode == 0xa1) { // LOG1
                                code = pushEvmInsnCall(opWrapper3Uint(evmOp_log1), code);
                            } elseif (opcode == 0xa2) { // LOG2
                                code = pushEvmInsnCall(opWrapper4Uint(evmOp_log2), code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xa3) { // LOG3
                                code = pushEvmInsnCall(opWrapper5Uint(evmOp_log3), code);
                            } elseif (opcode == 0xa4) { // LOG0
                                code = pushEvmInsnCall(opWrapper6Uint(evmOp_log4), code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                } else {
                    if (opcode < 0xf4) {
                        if (opcode == 0xf0) {  // CREATE
                            code = pushEvmInsnCall(opWrapper3UintRetAddress(evmOp_create), code);
                        } elseif (opcode == 0xf1) { // CALL
                            code = pushEvmInsnCall(opWrapper7UintRetBool(evmOp_call), code);
                        } elseif (opcode == 0xf2) { // CALLCODE
                            code = pushEvmInsnCall(opWrapper7UintRetBool(evmOp_callcode), code);
                        } elseif (opcode == 0xf3) { // RETURN
                            code = pushEvmInsnCall(opWrapper2Uint(evmOp_return), code);
                        }
                    } else {
                        if (opcode < 0xfc) {
                            if (opcode == 0xf4) { // DELEGATECALL
                                code = pushEvmInsnCall(opWrapper6UintRetBool(evmOp_delegatecall), code);
                            } elseif (opcode == 0xf5) {  // CREATE2
                                code = pushEvmInsnCall(opWrapper4UintRetAddress(evmOp_create2), code);
                            } elseif (opcode == 0xfa) { // STATICCALL
                                code = pushEvmInsnCall(opWrapper6UintRetBool(evmOp_staticcall), code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xfd) { // REVERT
                                code = pushValue(
                                    insn.pc,
                                    pushEvmInsnCall(opWrapper3Uint(evmOp_revert_knownPc), code)
                                );
                            } elseif (opcode == 0xff) { // SELFDESTRUCT
                                code = pushEvmInsnCall(opWrapperUint(evmOp_selfdestruct), code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                }
            }
            if (invalidInstruction) {
                code = pushValue(
                    0,
                    pushValue(
                        0,
                        pushValue(
                            insn.pc,
                            pushEvmInsnCall(opWrapper3Uint(evmOp_revert_knownPc), code)
                        )
                    )
                );
            }
            if (makePcTable) {
                pcTable = stack_push(pcTable, (insn.pc, hash(code)));
            }
        } else {
            return (code, evmJumpTable, pcTable);
        }
    }
}

public impure func translateEvmCodeSegment(
    bs: ByteStream,
    makePcTable: bool,
) -> option<(AvmCodePoint, map<uint, AvmCodePoint>, Stack)> {
    return Some(generateCodeForEvmSegment(parseEvmCodeSegment(bs)?, makePcTable));
}

impure func pushEvmInsnDenomCheck(
    opcode: uint,
    numStackOperands: uint,
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Deal with the EVM instructions that can "divide by zero" or the equivalent.
    // EVM defines these to return zero if the denominator is zero.
    // So we need to generate a little conditional to handle the special case.
    let doTheOp = pushInstruction(opcode, restOfCode);
    return pushDupn(
        numStackOperands-1,  // dup denominator/modulus to top of stack
        pushInstructionImm(
            0x35,  // cjump
            doTheOp,
            prependPops(
                numStackOperands,
                pushValue(
                    0,
                    pushInstructionImm(
                        0x34, // jump
                        restOfCode,
                        doTheOp
                    )
                )
            )
        )
    );
}

impure func prependPops(numPops: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    while (numPops > 0) {
        restOfCode = pushInstruction(0x30, restOfCode);   // pop instruction
        numPops = numPops-1;
    }
    return restOfCode;
}

impure func pushDupn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a dupN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    // Note that N here uses the AVM semantics, which is off-by-one from the EVM semantics.
    if (n <= 2) {
        return pushInstruction(0x40+n, restOfCode);  //dup_n
    } else {
        return pushInstruction(
            0x38,  // auxpush,
            pushDupn(
                n-1,
                pushInstruction(
                    0x39,  // auxpop
                    pushInstruction(
                        0x43,  // swap1
                        restOfCode
                    )
                )
            )
        );
    }
}

impure func pushSwapn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a swapN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    if (n == 2) {
        return pushInstruction(0x44, restOfCode);  // swap2
    } else {
        return pushInstruction(
            0x43, // swap1
            pushInstruction(
                0x38, // auxpush
                pushSwapn(
                    n-1,
                    pushInstruction(
                        0x39, // auxpop
                        pushInstruction(
                            0x43, // swap1
                            restOfCode
                        )
                    )
                )
            )
        );
    }
}

impure func pushEvmInsnCall(evmOp: func(), code: AvmCodePoint) -> AvmCodePoint {
    // Some EVM instructions compile to a procedure call to some Mini code.
    // Generate the appropriate procedure call.
    // Note that the EVM code will already have put the args to the call on the stack,
    //     and the Mini code will leave return values on the stack.
    return pushValue(
        code,  // push return address
        pushInstructionImm(
            0x34, // jump
            evmOp,
            code
        )
    );
}

func isKnownOpcode(opcode: uint) -> bool {  // return true iff opcode is a known EVM opcode
    return ( (opcode >= 0x00) && (opcode <= 0x0b) )
        || ( (opcode >= 0x10) && (opcode <= 0x1d) )
        || (opcode == 0x20)
        || ( (opcode >= 0x30) && (opcode <= 0x45) )
        || ( (opcode >= 0x50) && (opcode <= 0x5b) )
        || ( (opcode >= 0x60) && (opcode <= 0xa4) )
        || ( (opcode >= 0xf0) && (opcode <= 0xf5) )
        || (opcode == 0xfa)
        || ( (opcode == 0xfd) && (opcode <= 0xff) );
}
