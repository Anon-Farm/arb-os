//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::stack::Stack;
use std::bytearray::ByteArray;
use std::bytestream::ByteStream;

use evmCallStack::evmCallStack_callHitError;

use std::bytestream::bytestream_new;
use std::bytestream::bytestream_atEof;
use std::bytestream::bytestream_bytesReadSoFar;
use std::bytestream::bytestream_bytesRemaining;
use std::bytestream::bytestream_truncate;
use std::bytestream::bytestream_getByte;
use std::bytestream::bytestream_get64;
use std::bytestream::bytestream_skipBytes;
use std::stack::stack_new;
use std::stack::stack_push;
use std::stack::stack_pop;

use std::rlp::rlp_decodeUint;

use chainParameters::chainParams_chainId;
use gasAccounting::getGasLimitConstant;

use evmOps::evmOps_trampoline;

use evmOps::evmOp_address;
use evmOps::evmOp_balance;
use evmOps::evmOp_selfbalance;
use evmOps::evmOp_call;
use evmOps::evmOp_callcode;
use evmOps::evmOp_calldatacopy;
use evmOps::evmOp_calldataload;
use evmOps::evmOp_calldatasize;
use evmOps::evmOp_caller;
use evmOps::evmOp_callvalue;
use evmOps::evmOp_codecopy;
use evmOps::evmOp_codesize;
use evmOps::evmOp_delegatecall;
use evmOps::evmOp_extcodesize;
use evmOps::evmOp_extcodecopy;
use evmOps::evmOp_extcodehash;
use evmOps::evmOp_getjumpaddr;
use evmOps::evmOp_log0;
use evmOps::evmOp_log1;
use evmOps::evmOp_log2;
use evmOps::evmOp_log3;
use evmOps::evmOp_log4;
use evmOps::evmOp_msize;
use evmOps::evmOp_mload;
use evmOps::evmOp_mstore;
use evmOps::evmOp_mstore8;
use evmOps::evmOp_number;
use evmOps::evmOp_origin;
use evmOps::evmOp_return;
use evmOps::evmOp_returndatasize;
use evmOps::evmOp_returndatacopy;
use evmOps::evmOp_revert_knownPc;
use evmOps::evmOp_selfdestruct;
use evmOps::evmOp_sha3;
use evmOps::evmOp_sload;
use evmOps::evmOp_sstore;
use evmOps::evmOp_staticcall;
use evmOps::evmOp_stop;
use evmOps::evmOp_timestamp;
use evmOps::evmOp_create;
use evmOps::evmOp_create2;

const opNum_stop = 0;
const opNum_sha3 = 1;
const opNum_address = 2;
const opNum_balance = 3;
const opNum_selfbalance = 4;
const opNum_origin = 5;
const opNum_caller = 6;
const opNum_callvalue = 7;
const opNum_calldataload = 8;
const opNum_calldatasize = 9;
const opNum_calldatacopy = 10;
const opNum_codesize = 11;
const opNum_codecopy = 12;
const opNum_extcodesize = 13;
const opNum_extcodecopy = 14;
const opNum_extcodehash = 15;
const opNum_returndatasize = 16;
const opNum_returndatacopy = 17;
const opNum_timestamp = 18;
const opNum_number = 19;
const opNum_msize = 20;
const opNum_mload = 21;
const opNum_mstore = 22;
const opNum_mstore8 = 23;
const opNum_sload = 24;
const opNum_sstore = 25;
const opNum_getjumpaddr = 26;
const opNum_msize = 27;
const opNum_log0 = 28;
const opNum_log1 = 29;
const opNum_log2 = 30;
const opNum_log3 = 31;
const opNum_log4 = 32;
const opNum_call = 33;
const opNum_callcode = 34;
const opNum_delegatecall = 35;
const opNum_staticcall = 36;
const opNum_revert = 37;
const opNum_revert_knownPc = 38;
const opNum_return = 39;
const opNum_selfdestruct = 40;
const opNum_create = 41;
const opNum_create2 = 42;
const opNum_chainId = 43;


// An AVM CodePoint, that is, a place that AVM code can jump to, is represented as a func()
type AvmCodePoint = impure func()

impure func pushInstruction(opcode: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, restOfCode) AvmCodePoint { pushinsn };
}

impure func pushInstructionImm(opcode: uint, val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push an instruction (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(opcode, val, restOfCode) AvmCodePoint { pushinsnimm };
}

impure func pushValue(val: any, restOfCode: AvmCodePoint) -> AvmCodePoint {
    // Push a noop (with immediate value) onto the beginning of a code segment, and return the resulting CodePoint.
    return asm(0x3b, val, restOfCode) AvmCodePoint { pushinsnimm };
}

public impure func pcTableForCode(code: ByteArray) -> option<Stack> {
    let (code, _, pcTable) = translateEvmCodeSegment(bytestream_new(code), true)?;
    return Some(stack_push(pcTable, (0, code)));
}

type EvmInstruction = struct {
    opcode: uint,
    data: option<uint>,
    pc: uint,
}

type EvmInstructionStack = Stack

func evmInstructionStack_new() -> EvmInstructionStack {
    return stack_new();
}

func evmInstructionStack_push(s: EvmInstructionStack, insn: EvmInstruction) -> EvmInstructionStack {
    return stack_push(s, insn);
}

func evmInstructionStack_pop(s: EvmInstructionStack) -> option<(EvmInstructionStack, EvmInstruction)> {
    let (us, item) = stack_pop(s)?;
    return Some((us, unsafecast<EvmInstruction>(item)));
}

var unreachableMask: uint;

impure func parseEvmCodeSegment(bs: ByteStream) -> option<EvmInstructionStack> {
    let stack = evmInstructionStack_new();
    let evmPc = 0;
    let reachable = true;
    loop {
        if let Some(res) = bytestream_getByte(bs) {
            let (ubs, opcode) = res;
            bs = ubs;
            if (opcode == 0x5b) {    reachable = true;    }

            if ((opcode >= 0x60) && (opcode <= 0x7f)) {
                // it's a pushN instruction; unmarshal the immediate value and push it
                let bytesRemaining = opcode - 0x5f;
                let imm = 0;
                while (bytesRemaining > 0) {
                    if let Some(res) = bytestream_getByte(bs) {
                        let (ubs, val) = res;
                        bs = ubs;
                        imm = 256*imm + val;
                    }
                    bytesRemaining = bytesRemaining-1;
                }
                if (reachable) {
                    stack = evmInstructionStack_push(
                        stack,
                        struct {
                            opcode: opcode,
                            data: Some(imm),
                            pc: evmPc,
                        }
                    );
                }
                evmPc = evmPc + (opcode - 0x5f) + 1;
            } else {
                if (reachable) {
                    stack = evmInstructionStack_push(
                        stack,
                        struct {
                            opcode: opcode,
                            data: None<uint>,
                            pc: evmPc,
                        }
                    );
                }
                evmPc = evmPc + 1;
            }
            if ((unreachableMask & asm(opcode, 1) uint { shl }) != 0) {    reachable = false;    }
        } else {
            return Some(stack);
        }
    }
}

public impure func codeSegment_init() {
    let mask = 0;
    let opcode = 0;
    while (opcode < 256) {
        if (unreachableAfterOpcode(opcode)) {
            mask = mask | asm(opcode, 1) uint { shl };
        }
        opcode = opcode + 1;
    }
    unreachableMask = mask;
}

func unreachableAfterOpcode(opcode: uint) -> bool {
    return (opcode == 0x00)   // STOP
        || ((opcode >= 0x0c) && (opcode <= 0x0f))  // invalid
        || (opcode == 0x1e)  // invalid
        || (opcode == 0x1f)  // invalid
        || ((opcode >= 0x21) && (opcode <= 0x2f)) // invalid
        || ((opcode >= 0x46) && (opcode <= 0x4f)) // invalid
        || (opcode == 0x56)  // JUMP
        || ((opcode >= 0x5c) && (opcode <= 0x5f)) // invalid
        || ((opcode >= 0xa5) && (opcode <= 0xef)) // invalid
        || (opcode == 0xf3)  // RETURN
        || (opcode == 0xfd)  // REVERT
        || (opcode == 0xfe)  // INVALID
        || (opcode == 0xff); // SELFDESTRUCT
}

impure func generateCodeForEvmSegment(
    insns: EvmInstructionStack,
    makePcTable: bool,
) -> (AvmCodePoint, map<uint, AvmCodePoint>, Stack) {
    let code = pushEvmInsnCall(
        constval(opNum_stop),
        asm() AvmCodePoint { errcodept },
    );
    let evmJumpTable = newmap<uint, AvmCodePoint>;
    let pcTable = stack_new();

    loop {
        if let Some(res) = evmInstructionStack_pop(insns) {
            let invalidInstruction = false;
            let (uinsns, insn) = res;
            insns = uinsns;
            let opcode = insn.opcode;
            if (opcode < 0x80) {
                if (opcode < 0x40) {
                    if (opcode < 0x20) {
                        if (opcode < 0x10) {
                            if (opcode < 0x04) {
                                if (opcode == 0x00) { // STOP
                                    code = pushEvmInsnCall(constval(opNum_stop), code);
                                } elseif (opcode == 0x01) { // ADD
                                    code = pushInstruction(0x01, code);
                                } elseif (opcode == 0x02) { // MUL
                                    code = pushInstruction(0x02, code);
                                } elseif (opcode == 0x03) { // SUB
                                    code = pushInstruction(0x03, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if ( (opcode >= 0x04) && (opcode <= 0x07) ) { // DIV, MOD, SDIV, SMOD
                                    code = pushEvmInsnDenomCheck(opcode, 2, code);
                                } elseif ( (opcode >= 0x08) && (opcode <= 0x09) ) { // ADDMOD, MULMOD
                                    code = pushEvmInsnDenomCheck(opcode, 3, code);
                                } elseif (opcode == 0x0a) { // EXP
                                    code = pushInstruction(0x0a, code);
                                } elseif (opcode == 0x0b) { // SIGNEXTEND
                                    code = pushInstruction(0x0b, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if ( (opcode >= 0x10) && (opcode <= 0x1a) ) {
                                code = pushInstruction(opcode, code);
                            } elseif (opcode == 0x1b) { // SHL
                                code = pushInstruction(0x1b, code);
                            } elseif (opcode == 0x1c) { // SHR
                                code = pushInstruction(0x1c, code);
                            } elseif (opcode == 0x1d) { // SAR
                                code = pushInstruction(0x1d, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0x37 ) {
                            if (opcode < 0x33) {
                                if (opcode == 0x20) { // SHA3
                                    code = pushEvmInsnCall(constval(opNum_sha3), code);
                                } elseif (opcode == 0x30) { // ADDRESS
                                    code = pushEvmInsnCall(constval(opNum_address), code);
                                } elseif (opcode == 0x31) { // BALANCE
                                    code = pushEvmInsnCall(constval(opNum_balance), code);
                                } elseif (opcode == 0x32) { // ORIGIN
                                    code = pushEvmInsnCall(constval(opNum_origin), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x33) { // CALLER
                                    code = pushEvmInsnCall(constval(opNum_caller), code);
                                } elseif (opcode == 0x34) { // CALLVALUE
                                    code = pushEvmInsnCall(constval(opNum_callvalue), code);
                                } elseif (opcode == 0x35) { // CALLDATALOAD
                                    code = pushEvmInsnCall(constval(opNum_calldataload), code);
                                } elseif (opcode == 0x36) { // CALLDATASIZE
                                    code = pushEvmInsnCall(constval(opNum_calldatasize), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode < 0x3b) {
                                if (opcode == 0x37) { // CALLDATACOPY
                                    code = pushEvmInsnCall(constval(opNum_calldatacopy), code);
                                } elseif (opcode == 0x38) { // CODESIZE
                                    code = pushEvmInsnCall(constval(opNum_codesize), code);
                                } elseif (opcode == 0x39) { // CODECOPY
                                    code = pushEvmInsnCall(constval(opNum_codecopy), code);
                                } elseif (opcode == 0x3a) { // GASPRICE
                                    code = pushValue(1, code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x3b) { // EXTCODESIZE
                                    code = pushEvmInsnCall(constval(opNum_extcodesize), code);
                                } elseif (opcode == 0x3c) { // EXTCODECOPY
                                    code = pushEvmInsnCall(constval(opNum_extcodecopy), code);
                                } elseif (opcode == 0x3d) { // RETURNDATASIZE
                                    code = pushEvmInsnCall(constval(opNum_returndatasize), code);
                                } elseif (opcode == 0x3e) { // RETURNDATACOPY
                                    code = pushEvmInsnCall(constval(opNum_returndatacopy), code);
                                } elseif (opcode == 0x3f) { // EXTCODEHASH
                                    code = pushEvmInsnCall(constval(opNum_extcodehash), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        }
                    }
                } else {
                    if (opcode == 0x45) { // GASLIMIT
                        return Some((pushValue(getGasLimitConstant(), restOfCode), evmJumpTable, pcTable));
                    } elseif (opcode == 0x46) { // CHAINID
                        return pushEvmInsnCall(constval(opNum_chainId), restOfCode, evmJumpTable, pcTable);
                    } elseif (opcode == 0x47) { // SELFBALANCE
                        return pushEvmInsnCall(constval(opNum_selfbalance), restOfCode, evmJumpTable, pcTable);
                    } elseif (opcode == 0x50) { // POP
                        return Some((pushInstruction(0x30, restOfCode), evmJumpTable, pcTable)); // pop
                    } elseif (opcode == 0x51) { // MLOAD
                        return pushEvmInsnCall(constval(opNum_mload), restOfCode, evmJumpTable, pcTable);
                    } elseif (opcode == 0x52) { // MSTORE
                        return pushEvmInsnCall(constval(opNum_mstore), restOfCode, evmJumpTable, pcTable);
                    } else {
                        invalidInstruction = true;
                    }
                }
            } else {
                if (opcode < 0x58) {
                    if (opcode < 0x56) {
                        if (opcode == 0x53) { // MSTORE8
                            return pushEvmInsnCall(constval(opNum_mstore8), restOfCode, evmJumpTable, pcTable);
                        } elseif (opcode == 0x54) { // SLOAD
                            return pushEvmInsnCall(constval(opNum_sload), restOfCode, evmJumpTable, pcTable);
                        } elseif (opcode == 0x55) { // SSTORE
                            return pushEvmInsnCall(constval(opNum_sstore), restOfCode, evmJumpTable, pcTable);
                        } else {
                            invalidInstruction = true;
                        }
                    } elseif (opcode < 0x60) {
                        if (opcode < 0x58) {
                            if (opcode < 0x56) {
                                if (opcode == 0x53) { // MSTORE8
                                    code = pushEvmInsnCall(constval(opNum_mstore8), code);
                                } elseif (opcode == 0x54) { // SLOAD
                                    code = pushEvmInsnCall(constval(opNum_sload), code);
                                } elseif (opcode == 0x55) { // SSTORE
                                    code = pushEvmInsnCall(constval(opNum_sstore), code);
                                } else {
                                    invalidInstruction = true;
                                }
                            } else {
                                if (opcode == 0x56) { // JUMP
                                    code = pushEvmInsnCall(
                                        constval(opNum_getjumpaddr),
                                        pushInstruction(0x34, code), // jump
                                    );
                                } elseif (opcode == 0x57) { // JUMPI
                                    let doJump = pushEvmInsnCall(
                                        constval(opNum_getjumpaddr),
                                        pushInstruction(0x34, code), // jump
                                    );
                                    code = pushInstruction(
                                        0x43,  // swap1
                                        pushInstructionImm(
                                            0x35, // cjump
                                            doJump,
                                            pushInstruction(
                                                0x30, // pop
                                                pushInstructionImm(
                                                    0x34,  // jump
                                                    code,
                                                    doJump,
                                                )
                                            )
                                        )
                                    );
                                } else {
                                    invalidInstruction = true;
                                }
                            }
                        } else {
                            if (opcode == 0x58) {  // GETPC
                                code = pushValue(insn.pc, code);
                            } elseif (opcode == 0x59) { // MSIZE
                                code = pushEvmInsnCall(constval(opNum_msize), code);
                            } elseif (opcode == 0x5a) { // GAS
                                code = pushInstruction(0x76, code);
                            } elseif (opcode == 0x5b) { // JUMPDEST
                                evmJumpTable = evmJumpTable with { [insn.pc] = code };
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        // it's an EVM pushN instruction
                        if let Some(val) = insn.data {
                            code = pushValue(val, code);
                        } else {
                            // should never happen
                            evmCallStack_callHitError(23);
                        }
                    }
                }
            } else {
                if (opcode < 0xe1) {
                    if (opcode < 0xa0) {
                        if (opcode < 0x90) {
                            if (opcode == 0x80) {  // DUP1 -- note that DUPn in EVM corresponds to DUP(n-1) in AvmCodePoint
                                code = pushInstruction(0x40, code);  // dup0
                            } elseif (opcode == 0x81) {  // DUP2
                                code = pushInstruction(0x41, code);  // dup1
                            } elseif (opcode == 0x82) {  // DUP3
                                code = pushInstruction(0x42, code);  // DUP2
                            } elseif ( (opcode >= 0x83) && (opcode <= 0x8f) ) {
                                code = pushDupn(opcode-0x80, code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0x90) {  // SWAP1
                                code = pushInstruction(0x43, code);  // swap1
                            } elseif (opcode == 0x91) {  // SWAP2
                                code = pushInstruction(0x44, code);  // swap2
                            } elseif ( (opcode >= 0x92) && (opcode <= 0x9f) ) {
                                code = pushSwapn(opcode-0x8f, code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    } else {
                        if (opcode < 0xa3) {
                            if (opcode == 0xa0) { // LOG0
                                code = pushEvmInsnCall(constval(opNum_log0), code);
                            } elseif (opcode == 0xa1) { // LOG1
                                code = pushEvmInsnCall(constval(opNum_log1), code);
                            } elseif (opcode == 0xa2) { // LOG2
                                code = pushEvmInsnCall(constval(opNum_log2), code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xa3) { // LOG3
                                code = pushEvmInsnCall(constval(opNum_log3), code);
                            } elseif (opcode == 0xa4) { // LOG0
                                code = pushEvmInsnCall(constval(opNum_log4), code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                } else {
                    if (opcode < 0xf4) {
                        if (opcode == 0xf0) {  // CREATE
                            code = pushEvmInsnCall(constval(opNum_create), code);
                        } elseif (opcode == 0xf1) { // CALL
                            code = pushEvmInsnCall(constval(opNum_call), code);
                        } elseif (opcode == 0xf2) { // CALLCODE
                            code = pushEvmInsnCall(constval(opNum_callcode), code);
                        } elseif (opcode == 0xf3) { // RETURN
                            code = pushEvmInsnCall(constval(opNum_return), code);
                        }
                    } else {
                        if (opcode < 0xfc) {
                            if (opcode == 0xf4) { // DELEGATECALL
                                code = pushEvmInsnCall(constval(opNum_delegatecall), code);
                            } elseif (opcode == 0xf5) {  // CREATE2
                                code = pushEvmInsnCall(constval(opNum_create2), code);
                            } elseif (opcode == 0xfa) { // STATICCALL
                                code = pushEvmInsnCall(constval(opNum_staticcall), code);
                            } else {
                                invalidInstruction = true;
                            }
                        } else {
                            if (opcode == 0xfd) { // REVERT
                                code = pushValue(
                                    insn.pc,
                                    pushEvmInsnCall(constval(opNum_revert_knownPc), code)
                                );
                            } elseif (opcode == 0xff) { // SELFDESTRUCT
                                code = pushEvmInsnCall(constval(opNum_selfdestruct), code);
                            } else {
                                invalidInstruction = true;
                            }
                        }
                    }
                }
            }
            if (invalidInstruction) {
                code = pushValue(
                    0,
                    pushValue(
                        0,
                        pushValue(
                            insn.pc,
                            pushEvmInsnCall(constval(opNum_revert_knownPc), code)
                        )
                    )
                );
            }
            if (makePcTable) {
                pcTable = stack_push(pcTable, (insn.pc, hash(code)));
            }
        } else {
            return (code, evmJumpTable, pcTable);
        }
    }
}

public impure func translateEvmCodeSegment(
    bs: ByteStream,
    makePcTable: bool,
) -> option<(AvmCodePoint, map<uint, AvmCodePoint>, Stack)> {
    return Some(generateCodeForEvmSegment(parseEvmCodeSegment(bs)?, makePcTable));
}

impure func pushEvmInsnDenomCheck(
    opcode: uint,
    numStackOperands: uint,
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Deal with the EVM instructions that can "divide by zero" or the equivalent.
    // EVM defines these to return zero if the denominator is zero.
    // So we need to generate a little conditional to handle the special case.
    let doTheOp = pushInstruction(opcode, restOfCode);
    return pushDupn(
        numStackOperands-1,  // dup denominator/modulus to top of stack
        pushInstructionImm(
            0x35,  // cjump
            doTheOp,
            prependPops(
                numStackOperands,
                pushValue(
                    0,
                    pushInstructionImm(
                        0x34, // jump
                        restOfCode,
                        doTheOp
                    )
                )
            )
        )
    );
}

impure func prependPops(numPops: uint, restOfCode: AvmCodePoint) -> AvmCodePoint {
    while (numPops > 0) {
        restOfCode = pushInstruction(0x30, restOfCode);   // pop instruction
        numPops = numPops-1;
    }
    return restOfCode;
}

impure func pushDupn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a dupN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    // Note that N here uses the AVM semantics, which is off-by-one from the EVM semantics.
    if (n <= 2) {
        return pushInstruction(0x40+n, restOfCode);  //dup_n
    } else {
        return pushInstruction(
            0x38,  // auxpush,
            pushDupn(
                n-1,
                pushInstruction(
                    0x39,  // auxpop
                    pushInstruction(
                        0x43,  // swap1
                        restOfCode
                    )
                )
            )
        );
    }
}

impure func pushSwapn(
    n: uint, 
    restOfCode: AvmCodePoint,
) -> AvmCodePoint {
    // Generate code for a swapN pseudo-operation.
    // AVM supports this only for N <= 2, whereas EVM can ask for larger ones.
    if (n == 2) {
        return pushInstruction(0x44, restOfCode);  // swap2
    } else {
        return pushInstruction(
            0x43, // swap1
            pushInstruction(
                0x38, // auxpush
                pushSwapn(
                    n-1,
                    pushInstruction(
                        0x39, // auxpop
                        pushInstruction(
                            0x43, // swap1
                            restOfCode
                        )
                    )
                )
            )
        );
    }
}

impure func pushEvmInsnCall(evmOpNum: uint, code: AvmCodePoint) -> AvmCodePoint {
    // Some EVM instructions compile to a procedure call to some Mini code.
    // Generate the appropriate procedure call.
    // Note that the EVM code will already have put the args to the call on the stack,
    //     and the Mini code will leave return values on the stack.
    return pushValue(
        evmOpNum,
        pushValue(
            code,
            pushInstructionImm(
                0x34,
                evmOps_trampoline,
                code,
            ),
        ),
    );
}

func isKnownOpcode(opcode: uint) -> bool {  // return true iff opcode is a known EVM opcode
    return ( (opcode >= 0x00) && (opcode <= 0x0b) )
        || ( (opcode >= 0x10) && (opcode <= 0x1d) )
        || (opcode == 0x20)
        || ( (opcode >= 0x30) && (opcode <= 0x45) )
        || ( (opcode >= 0x50) && (opcode <= 0x5b) )
        || ( (opcode >= 0x60) && (opcode <= 0xa4) )
        || ( (opcode >= 0xf0) && (opcode <= 0xf5) )
        || (opcode == 0xfa)
        || ( (opcode == 0xfd) && (opcode <= 0xff) );
}

type AvmCodeBuilder = struct {
    requireSafe: bool,
    code: AvmCodePoint,
    size: uint,
    codeMap: map<uint, AvmCodePoint>,
}

public impure func avmCodeBuilder_new(requireSafe: bool) -> AvmCodeBuilder {
    let code = asm() AvmCodePoint { errcodept };
    return struct {
        requireSafe: requireSafe,
        code: code,
        size: 1,
        codeMap: newmap<uint, AvmCodePoint> with { [0] = code },
    };
}

public impure func avmCodeBuilder_append(builder: AvmCodeBuilder, stream: ByteStream) -> option<AvmCodeBuilder> {
    let requireSafe = builder.requireSafe;
    let code = builder.code;
    let size = builder.size;
    let codeMap = builder.codeMap;

    while( ! bytestream_atEof(stream) ) {
        let (ustr, insn) = bytestream_getByte(stream)?;
        if ( requireSafe && !isSafeInstruction(insn) ) {
            return None;
        }
        stream = ustr;
        let (ustr, hasImm) = bytestream_getByte(stream)?;
        stream = ustr;
        if (hasImm == 0) {
            code = pushInstruction(insn, code);
        } else {
            let (ustr, val) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            code = pushInstructionImm(insn, val, code);
        }
        codeMap = codeMap with { [size] = code };
        size = size+1;
    }

    return Some(struct {
        requireSafe: requireSafe,
        code: code,
        size: size,
        codeMap: codeMap,
    });
}

public func avmCodeBuilder_finish(builder: AvmCodeBuilder) -> AvmCodePoint {
    return builder.code;
}

func isSafeInstruction(insn: uint) -> bool {
    return (insn != 0x34)                      // rset
        && (insn != 0x3d)                      // errset
        && ((insn < 0x60) || (insn > 0x7f));   // various unsafe instructions
}

func unmarshalValue(stream: ByteStream, codeMap: map<uint, AvmCodePoint>) -> option<(ByteStream, any)> {
    let (ustr, kind) = bytestream_getByte(stream)?;
    stream = ustr;
    if (kind == 0) {  // integer
        let (ustr, val) = rlp_decodeUint(stream)?;
        return Some((ustr, val));
    } elseif (kind == 1) { // codepoint
        let (ustr, idx) = rlp_decodeUint(stream)?;
        if let Some(codePt) = codeMap[idx] {
            return Some((ustr, codePt));
        } else {
            return None;
        }
    } elseif (kind == 10) {   // 0-tuple
        return Some((stream, ()));
    } elseif (kind == 11) {   // 1-tuple
        let (ustr, x) = unmarshalValue(stream, codeMap)?;
        return Some((ustr, (x,)));
    } elseif (kind == 12) {   // 2-tuple
        let val = unsafecast<[2]any>((0,0));
        let i = 0;
        while (i < 2) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 13) {   // 3-tuple
        let val = unsafecast<[3]any>((0,0,0));
        let i = 0;
        while (i < 3) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 14) {   // 4-tuple
        let val = unsafecast<[4]any>((0,0,0,0));
        let i = 0;
        while (i < 4) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 15) {   // 5-tuple
        let val = unsafecast<[5]any>((0,0,0,0,0));
        let i = 0;
        while (i < 5) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 16) {   // 6-tuple
        let val = unsafecast<[6]any>((0,0,0,0,0,0));
        let i = 0;
        while (i < 6) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 17) {   // 7-tuple
        let val = unsafecast<[7]any>((0,0,0,0,0,0,0));
        let i = 0;
        while (i < 7) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } elseif (kind == 18) {   // 8-tuple
        let val = unsafecast<[8]any>((0,0,0,0,0,0,0,0));
        let i = 0;
        while (i < 8) {
            let (ustr, x) = unmarshalValue(stream, codeMap)?;
            stream = ustr;
            val = val with { [i] = x };
            i = i+1;
        }
        return Some((stream, val));
    } else {
        return None;
    }
}
