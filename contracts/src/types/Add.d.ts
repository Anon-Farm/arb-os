/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AddInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "getSeqNum()": FunctionFragment;
    "mult(uint256,uint256)": FunctionFragment;
    "pythag(uint256,uint256)": FunctionFragment;
    "withdraw5000()": FunctionFragment;
    "withdrawMyEth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSeqNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pythag",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw5000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMyEth",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSeqNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pythag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw5000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMyEth",
    data: BytesLike
  ): Result;

  events: {};
}

export class Add extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AddInterface;

  functions: {
    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "add(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSeqNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSeqNum()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mult(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mult(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pythag(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pythag(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw5000(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw5000()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawMyEth(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "withdrawMyEth()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  add(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "add(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSeqNum(overrides?: CallOverrides): Promise<BigNumber>;

  "getSeqNum()"(overrides?: CallOverrides): Promise<BigNumber>;

  mult(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mult(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pythag(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pythag(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw5000(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw5000()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawMyEth(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "withdrawMyEth()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  callStatic: {
    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeqNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getSeqNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    mult(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mult(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pythag(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pythag(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw5000(overrides?: CallOverrides): Promise<void>;

    "withdraw5000()"(overrides?: CallOverrides): Promise<void>;

    withdrawMyEth(overrides?: CallOverrides): Promise<void>;

    "withdrawMyEth()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeqNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getSeqNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    mult(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mult(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pythag(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pythag(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw5000(overrides?: Overrides): Promise<BigNumber>;

    "withdraw5000()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawMyEth(overrides?: PayableOverrides): Promise<BigNumber>;

    "withdrawMyEth()"(overrides?: PayableOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeqNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSeqNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mult(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mult(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pythag(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pythag(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw5000(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw5000()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawMyEth(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "withdrawMyEth()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
